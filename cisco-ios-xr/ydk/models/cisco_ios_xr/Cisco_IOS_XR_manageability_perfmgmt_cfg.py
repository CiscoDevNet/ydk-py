""" Cisco_IOS_XR_manageability_perfmgmt_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR manageability\-perfmgmt package configuration.

This module contains definitions
for the following management objects\:
  perf\-mgmt\: Performance Management configuration & operations

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class PmThresholdOp(Enum):
    """
    PmThresholdOp

    Pm threshold op

    .. data:: eq = 1

    	Equal to

    .. data:: ne = 2

    	Not equal to

    .. data:: lt = 3

    	Less than

    .. data:: le = 4

    	Less than or equal to

    .. data:: gt = 5

    	Greater than

    .. data:: ge = 6

    	Greater than or equal to

    .. data:: rg = 7

    	Not in Range

    """

    eq = Enum.YLeaf(1, "eq")

    ne = Enum.YLeaf(2, "ne")

    lt = Enum.YLeaf(3, "lt")

    le = Enum.YLeaf(4, "le")

    gt = Enum.YLeaf(5, "gt")

    ge = Enum.YLeaf(6, "ge")

    rg = Enum.YLeaf(7, "rg")


class PmThresholdRearm(Enum):
    """
    PmThresholdRearm

    Pm threshold rearm

    .. data:: always = 0

    	Rearm Always

    .. data:: window = 1

    	Rearm after window of sampling periods

    .. data:: toggle = 2

    	Rearm after the first period when condition is

    	not met

    """

    always = Enum.YLeaf(0, "always")

    window = Enum.YLeaf(1, "window")

    toggle = Enum.YLeaf(2, "toggle")



class PerfMgmt(Entity):
    """
    Performance Management configuration & operations
    
    .. attribute:: enable
    
    	Start data collection and/or threshold monitoring
    	**type**\:   :py:class:`Enable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable>`
    
    .. attribute:: reg_exp_groups
    
    	Configure regular expression group
    	**type**\:   :py:class:`RegExpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.RegExpGroups>`
    
    .. attribute:: resources
    
    	Resources configuration
    	**type**\:   :py:class:`Resources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Resources>`
    
    .. attribute:: statistics
    
    	Templates for collection of statistics
    	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics>`
    
    .. attribute:: threshold
    
    	Container for threshold templates
    	**type**\:   :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold>`
    
    

    """

    _prefix = 'manageability-perfmgmt-cfg'
    _revision = '2015-11-09'

    def __init__(self):
        super(PerfMgmt, self).__init__()
        self._top_entity = None

        self.yang_name = "perf-mgmt"
        self.yang_parent_name = "Cisco-IOS-XR-manageability-perfmgmt-cfg"

        self.enable = PerfMgmt.Enable()
        self.enable.parent = self
        self._children_name_map["enable"] = "enable"
        self._children_yang_names.add("enable")

        self.reg_exp_groups = PerfMgmt.RegExpGroups()
        self.reg_exp_groups.parent = self
        self._children_name_map["reg_exp_groups"] = "reg-exp-groups"
        self._children_yang_names.add("reg-exp-groups")

        self.resources = PerfMgmt.Resources()
        self.resources.parent = self
        self._children_name_map["resources"] = "resources"
        self._children_yang_names.add("resources")

        self.statistics = PerfMgmt.Statistics()
        self.statistics.parent = self
        self._children_name_map["statistics"] = "statistics"
        self._children_yang_names.add("statistics")

        self.threshold = PerfMgmt.Threshold()
        self.threshold.parent = self
        self._children_name_map["threshold"] = "threshold"
        self._children_yang_names.add("threshold")


    class Resources(Entity):
        """
        Resources configuration
        
        .. attribute:: dump_local
        
        	Configure local dump parameters
        	**type**\:   :py:class:`DumpLocal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Resources.DumpLocal>`
        
        .. attribute:: memory_resources
        
        	Configure the memory usage limits of performance management
        	**type**\:   :py:class:`MemoryResources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Resources.MemoryResources>`
        
        .. attribute:: tftp_resources
        
        	Configure the TFTP server IP address and directory name
        	**type**\:   :py:class:`TftpResources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Resources.TftpResources>`
        
        	**presence node**\: True
        
        

        """

        _prefix = 'manageability-perfmgmt-cfg'
        _revision = '2015-11-09'

        def __init__(self):
            super(PerfMgmt.Resources, self).__init__()

            self.yang_name = "resources"
            self.yang_parent_name = "perf-mgmt"

            self.dump_local = PerfMgmt.Resources.DumpLocal()
            self.dump_local.parent = self
            self._children_name_map["dump_local"] = "dump-local"
            self._children_yang_names.add("dump-local")

            self.memory_resources = PerfMgmt.Resources.MemoryResources()
            self.memory_resources.parent = self
            self._children_name_map["memory_resources"] = "memory-resources"
            self._children_yang_names.add("memory-resources")

            self.tftp_resources = None
            self._children_name_map["tftp_resources"] = "tftp-resources"
            self._children_yang_names.add("tftp-resources")


        class TftpResources(Entity):
            """
            Configure the TFTP server IP address and
            directory name
            
            .. attribute:: directory
            
            	Directory name on TFTP server
            	**type**\:  str
            
            	**mandatory**\: True
            
            .. attribute:: server_address
            
            	IP address of the TFTP server
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            	**mandatory**\: True
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\:  str
            
            	**length:** 1..32
            
            

            This class is a :ref:`presence class<presence-class>`

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Resources.TftpResources, self).__init__()

                self.yang_name = "tftp-resources"
                self.yang_parent_name = "resources"
                self.is_presence_container = True

                self.directory = YLeaf(YType.str, "directory")

                self.server_address = YLeaf(YType.str, "server-address")

                self.vrf_name = YLeaf(YType.str, "vrf-name")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("directory",
                                "server_address",
                                "vrf_name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(PerfMgmt.Resources.TftpResources, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(PerfMgmt.Resources.TftpResources, self).__setattr__(name, value)

            def has_data(self):
                return (
                    self.directory.is_set or
                    self.server_address.is_set or
                    self.vrf_name.is_set)

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.directory.yfilter != YFilter.not_set or
                    self.server_address.yfilter != YFilter.not_set or
                    self.vrf_name.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "tftp-resources" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/resources/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.directory.is_set or self.directory.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.directory.get_name_leafdata())
                if (self.server_address.is_set or self.server_address.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.server_address.get_name_leafdata())
                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "directory" or name == "server-address" or name == "vrf-name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "directory"):
                    self.directory = value
                    self.directory.value_namespace = name_space
                    self.directory.value_namespace_prefix = name_space_prefix
                if(value_path == "server-address"):
                    self.server_address = value
                    self.server_address.value_namespace = name_space
                    self.server_address.value_namespace_prefix = name_space_prefix
                if(value_path == "vrf-name"):
                    self.vrf_name = value
                    self.vrf_name.value_namespace = name_space
                    self.vrf_name.value_namespace_prefix = name_space_prefix


        class DumpLocal(Entity):
            """
            Configure local dump parameters
            
            .. attribute:: enable
            
            	Enable data dump onto local filesystem
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Resources.DumpLocal, self).__init__()

                self.yang_name = "dump-local"
                self.yang_parent_name = "resources"

                self.enable = YLeaf(YType.empty, "enable")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("enable") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(PerfMgmt.Resources.DumpLocal, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(PerfMgmt.Resources.DumpLocal, self).__setattr__(name, value)

            def has_data(self):
                return self.enable.is_set

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.enable.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "dump-local" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/resources/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.enable.is_set or self.enable.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.enable.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "enable"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "enable"):
                    self.enable = value
                    self.enable.value_namespace = name_space
                    self.enable.value_namespace_prefix = name_space_prefix


        class MemoryResources(Entity):
            """
            Configure the memory usage limits of
            performance management
            
            .. attribute:: max_limit
            
            	Maximum limit for memory usage (Kbytes) for data buffers
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: kilobyte
            
            .. attribute:: min_reserved
            
            	Specify a minimum free memory (Kbytes) to be ensured before allowing a collection request
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: kilobyte
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Resources.MemoryResources, self).__init__()

                self.yang_name = "memory-resources"
                self.yang_parent_name = "resources"

                self.max_limit = YLeaf(YType.int32, "max-limit")

                self.min_reserved = YLeaf(YType.int32, "min-reserved")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("max_limit",
                                "min_reserved") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(PerfMgmt.Resources.MemoryResources, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(PerfMgmt.Resources.MemoryResources, self).__setattr__(name, value)

            def has_data(self):
                return (
                    self.max_limit.is_set or
                    self.min_reserved.is_set)

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.max_limit.yfilter != YFilter.not_set or
                    self.min_reserved.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "memory-resources" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/resources/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.max_limit.is_set or self.max_limit.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.max_limit.get_name_leafdata())
                if (self.min_reserved.is_set or self.min_reserved.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.min_reserved.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "max-limit" or name == "min-reserved"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "max-limit"):
                    self.max_limit = value
                    self.max_limit.value_namespace = name_space
                    self.max_limit.value_namespace_prefix = name_space_prefix
                if(value_path == "min-reserved"):
                    self.min_reserved = value
                    self.min_reserved.value_namespace = name_space
                    self.min_reserved.value_namespace_prefix = name_space_prefix

        def has_data(self):
            return (
                (self.dump_local is not None and self.dump_local.has_data()) or
                (self.memory_resources is not None and self.memory_resources.has_data()) or
                (self.tftp_resources is not None))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.dump_local is not None and self.dump_local.has_operation()) or
                (self.memory_resources is not None and self.memory_resources.has_operation()) or
                (self.tftp_resources is not None and self.tftp_resources.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "resources" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "dump-local"):
                if (self.dump_local is None):
                    self.dump_local = PerfMgmt.Resources.DumpLocal()
                    self.dump_local.parent = self
                    self._children_name_map["dump_local"] = "dump-local"
                return self.dump_local

            if (child_yang_name == "memory-resources"):
                if (self.memory_resources is None):
                    self.memory_resources = PerfMgmt.Resources.MemoryResources()
                    self.memory_resources.parent = self
                    self._children_name_map["memory_resources"] = "memory-resources"
                return self.memory_resources

            if (child_yang_name == "tftp-resources"):
                if (self.tftp_resources is None):
                    self.tftp_resources = PerfMgmt.Resources.TftpResources()
                    self.tftp_resources.parent = self
                    self._children_name_map["tftp_resources"] = "tftp-resources"
                return self.tftp_resources

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "dump-local" or name == "memory-resources" or name == "tftp-resources"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class Statistics(Entity):
        """
        Templates for collection of statistics
        
        .. attribute:: basic_counter_interface
        
        	Interface BasicCounter collection templates
        	**type**\:   :py:class:`BasicCounterInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.BasicCounterInterface>`
        
        .. attribute:: bgp
        
        	BGP collection templates
        	**type**\:   :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.Bgp>`
        
        .. attribute:: cpu_node
        
        	Node CPU collection templates
        	**type**\:   :py:class:`CpuNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.CpuNode>`
        
        .. attribute:: data_rate_interface
        
        	Interface DataRate collection templates
        	**type**\:   :py:class:`DataRateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.DataRateInterface>`
        
        .. attribute:: generic_counter_interface
        
        	Interface Generic GenericCounter collection templates
        	**type**\:   :py:class:`GenericCounterInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.GenericCounterInterface>`
        
        .. attribute:: ldp_mpls
        
        	MPLS LDP collection templates
        	**type**\:   :py:class:`LdpMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.LdpMpls>`
        
        .. attribute:: memory_node
        
        	Node Memory collection templates
        	**type**\:   :py:class:`MemoryNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.MemoryNode>`
        
        .. attribute:: ospfv2_protocol
        
        	OSPF v2 Protocol collection templates
        	**type**\:   :py:class:`Ospfv2Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.Ospfv2Protocol>`
        
        .. attribute:: ospfv3_protocol
        
        	OSPF v3 Protocol collection templates
        	**type**\:   :py:class:`Ospfv3Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.Ospfv3Protocol>`
        
        .. attribute:: process_node
        
        	Node Process collection templates
        	**type**\:   :py:class:`ProcessNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.ProcessNode>`
        
        

        """

        _prefix = 'manageability-perfmgmt-cfg'
        _revision = '2015-11-09'

        def __init__(self):
            super(PerfMgmt.Statistics, self).__init__()

            self.yang_name = "statistics"
            self.yang_parent_name = "perf-mgmt"

            self.basic_counter_interface = PerfMgmt.Statistics.BasicCounterInterface()
            self.basic_counter_interface.parent = self
            self._children_name_map["basic_counter_interface"] = "basic-counter-interface"
            self._children_yang_names.add("basic-counter-interface")

            self.bgp = PerfMgmt.Statistics.Bgp()
            self.bgp.parent = self
            self._children_name_map["bgp"] = "bgp"
            self._children_yang_names.add("bgp")

            self.cpu_node = PerfMgmt.Statistics.CpuNode()
            self.cpu_node.parent = self
            self._children_name_map["cpu_node"] = "cpu-node"
            self._children_yang_names.add("cpu-node")

            self.data_rate_interface = PerfMgmt.Statistics.DataRateInterface()
            self.data_rate_interface.parent = self
            self._children_name_map["data_rate_interface"] = "data-rate-interface"
            self._children_yang_names.add("data-rate-interface")

            self.generic_counter_interface = PerfMgmt.Statistics.GenericCounterInterface()
            self.generic_counter_interface.parent = self
            self._children_name_map["generic_counter_interface"] = "generic-counter-interface"
            self._children_yang_names.add("generic-counter-interface")

            self.ldp_mpls = PerfMgmt.Statistics.LdpMpls()
            self.ldp_mpls.parent = self
            self._children_name_map["ldp_mpls"] = "ldp-mpls"
            self._children_yang_names.add("ldp-mpls")

            self.memory_node = PerfMgmt.Statistics.MemoryNode()
            self.memory_node.parent = self
            self._children_name_map["memory_node"] = "memory-node"
            self._children_yang_names.add("memory-node")

            self.ospfv2_protocol = PerfMgmt.Statistics.Ospfv2Protocol()
            self.ospfv2_protocol.parent = self
            self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
            self._children_yang_names.add("ospfv2-protocol")

            self.ospfv3_protocol = PerfMgmt.Statistics.Ospfv3Protocol()
            self.ospfv3_protocol.parent = self
            self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
            self._children_yang_names.add("ospfv3-protocol")

            self.process_node = PerfMgmt.Statistics.ProcessNode()
            self.process_node.parent = self
            self._children_name_map["process_node"] = "process-node"
            self._children_yang_names.add("process-node")


        class GenericCounterInterface(Entity):
            """
            Interface Generic GenericCounter collection
            templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.GenericCounterInterface.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.GenericCounterInterface, self).__init__()

                self.yang_name = "generic-counter-interface"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.GenericCounterInterface.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.GenericCounterInterface.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.GenericCounterInterface.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "generic-counter-interface"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.GenericCounterInterface.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.GenericCounterInterface.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.GenericCounterInterface.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.GenericCounterInterface.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.GenericCounterInterface.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/generic-counter-interface/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/generic-counter-interface/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.GenericCounterInterface.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "generic-counter-interface" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.GenericCounterInterface.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class ProcessNode(Entity):
            """
            Node Process collection templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.ProcessNode.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.ProcessNode, self).__init__()

                self.yang_name = "process-node"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.ProcessNode.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.ProcessNode.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.ProcessNode.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "process-node"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.ProcessNode.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.ProcessNode.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.ProcessNode.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.ProcessNode.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.ProcessNode.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/process-node/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/process-node/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.ProcessNode.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "process-node" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.ProcessNode.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class BasicCounterInterface(Entity):
            """
            Interface BasicCounter collection templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.BasicCounterInterface.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.BasicCounterInterface, self).__init__()

                self.yang_name = "basic-counter-interface"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.BasicCounterInterface.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.BasicCounterInterface.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.BasicCounterInterface.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "basic-counter-interface"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.BasicCounterInterface.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.BasicCounterInterface.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.BasicCounterInterface.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.BasicCounterInterface.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.BasicCounterInterface.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/basic-counter-interface/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/basic-counter-interface/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.BasicCounterInterface.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "basic-counter-interface" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.BasicCounterInterface.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Ospfv3Protocol(Entity):
            """
            OSPF v3 Protocol collection templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.Ospfv3Protocol.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.Ospfv3Protocol, self).__init__()

                self.yang_name = "ospfv3-protocol"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.Ospfv3Protocol.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.Ospfv3Protocol.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.Ospfv3Protocol.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "ospfv3-protocol"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.Ospfv3Protocol.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.Ospfv3Protocol.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.Ospfv3Protocol.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.Ospfv3Protocol.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.Ospfv3Protocol.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ospfv3-protocol/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ospfv3-protocol/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.Ospfv3Protocol.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "ospfv3-protocol" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.Ospfv3Protocol.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class CpuNode(Entity):
            """
            Node CPU collection templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.CpuNode.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.CpuNode, self).__init__()

                self.yang_name = "cpu-node"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.CpuNode.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.CpuNode.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.CpuNode.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "cpu-node"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.CpuNode.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.CpuNode.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.CpuNode.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.CpuNode.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.CpuNode.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/cpu-node/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/cpu-node/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.CpuNode.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "cpu-node" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.CpuNode.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class DataRateInterface(Entity):
            """
            Interface DataRate collection templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.DataRateInterface.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.DataRateInterface, self).__init__()

                self.yang_name = "data-rate-interface"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.DataRateInterface.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.DataRateInterface.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.DataRateInterface.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "data-rate-interface"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.DataRateInterface.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.DataRateInterface.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.DataRateInterface.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.DataRateInterface.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.DataRateInterface.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/data-rate-interface/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/data-rate-interface/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.DataRateInterface.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "data-rate-interface" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.DataRateInterface.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class MemoryNode(Entity):
            """
            Node Memory collection templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.MemoryNode.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.MemoryNode, self).__init__()

                self.yang_name = "memory-node"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.MemoryNode.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.MemoryNode.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.MemoryNode.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "memory-node"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.MemoryNode.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.MemoryNode.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.MemoryNode.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.MemoryNode.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.MemoryNode.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/memory-node/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/memory-node/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.MemoryNode.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "memory-node" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.MemoryNode.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class LdpMpls(Entity):
            """
            MPLS LDP collection templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.LdpMpls.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.LdpMpls, self).__init__()

                self.yang_name = "ldp-mpls"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.LdpMpls.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.LdpMpls.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.LdpMpls.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "ldp-mpls"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.LdpMpls.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.LdpMpls.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.LdpMpls.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.LdpMpls.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.LdpMpls.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ldp-mpls/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ldp-mpls/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.LdpMpls.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "ldp-mpls" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.LdpMpls.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Bgp(Entity):
            """
            BGP collection templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.Bgp.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.Bgp, self).__init__()

                self.yang_name = "bgp"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.Bgp.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.Bgp.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.Bgp.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "bgp"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.Bgp.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.Bgp.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.Bgp.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.Bgp.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.Bgp.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/bgp/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/bgp/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.Bgp.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "bgp" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.Bgp.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Ospfv2Protocol(Entity):
            """
            OSPF v2 Protocol collection templates
            
            .. attribute:: templates
            
            	Template name
            	**type**\:   :py:class:`Templates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.Ospfv2Protocol.Templates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Statistics.Ospfv2Protocol, self).__init__()

                self.yang_name = "ospfv2-protocol"
                self.yang_parent_name = "statistics"

                self.templates = PerfMgmt.Statistics.Ospfv2Protocol.Templates()
                self.templates.parent = self
                self._children_name_map["templates"] = "templates"
                self._children_yang_names.add("templates")


            class Templates(Entity):
                """
                Template name
                
                .. attribute:: template
                
                	A template instance
                	**type**\: list of    :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Statistics.Ospfv2Protocol.Templates.Template>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Statistics.Ospfv2Protocol.Templates, self).__init__()

                    self.yang_name = "templates"
                    self.yang_parent_name = "ospfv2-protocol"

                    self.template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Statistics.Ospfv2Protocol.Templates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Statistics.Ospfv2Protocol.Templates, self).__setattr__(name, value)


                class Template(Entity):
                    """
                    A template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: history_persistent
                    
                    	Enable persistent history statistics
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of each sample in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: sample_size
                    
                    	Number of samples to be taken
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    .. attribute:: vrf_group
                    
                    	VRF group configured in regular expression to be applied
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Statistics.Ospfv2Protocol.Templates.Template, self).__init__()

                        self.yang_name = "template"
                        self.yang_parent_name = "templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.history_persistent = YLeaf(YType.empty, "history-persistent")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.sample_size = YLeaf(YType.uint32, "sample-size")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "history_persistent",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "sample_size",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Statistics.Ospfv2Protocol.Templates.Template, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Statistics.Ospfv2Protocol.Templates.Template, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.history_persistent.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.sample_size.is_set or
                            self.vrf_group.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.history_persistent.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.sample_size.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ospfv2-protocol/templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.history_persistent.is_set or self.history_persistent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.history_persistent.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.sample_size.is_set or self.sample_size.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_size.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name" or name == "history-persistent" or name == "reg-exp-group" or name == "sample-interval" or name == "sample-size" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "history-persistent"):
                            self.history_persistent = value
                            self.history_persistent.value_namespace = name_space
                            self.history_persistent.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-size"):
                            self.sample_size = value
                            self.sample_size.value_namespace = name_space
                            self.sample_size.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ospfv2-protocol/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "template"):
                        for c in self.template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Statistics.Ospfv2Protocol.Templates.Template()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.templates is not None and self.templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.templates is not None and self.templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "ospfv2-protocol" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "templates"):
                    if (self.templates is None):
                        self.templates = PerfMgmt.Statistics.Ospfv2Protocol.Templates()
                        self.templates.parent = self
                        self._children_name_map["templates"] = "templates"
                    return self.templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (
                (self.basic_counter_interface is not None and self.basic_counter_interface.has_data()) or
                (self.bgp is not None and self.bgp.has_data()) or
                (self.cpu_node is not None and self.cpu_node.has_data()) or
                (self.data_rate_interface is not None and self.data_rate_interface.has_data()) or
                (self.generic_counter_interface is not None and self.generic_counter_interface.has_data()) or
                (self.ldp_mpls is not None and self.ldp_mpls.has_data()) or
                (self.memory_node is not None and self.memory_node.has_data()) or
                (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_data()) or
                (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_data()) or
                (self.process_node is not None and self.process_node.has_data()))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.basic_counter_interface is not None and self.basic_counter_interface.has_operation()) or
                (self.bgp is not None and self.bgp.has_operation()) or
                (self.cpu_node is not None and self.cpu_node.has_operation()) or
                (self.data_rate_interface is not None and self.data_rate_interface.has_operation()) or
                (self.generic_counter_interface is not None and self.generic_counter_interface.has_operation()) or
                (self.ldp_mpls is not None and self.ldp_mpls.has_operation()) or
                (self.memory_node is not None and self.memory_node.has_operation()) or
                (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_operation()) or
                (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_operation()) or
                (self.process_node is not None and self.process_node.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "statistics" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "basic-counter-interface"):
                if (self.basic_counter_interface is None):
                    self.basic_counter_interface = PerfMgmt.Statistics.BasicCounterInterface()
                    self.basic_counter_interface.parent = self
                    self._children_name_map["basic_counter_interface"] = "basic-counter-interface"
                return self.basic_counter_interface

            if (child_yang_name == "bgp"):
                if (self.bgp is None):
                    self.bgp = PerfMgmt.Statistics.Bgp()
                    self.bgp.parent = self
                    self._children_name_map["bgp"] = "bgp"
                return self.bgp

            if (child_yang_name == "cpu-node"):
                if (self.cpu_node is None):
                    self.cpu_node = PerfMgmt.Statistics.CpuNode()
                    self.cpu_node.parent = self
                    self._children_name_map["cpu_node"] = "cpu-node"
                return self.cpu_node

            if (child_yang_name == "data-rate-interface"):
                if (self.data_rate_interface is None):
                    self.data_rate_interface = PerfMgmt.Statistics.DataRateInterface()
                    self.data_rate_interface.parent = self
                    self._children_name_map["data_rate_interface"] = "data-rate-interface"
                return self.data_rate_interface

            if (child_yang_name == "generic-counter-interface"):
                if (self.generic_counter_interface is None):
                    self.generic_counter_interface = PerfMgmt.Statistics.GenericCounterInterface()
                    self.generic_counter_interface.parent = self
                    self._children_name_map["generic_counter_interface"] = "generic-counter-interface"
                return self.generic_counter_interface

            if (child_yang_name == "ldp-mpls"):
                if (self.ldp_mpls is None):
                    self.ldp_mpls = PerfMgmt.Statistics.LdpMpls()
                    self.ldp_mpls.parent = self
                    self._children_name_map["ldp_mpls"] = "ldp-mpls"
                return self.ldp_mpls

            if (child_yang_name == "memory-node"):
                if (self.memory_node is None):
                    self.memory_node = PerfMgmt.Statistics.MemoryNode()
                    self.memory_node.parent = self
                    self._children_name_map["memory_node"] = "memory-node"
                return self.memory_node

            if (child_yang_name == "ospfv2-protocol"):
                if (self.ospfv2_protocol is None):
                    self.ospfv2_protocol = PerfMgmt.Statistics.Ospfv2Protocol()
                    self.ospfv2_protocol.parent = self
                    self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
                return self.ospfv2_protocol

            if (child_yang_name == "ospfv3-protocol"):
                if (self.ospfv3_protocol is None):
                    self.ospfv3_protocol = PerfMgmt.Statistics.Ospfv3Protocol()
                    self.ospfv3_protocol.parent = self
                    self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
                return self.ospfv3_protocol

            if (child_yang_name == "process-node"):
                if (self.process_node is None):
                    self.process_node = PerfMgmt.Statistics.ProcessNode()
                    self.process_node.parent = self
                    self._children_name_map["process_node"] = "process-node"
                return self.process_node

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "basic-counter-interface" or name == "bgp" or name == "cpu-node" or name == "data-rate-interface" or name == "generic-counter-interface" or name == "ldp-mpls" or name == "memory-node" or name == "ospfv2-protocol" or name == "ospfv3-protocol" or name == "process-node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class Enable(Entity):
        """
        Start data collection and/or threshold
        monitoring
        
        .. attribute:: monitor_enable
        
        	Start data collection for a monitored instance
        	**type**\:   :py:class:`MonitorEnable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable>`
        
        .. attribute:: statistics
        
        	Start periodic collection using a defined a template
        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics>`
        
        .. attribute:: threshold
        
        	Start threshold monitoring using a defined template
        	**type**\:   :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold>`
        
        

        """

        _prefix = 'manageability-perfmgmt-cfg'
        _revision = '2015-11-09'

        def __init__(self):
            super(PerfMgmt.Enable, self).__init__()

            self.yang_name = "enable"
            self.yang_parent_name = "perf-mgmt"

            self.monitor_enable = PerfMgmt.Enable.MonitorEnable()
            self.monitor_enable.parent = self
            self._children_name_map["monitor_enable"] = "monitor-enable"
            self._children_yang_names.add("monitor-enable")

            self.statistics = PerfMgmt.Enable.Statistics()
            self.statistics.parent = self
            self._children_name_map["statistics"] = "statistics"
            self._children_yang_names.add("statistics")

            self.threshold = PerfMgmt.Enable.Threshold()
            self.threshold.parent = self
            self._children_name_map["threshold"] = "threshold"
            self._children_yang_names.add("threshold")


        class Threshold(Entity):
            """
            Start threshold monitoring using a defined
            template
            
            .. attribute:: basic_counter_interface
            
            	Threshold monitoring for Interface basic\-counters
            	**type**\:   :py:class:`BasicCounterInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.BasicCounterInterface>`
            
            .. attribute:: bgp
            
            	Threshold monitoring for BGP
            	**type**\:   :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.Bgp>`
            
            .. attribute:: cpu_node
            
            	Threshold monitoring for CPU
            	**type**\:   :py:class:`CpuNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.CpuNode>`
            
            .. attribute:: data_rate_interface
            
            	Threshold monitoring for Interface  data\-rates
            	**type**\:   :py:class:`DataRateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.DataRateInterface>`
            
            .. attribute:: generic_counter_interface
            
            	Threshold monitoring for Interface generic\-counters
            	**type**\:   :py:class:`GenericCounterInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.GenericCounterInterface>`
            
            .. attribute:: ldp_mpls
            
            	Threshold monitoring for LDP
            	**type**\:   :py:class:`LdpMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.LdpMpls>`
            
            .. attribute:: memory_node
            
            	Threshold monitoring for memory
            	**type**\:   :py:class:`MemoryNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.MemoryNode>`
            
            .. attribute:: ospfv2_protocol
            
            	Threshold monitoring for OSPF v2 Protocol
            	**type**\:   :py:class:`Ospfv2Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.Ospfv2Protocol>`
            
            .. attribute:: ospfv3_protocol
            
            	Threshold monitoring for OSPF v3 Protocol
            	**type**\:   :py:class:`Ospfv3Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.Ospfv3Protocol>`
            
            .. attribute:: process_node
            
            	Threshold monitoring for process
            	**type**\:   :py:class:`ProcessNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.ProcessNode>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Enable.Threshold, self).__init__()

                self.yang_name = "threshold"
                self.yang_parent_name = "enable"

                self.basic_counter_interface = PerfMgmt.Enable.Threshold.BasicCounterInterface()
                self.basic_counter_interface.parent = self
                self._children_name_map["basic_counter_interface"] = "basic-counter-interface"
                self._children_yang_names.add("basic-counter-interface")

                self.bgp = PerfMgmt.Enable.Threshold.Bgp()
                self.bgp.parent = self
                self._children_name_map["bgp"] = "bgp"
                self._children_yang_names.add("bgp")

                self.cpu_node = PerfMgmt.Enable.Threshold.CpuNode()
                self.cpu_node.parent = self
                self._children_name_map["cpu_node"] = "cpu-node"
                self._children_yang_names.add("cpu-node")

                self.data_rate_interface = PerfMgmt.Enable.Threshold.DataRateInterface()
                self.data_rate_interface.parent = self
                self._children_name_map["data_rate_interface"] = "data-rate-interface"
                self._children_yang_names.add("data-rate-interface")

                self.generic_counter_interface = PerfMgmt.Enable.Threshold.GenericCounterInterface()
                self.generic_counter_interface.parent = self
                self._children_name_map["generic_counter_interface"] = "generic-counter-interface"
                self._children_yang_names.add("generic-counter-interface")

                self.ldp_mpls = PerfMgmt.Enable.Threshold.LdpMpls()
                self.ldp_mpls.parent = self
                self._children_name_map["ldp_mpls"] = "ldp-mpls"
                self._children_yang_names.add("ldp-mpls")

                self.memory_node = PerfMgmt.Enable.Threshold.MemoryNode()
                self.memory_node.parent = self
                self._children_name_map["memory_node"] = "memory-node"
                self._children_yang_names.add("memory-node")

                self.ospfv2_protocol = PerfMgmt.Enable.Threshold.Ospfv2Protocol()
                self.ospfv2_protocol.parent = self
                self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
                self._children_yang_names.add("ospfv2-protocol")

                self.ospfv3_protocol = PerfMgmt.Enable.Threshold.Ospfv3Protocol()
                self.ospfv3_protocol.parent = self
                self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
                self._children_yang_names.add("ospfv3-protocol")

                self.process_node = PerfMgmt.Enable.Threshold.ProcessNode()
                self.process_node.parent = self
                self._children_name_map["process_node"] = "process-node"
                self._children_yang_names.add("process-node")


            class Ospfv3Protocol(Entity):
                """
                Threshold monitoring for OSPF v3 Protocol
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.Ospfv3Protocol, self).__init__()

                    self.yang_name = "ospfv3-protocol"
                    self.yang_parent_name = "threshold"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Threshold.Ospfv3Protocol, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Threshold.Ospfv3Protocol, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ospfv3-protocol" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class Bgp(Entity):
                """
                Threshold monitoring for BGP
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.Bgp, self).__init__()

                    self.yang_name = "bgp"
                    self.yang_parent_name = "threshold"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Threshold.Bgp, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Threshold.Bgp, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "bgp" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class DataRateInterface(Entity):
                """
                Threshold monitoring for Interface  data\-rates
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.DataRateInterface, self).__init__()

                    self.yang_name = "data-rate-interface"
                    self.yang_parent_name = "threshold"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Threshold.DataRateInterface, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Threshold.DataRateInterface, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "data-rate-interface" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class Ospfv2Protocol(Entity):
                """
                Threshold monitoring for OSPF v2 Protocol
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.Ospfv2Protocol, self).__init__()

                    self.yang_name = "ospfv2-protocol"
                    self.yang_parent_name = "threshold"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Threshold.Ospfv2Protocol, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Threshold.Ospfv2Protocol, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ospfv2-protocol" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class MemoryNode(Entity):
                """
                Threshold monitoring for memory
                
                .. attribute:: node_all
                
                	All the the nodes
                	**type**\:   :py:class:`NodeAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.MemoryNode.NodeAll>`
                
                .. attribute:: nodes
                
                	Node specification
                	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.MemoryNode.Nodes>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.MemoryNode, self).__init__()

                    self.yang_name = "memory-node"
                    self.yang_parent_name = "threshold"

                    self.node_all = PerfMgmt.Enable.Threshold.MemoryNode.NodeAll()
                    self.node_all.parent = self
                    self._children_name_map["node_all"] = "node-all"
                    self._children_yang_names.add("node-all")

                    self.nodes = PerfMgmt.Enable.Threshold.MemoryNode.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                    self._children_yang_names.add("nodes")


                class Nodes(Entity):
                    """
                    Node specification
                    
                    .. attribute:: node
                    
                    	Node instance
                    	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.MemoryNode.Nodes.Node>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Threshold.MemoryNode.Nodes, self).__init__()

                        self.yang_name = "nodes"
                        self.yang_parent_name = "memory-node"

                        self.node = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Threshold.MemoryNode.Nodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Threshold.MemoryNode.Nodes, self).__setattr__(name, value)


                    class Node(Entity):
                        """
                        Node instance
                        
                        .. attribute:: node_id  <key>
                        
                        	Node ID
                        	**type**\:  str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.Threshold.MemoryNode.Nodes.Node, self).__init__()

                            self.yang_name = "node"
                            self.yang_parent_name = "nodes"

                            self.node_id = YLeaf(YType.str, "node-id")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_id",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.Threshold.MemoryNode.Nodes.Node, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.Threshold.MemoryNode.Nodes.Node, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.node_id.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_id.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "node" + "[node-id='" + self.node_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/memory-node/nodes/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_id.is_set or self.node_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_id.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "node-id" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-id"):
                                self.node_id = value
                                self.node_id.value_namespace = name_space
                                self.node_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.node:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.node:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/memory-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "node"):
                            for c in self.node:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.Threshold.MemoryNode.Nodes.Node()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.node.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "node"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class NodeAll(Entity):
                    """
                    All the the nodes
                    
                    .. attribute:: template_name
                    
                    	Template name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Threshold.MemoryNode.NodeAll, self).__init__()

                        self.yang_name = "node-all"
                        self.yang_parent_name = "memory-node"

                        self.template_name = YLeaf(YType.str, "template-name")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Threshold.MemoryNode.NodeAll, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Threshold.MemoryNode.NodeAll, self).__setattr__(name, value)

                    def has_data(self):
                        return self.template_name.is_set

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "node-all" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/memory-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (
                        (self.node_all is not None and self.node_all.has_data()) or
                        (self.nodes is not None and self.nodes.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.node_all is not None and self.node_all.has_operation()) or
                        (self.nodes is not None and self.nodes.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "memory-node" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "node-all"):
                        if (self.node_all is None):
                            self.node_all = PerfMgmt.Enable.Threshold.MemoryNode.NodeAll()
                            self.node_all.parent = self
                            self._children_name_map["node_all"] = "node-all"
                        return self.node_all

                    if (child_yang_name == "nodes"):
                        if (self.nodes is None):
                            self.nodes = PerfMgmt.Enable.Threshold.MemoryNode.Nodes()
                            self.nodes.parent = self
                            self._children_name_map["nodes"] = "nodes"
                        return self.nodes

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node-all" or name == "nodes"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class GenericCounterInterface(Entity):
                """
                Threshold monitoring for Interface
                generic\-counters
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.GenericCounterInterface, self).__init__()

                    self.yang_name = "generic-counter-interface"
                    self.yang_parent_name = "threshold"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Threshold.GenericCounterInterface, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Threshold.GenericCounterInterface, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "generic-counter-interface" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class CpuNode(Entity):
                """
                Threshold monitoring for CPU
                
                .. attribute:: node_all
                
                	All the the nodes
                	**type**\:   :py:class:`NodeAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.CpuNode.NodeAll>`
                
                .. attribute:: nodes
                
                	Node specification
                	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.CpuNode.Nodes>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.CpuNode, self).__init__()

                    self.yang_name = "cpu-node"
                    self.yang_parent_name = "threshold"

                    self.node_all = PerfMgmt.Enable.Threshold.CpuNode.NodeAll()
                    self.node_all.parent = self
                    self._children_name_map["node_all"] = "node-all"
                    self._children_yang_names.add("node-all")

                    self.nodes = PerfMgmt.Enable.Threshold.CpuNode.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                    self._children_yang_names.add("nodes")


                class Nodes(Entity):
                    """
                    Node specification
                    
                    .. attribute:: node
                    
                    	Node instance
                    	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.CpuNode.Nodes.Node>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Threshold.CpuNode.Nodes, self).__init__()

                        self.yang_name = "nodes"
                        self.yang_parent_name = "cpu-node"

                        self.node = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Threshold.CpuNode.Nodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Threshold.CpuNode.Nodes, self).__setattr__(name, value)


                    class Node(Entity):
                        """
                        Node instance
                        
                        .. attribute:: node_id  <key>
                        
                        	Node ID
                        	**type**\:  str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.Threshold.CpuNode.Nodes.Node, self).__init__()

                            self.yang_name = "node"
                            self.yang_parent_name = "nodes"

                            self.node_id = YLeaf(YType.str, "node-id")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_id",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.Threshold.CpuNode.Nodes.Node, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.Threshold.CpuNode.Nodes.Node, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.node_id.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_id.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "node" + "[node-id='" + self.node_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/cpu-node/nodes/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_id.is_set or self.node_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_id.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "node-id" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-id"):
                                self.node_id = value
                                self.node_id.value_namespace = name_space
                                self.node_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.node:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.node:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/cpu-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "node"):
                            for c in self.node:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.Threshold.CpuNode.Nodes.Node()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.node.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "node"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class NodeAll(Entity):
                    """
                    All the the nodes
                    
                    .. attribute:: template_name
                    
                    	Template name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Threshold.CpuNode.NodeAll, self).__init__()

                        self.yang_name = "node-all"
                        self.yang_parent_name = "cpu-node"

                        self.template_name = YLeaf(YType.str, "template-name")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Threshold.CpuNode.NodeAll, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Threshold.CpuNode.NodeAll, self).__setattr__(name, value)

                    def has_data(self):
                        return self.template_name.is_set

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "node-all" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/cpu-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (
                        (self.node_all is not None and self.node_all.has_data()) or
                        (self.nodes is not None and self.nodes.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.node_all is not None and self.node_all.has_operation()) or
                        (self.nodes is not None and self.nodes.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "cpu-node" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "node-all"):
                        if (self.node_all is None):
                            self.node_all = PerfMgmt.Enable.Threshold.CpuNode.NodeAll()
                            self.node_all.parent = self
                            self._children_name_map["node_all"] = "node-all"
                        return self.node_all

                    if (child_yang_name == "nodes"):
                        if (self.nodes is None):
                            self.nodes = PerfMgmt.Enable.Threshold.CpuNode.Nodes()
                            self.nodes.parent = self
                            self._children_name_map["nodes"] = "nodes"
                        return self.nodes

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node-all" or name == "nodes"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class LdpMpls(Entity):
                """
                Threshold monitoring for LDP
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.LdpMpls, self).__init__()

                    self.yang_name = "ldp-mpls"
                    self.yang_parent_name = "threshold"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Threshold.LdpMpls, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Threshold.LdpMpls, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ldp-mpls" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class ProcessNode(Entity):
                """
                Threshold monitoring for process
                
                .. attribute:: node_all
                
                	All the the nodes
                	**type**\:   :py:class:`NodeAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.ProcessNode.NodeAll>`
                
                .. attribute:: nodes
                
                	Node specification
                	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.ProcessNode.Nodes>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.ProcessNode, self).__init__()

                    self.yang_name = "process-node"
                    self.yang_parent_name = "threshold"

                    self.node_all = PerfMgmt.Enable.Threshold.ProcessNode.NodeAll()
                    self.node_all.parent = self
                    self._children_name_map["node_all"] = "node-all"
                    self._children_yang_names.add("node-all")

                    self.nodes = PerfMgmt.Enable.Threshold.ProcessNode.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                    self._children_yang_names.add("nodes")


                class Nodes(Entity):
                    """
                    Node specification
                    
                    .. attribute:: node
                    
                    	Node instance
                    	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Threshold.ProcessNode.Nodes.Node>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Threshold.ProcessNode.Nodes, self).__init__()

                        self.yang_name = "nodes"
                        self.yang_parent_name = "process-node"

                        self.node = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Threshold.ProcessNode.Nodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Threshold.ProcessNode.Nodes, self).__setattr__(name, value)


                    class Node(Entity):
                        """
                        Node instance
                        
                        .. attribute:: node_id  <key>
                        
                        	Node ID
                        	**type**\:  str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.Threshold.ProcessNode.Nodes.Node, self).__init__()

                            self.yang_name = "node"
                            self.yang_parent_name = "nodes"

                            self.node_id = YLeaf(YType.str, "node-id")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_id",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.Threshold.ProcessNode.Nodes.Node, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.Threshold.ProcessNode.Nodes.Node, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.node_id.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_id.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "node" + "[node-id='" + self.node_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/process-node/nodes/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_id.is_set or self.node_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_id.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "node-id" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-id"):
                                self.node_id = value
                                self.node_id.value_namespace = name_space
                                self.node_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.node:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.node:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/process-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "node"):
                            for c in self.node:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.Threshold.ProcessNode.Nodes.Node()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.node.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "node"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class NodeAll(Entity):
                    """
                    All the the nodes
                    
                    .. attribute:: template_name
                    
                    	Template name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Threshold.ProcessNode.NodeAll, self).__init__()

                        self.yang_name = "node-all"
                        self.yang_parent_name = "process-node"

                        self.template_name = YLeaf(YType.str, "template-name")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Threshold.ProcessNode.NodeAll, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Threshold.ProcessNode.NodeAll, self).__setattr__(name, value)

                    def has_data(self):
                        return self.template_name.is_set

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "node-all" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/process-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (
                        (self.node_all is not None and self.node_all.has_data()) or
                        (self.nodes is not None and self.nodes.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.node_all is not None and self.node_all.has_operation()) or
                        (self.nodes is not None and self.nodes.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "process-node" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "node-all"):
                        if (self.node_all is None):
                            self.node_all = PerfMgmt.Enable.Threshold.ProcessNode.NodeAll()
                            self.node_all.parent = self
                            self._children_name_map["node_all"] = "node-all"
                        return self.node_all

                    if (child_yang_name == "nodes"):
                        if (self.nodes is None):
                            self.nodes = PerfMgmt.Enable.Threshold.ProcessNode.Nodes()
                            self.nodes.parent = self
                            self._children_name_map["nodes"] = "nodes"
                        return self.nodes

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node-all" or name == "nodes"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class BasicCounterInterface(Entity):
                """
                Threshold monitoring for Interface
                basic\-counters
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Threshold.BasicCounterInterface, self).__init__()

                    self.yang_name = "basic-counter-interface"
                    self.yang_parent_name = "threshold"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Threshold.BasicCounterInterface, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Threshold.BasicCounterInterface, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "basic-counter-interface" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                return (
                    (self.basic_counter_interface is not None and self.basic_counter_interface.has_data()) or
                    (self.bgp is not None and self.bgp.has_data()) or
                    (self.cpu_node is not None and self.cpu_node.has_data()) or
                    (self.data_rate_interface is not None and self.data_rate_interface.has_data()) or
                    (self.generic_counter_interface is not None and self.generic_counter_interface.has_data()) or
                    (self.ldp_mpls is not None and self.ldp_mpls.has_data()) or
                    (self.memory_node is not None and self.memory_node.has_data()) or
                    (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_data()) or
                    (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_data()) or
                    (self.process_node is not None and self.process_node.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.basic_counter_interface is not None and self.basic_counter_interface.has_operation()) or
                    (self.bgp is not None and self.bgp.has_operation()) or
                    (self.cpu_node is not None and self.cpu_node.has_operation()) or
                    (self.data_rate_interface is not None and self.data_rate_interface.has_operation()) or
                    (self.generic_counter_interface is not None and self.generic_counter_interface.has_operation()) or
                    (self.ldp_mpls is not None and self.ldp_mpls.has_operation()) or
                    (self.memory_node is not None and self.memory_node.has_operation()) or
                    (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_operation()) or
                    (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_operation()) or
                    (self.process_node is not None and self.process_node.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "threshold" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "basic-counter-interface"):
                    if (self.basic_counter_interface is None):
                        self.basic_counter_interface = PerfMgmt.Enable.Threshold.BasicCounterInterface()
                        self.basic_counter_interface.parent = self
                        self._children_name_map["basic_counter_interface"] = "basic-counter-interface"
                    return self.basic_counter_interface

                if (child_yang_name == "bgp"):
                    if (self.bgp is None):
                        self.bgp = PerfMgmt.Enable.Threshold.Bgp()
                        self.bgp.parent = self
                        self._children_name_map["bgp"] = "bgp"
                    return self.bgp

                if (child_yang_name == "cpu-node"):
                    if (self.cpu_node is None):
                        self.cpu_node = PerfMgmt.Enable.Threshold.CpuNode()
                        self.cpu_node.parent = self
                        self._children_name_map["cpu_node"] = "cpu-node"
                    return self.cpu_node

                if (child_yang_name == "data-rate-interface"):
                    if (self.data_rate_interface is None):
                        self.data_rate_interface = PerfMgmt.Enable.Threshold.DataRateInterface()
                        self.data_rate_interface.parent = self
                        self._children_name_map["data_rate_interface"] = "data-rate-interface"
                    return self.data_rate_interface

                if (child_yang_name == "generic-counter-interface"):
                    if (self.generic_counter_interface is None):
                        self.generic_counter_interface = PerfMgmt.Enable.Threshold.GenericCounterInterface()
                        self.generic_counter_interface.parent = self
                        self._children_name_map["generic_counter_interface"] = "generic-counter-interface"
                    return self.generic_counter_interface

                if (child_yang_name == "ldp-mpls"):
                    if (self.ldp_mpls is None):
                        self.ldp_mpls = PerfMgmt.Enable.Threshold.LdpMpls()
                        self.ldp_mpls.parent = self
                        self._children_name_map["ldp_mpls"] = "ldp-mpls"
                    return self.ldp_mpls

                if (child_yang_name == "memory-node"):
                    if (self.memory_node is None):
                        self.memory_node = PerfMgmt.Enable.Threshold.MemoryNode()
                        self.memory_node.parent = self
                        self._children_name_map["memory_node"] = "memory-node"
                    return self.memory_node

                if (child_yang_name == "ospfv2-protocol"):
                    if (self.ospfv2_protocol is None):
                        self.ospfv2_protocol = PerfMgmt.Enable.Threshold.Ospfv2Protocol()
                        self.ospfv2_protocol.parent = self
                        self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
                    return self.ospfv2_protocol

                if (child_yang_name == "ospfv3-protocol"):
                    if (self.ospfv3_protocol is None):
                        self.ospfv3_protocol = PerfMgmt.Enable.Threshold.Ospfv3Protocol()
                        self.ospfv3_protocol.parent = self
                        self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
                    return self.ospfv3_protocol

                if (child_yang_name == "process-node"):
                    if (self.process_node is None):
                        self.process_node = PerfMgmt.Enable.Threshold.ProcessNode()
                        self.process_node.parent = self
                        self._children_name_map["process_node"] = "process-node"
                    return self.process_node

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "basic-counter-interface" or name == "bgp" or name == "cpu-node" or name == "data-rate-interface" or name == "generic-counter-interface" or name == "ldp-mpls" or name == "memory-node" or name == "ospfv2-protocol" or name == "ospfv3-protocol" or name == "process-node"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Statistics(Entity):
            """
            Start periodic collection using a defined a
            template
            
            .. attribute:: basic_counter_interface
            
            	Statistics collection for basic\-counters
            	**type**\:   :py:class:`BasicCounterInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.BasicCounterInterface>`
            
            .. attribute:: bgp
            
            	Data collection for BGP
            	**type**\:   :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.Bgp>`
            
            .. attribute:: cpu_node
            
            	Collection for CPU
            	**type**\:   :py:class:`CpuNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.CpuNode>`
            
            .. attribute:: data_rate_interface
            
            	Statistics collection for generic\-counters
            	**type**\:   :py:class:`DataRateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.DataRateInterface>`
            
            .. attribute:: generic_counter_interface
            
            	Statistics collection for generic\-counters
            	**type**\:   :py:class:`GenericCounterInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.GenericCounterInterface>`
            
            .. attribute:: ldp_mpls
            
            	Collection for labels distribution protocol
            	**type**\:   :py:class:`LdpMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.LdpMpls>`
            
            .. attribute:: memory_node
            
            	Collection for memory
            	**type**\:   :py:class:`MemoryNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.MemoryNode>`
            
            .. attribute:: ospfv2_protocol
            
            	Data collection for OSPF v2 Protocol
            	**type**\:   :py:class:`Ospfv2Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.Ospfv2Protocol>`
            
            .. attribute:: ospfv3_protocol
            
            	Data collection for OSPF v3 Protocol
            	**type**\:   :py:class:`Ospfv3Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.Ospfv3Protocol>`
            
            .. attribute:: process_node
            
            	Collection for process
            	**type**\:   :py:class:`ProcessNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.ProcessNode>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Enable.Statistics, self).__init__()

                self.yang_name = "statistics"
                self.yang_parent_name = "enable"

                self.basic_counter_interface = PerfMgmt.Enable.Statistics.BasicCounterInterface()
                self.basic_counter_interface.parent = self
                self._children_name_map["basic_counter_interface"] = "basic-counter-interface"
                self._children_yang_names.add("basic-counter-interface")

                self.bgp = PerfMgmt.Enable.Statistics.Bgp()
                self.bgp.parent = self
                self._children_name_map["bgp"] = "bgp"
                self._children_yang_names.add("bgp")

                self.cpu_node = PerfMgmt.Enable.Statistics.CpuNode()
                self.cpu_node.parent = self
                self._children_name_map["cpu_node"] = "cpu-node"
                self._children_yang_names.add("cpu-node")

                self.data_rate_interface = PerfMgmt.Enable.Statistics.DataRateInterface()
                self.data_rate_interface.parent = self
                self._children_name_map["data_rate_interface"] = "data-rate-interface"
                self._children_yang_names.add("data-rate-interface")

                self.generic_counter_interface = PerfMgmt.Enable.Statistics.GenericCounterInterface()
                self.generic_counter_interface.parent = self
                self._children_name_map["generic_counter_interface"] = "generic-counter-interface"
                self._children_yang_names.add("generic-counter-interface")

                self.ldp_mpls = PerfMgmt.Enable.Statistics.LdpMpls()
                self.ldp_mpls.parent = self
                self._children_name_map["ldp_mpls"] = "ldp-mpls"
                self._children_yang_names.add("ldp-mpls")

                self.memory_node = PerfMgmt.Enable.Statistics.MemoryNode()
                self.memory_node.parent = self
                self._children_name_map["memory_node"] = "memory-node"
                self._children_yang_names.add("memory-node")

                self.ospfv2_protocol = PerfMgmt.Enable.Statistics.Ospfv2Protocol()
                self.ospfv2_protocol.parent = self
                self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
                self._children_yang_names.add("ospfv2-protocol")

                self.ospfv3_protocol = PerfMgmt.Enable.Statistics.Ospfv3Protocol()
                self.ospfv3_protocol.parent = self
                self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
                self._children_yang_names.add("ospfv3-protocol")

                self.process_node = PerfMgmt.Enable.Statistics.ProcessNode()
                self.process_node.parent = self
                self._children_name_map["process_node"] = "process-node"
                self._children_yang_names.add("process-node")


            class GenericCounterInterface(Entity):
                """
                Statistics collection for generic\-counters
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.GenericCounterInterface, self).__init__()

                    self.yang_name = "generic-counter-interface"
                    self.yang_parent_name = "statistics"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Statistics.GenericCounterInterface, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Statistics.GenericCounterInterface, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "generic-counter-interface" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class Bgp(Entity):
                """
                Data collection for BGP
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.Bgp, self).__init__()

                    self.yang_name = "bgp"
                    self.yang_parent_name = "statistics"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Statistics.Bgp, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Statistics.Bgp, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "bgp" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class Ospfv2Protocol(Entity):
                """
                Data collection for OSPF v2 Protocol
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.Ospfv2Protocol, self).__init__()

                    self.yang_name = "ospfv2-protocol"
                    self.yang_parent_name = "statistics"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Statistics.Ospfv2Protocol, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Statistics.Ospfv2Protocol, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ospfv2-protocol" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class Ospfv3Protocol(Entity):
                """
                Data collection for OSPF v3 Protocol
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.Ospfv3Protocol, self).__init__()

                    self.yang_name = "ospfv3-protocol"
                    self.yang_parent_name = "statistics"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Statistics.Ospfv3Protocol, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Statistics.Ospfv3Protocol, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ospfv3-protocol" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class CpuNode(Entity):
                """
                Collection for CPU
                
                .. attribute:: node_all
                
                	All the the nodes
                	**type**\:   :py:class:`NodeAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.CpuNode.NodeAll>`
                
                .. attribute:: nodes
                
                	Node specification
                	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.CpuNode.Nodes>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.CpuNode, self).__init__()

                    self.yang_name = "cpu-node"
                    self.yang_parent_name = "statistics"

                    self.node_all = PerfMgmt.Enable.Statistics.CpuNode.NodeAll()
                    self.node_all.parent = self
                    self._children_name_map["node_all"] = "node-all"
                    self._children_yang_names.add("node-all")

                    self.nodes = PerfMgmt.Enable.Statistics.CpuNode.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                    self._children_yang_names.add("nodes")


                class NodeAll(Entity):
                    """
                    All the the nodes
                    
                    .. attribute:: template_name
                    
                    	Template name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Statistics.CpuNode.NodeAll, self).__init__()

                        self.yang_name = "node-all"
                        self.yang_parent_name = "cpu-node"

                        self.template_name = YLeaf(YType.str, "template-name")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Statistics.CpuNode.NodeAll, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Statistics.CpuNode.NodeAll, self).__setattr__(name, value)

                    def has_data(self):
                        return self.template_name.is_set

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "node-all" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/cpu-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix


                class Nodes(Entity):
                    """
                    Node specification
                    
                    .. attribute:: node
                    
                    	Node instance
                    	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.CpuNode.Nodes.Node>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Statistics.CpuNode.Nodes, self).__init__()

                        self.yang_name = "nodes"
                        self.yang_parent_name = "cpu-node"

                        self.node = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Statistics.CpuNode.Nodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Statistics.CpuNode.Nodes, self).__setattr__(name, value)


                    class Node(Entity):
                        """
                        Node instance
                        
                        .. attribute:: node_id  <key>
                        
                        	Node ID
                        	**type**\:  str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.Statistics.CpuNode.Nodes.Node, self).__init__()

                            self.yang_name = "node"
                            self.yang_parent_name = "nodes"

                            self.node_id = YLeaf(YType.str, "node-id")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_id",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.Statistics.CpuNode.Nodes.Node, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.Statistics.CpuNode.Nodes.Node, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.node_id.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_id.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "node" + "[node-id='" + self.node_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/cpu-node/nodes/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_id.is_set or self.node_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_id.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "node-id" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-id"):
                                self.node_id = value
                                self.node_id.value_namespace = name_space
                                self.node_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.node:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.node:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/cpu-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "node"):
                            for c in self.node:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.Statistics.CpuNode.Nodes.Node()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.node.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "node"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.node_all is not None and self.node_all.has_data()) or
                        (self.nodes is not None and self.nodes.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.node_all is not None and self.node_all.has_operation()) or
                        (self.nodes is not None and self.nodes.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "cpu-node" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "node-all"):
                        if (self.node_all is None):
                            self.node_all = PerfMgmt.Enable.Statistics.CpuNode.NodeAll()
                            self.node_all.parent = self
                            self._children_name_map["node_all"] = "node-all"
                        return self.node_all

                    if (child_yang_name == "nodes"):
                        if (self.nodes is None):
                            self.nodes = PerfMgmt.Enable.Statistics.CpuNode.Nodes()
                            self.nodes.parent = self
                            self._children_name_map["nodes"] = "nodes"
                        return self.nodes

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node-all" or name == "nodes"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class BasicCounterInterface(Entity):
                """
                Statistics collection for basic\-counters
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.BasicCounterInterface, self).__init__()

                    self.yang_name = "basic-counter-interface"
                    self.yang_parent_name = "statistics"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Statistics.BasicCounterInterface, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Statistics.BasicCounterInterface, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "basic-counter-interface" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class ProcessNode(Entity):
                """
                Collection for process
                
                .. attribute:: node_all
                
                	All the the nodes
                	**type**\:   :py:class:`NodeAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.ProcessNode.NodeAll>`
                
                .. attribute:: nodes
                
                	Node specification
                	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.ProcessNode.Nodes>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.ProcessNode, self).__init__()

                    self.yang_name = "process-node"
                    self.yang_parent_name = "statistics"

                    self.node_all = PerfMgmt.Enable.Statistics.ProcessNode.NodeAll()
                    self.node_all.parent = self
                    self._children_name_map["node_all"] = "node-all"
                    self._children_yang_names.add("node-all")

                    self.nodes = PerfMgmt.Enable.Statistics.ProcessNode.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                    self._children_yang_names.add("nodes")


                class NodeAll(Entity):
                    """
                    All the the nodes
                    
                    .. attribute:: template_name
                    
                    	Template name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Statistics.ProcessNode.NodeAll, self).__init__()

                        self.yang_name = "node-all"
                        self.yang_parent_name = "process-node"

                        self.template_name = YLeaf(YType.str, "template-name")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Statistics.ProcessNode.NodeAll, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Statistics.ProcessNode.NodeAll, self).__setattr__(name, value)

                    def has_data(self):
                        return self.template_name.is_set

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "node-all" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/process-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix


                class Nodes(Entity):
                    """
                    Node specification
                    
                    .. attribute:: node
                    
                    	Node instance
                    	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.ProcessNode.Nodes.Node>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Statistics.ProcessNode.Nodes, self).__init__()

                        self.yang_name = "nodes"
                        self.yang_parent_name = "process-node"

                        self.node = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Statistics.ProcessNode.Nodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Statistics.ProcessNode.Nodes, self).__setattr__(name, value)


                    class Node(Entity):
                        """
                        Node instance
                        
                        .. attribute:: node_id  <key>
                        
                        	Node ID
                        	**type**\:  str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.Statistics.ProcessNode.Nodes.Node, self).__init__()

                            self.yang_name = "node"
                            self.yang_parent_name = "nodes"

                            self.node_id = YLeaf(YType.str, "node-id")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_id",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.Statistics.ProcessNode.Nodes.Node, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.Statistics.ProcessNode.Nodes.Node, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.node_id.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_id.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "node" + "[node-id='" + self.node_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/process-node/nodes/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_id.is_set or self.node_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_id.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "node-id" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-id"):
                                self.node_id = value
                                self.node_id.value_namespace = name_space
                                self.node_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.node:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.node:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/process-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "node"):
                            for c in self.node:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.Statistics.ProcessNode.Nodes.Node()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.node.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "node"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.node_all is not None and self.node_all.has_data()) or
                        (self.nodes is not None and self.nodes.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.node_all is not None and self.node_all.has_operation()) or
                        (self.nodes is not None and self.nodes.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "process-node" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "node-all"):
                        if (self.node_all is None):
                            self.node_all = PerfMgmt.Enable.Statistics.ProcessNode.NodeAll()
                            self.node_all.parent = self
                            self._children_name_map["node_all"] = "node-all"
                        return self.node_all

                    if (child_yang_name == "nodes"):
                        if (self.nodes is None):
                            self.nodes = PerfMgmt.Enable.Statistics.ProcessNode.Nodes()
                            self.nodes.parent = self
                            self._children_name_map["nodes"] = "nodes"
                        return self.nodes

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node-all" or name == "nodes"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class DataRateInterface(Entity):
                """
                Statistics collection for generic\-counters
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.DataRateInterface, self).__init__()

                    self.yang_name = "data-rate-interface"
                    self.yang_parent_name = "statistics"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Statistics.DataRateInterface, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Statistics.DataRateInterface, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "data-rate-interface" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix


            class MemoryNode(Entity):
                """
                Collection for memory
                
                .. attribute:: node_all
                
                	All the the nodes
                	**type**\:   :py:class:`NodeAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.MemoryNode.NodeAll>`
                
                .. attribute:: nodes
                
                	Node specification
                	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.MemoryNode.Nodes>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.MemoryNode, self).__init__()

                    self.yang_name = "memory-node"
                    self.yang_parent_name = "statistics"

                    self.node_all = PerfMgmt.Enable.Statistics.MemoryNode.NodeAll()
                    self.node_all.parent = self
                    self._children_name_map["node_all"] = "node-all"
                    self._children_yang_names.add("node-all")

                    self.nodes = PerfMgmt.Enable.Statistics.MemoryNode.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                    self._children_yang_names.add("nodes")


                class NodeAll(Entity):
                    """
                    All the the nodes
                    
                    .. attribute:: template_name
                    
                    	Template name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Statistics.MemoryNode.NodeAll, self).__init__()

                        self.yang_name = "node-all"
                        self.yang_parent_name = "memory-node"

                        self.template_name = YLeaf(YType.str, "template-name")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Statistics.MemoryNode.NodeAll, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Statistics.MemoryNode.NodeAll, self).__setattr__(name, value)

                    def has_data(self):
                        return self.template_name.is_set

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "node-all" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/memory-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "template-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix


                class Nodes(Entity):
                    """
                    Node specification
                    
                    .. attribute:: node
                    
                    	Node instance
                    	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.Statistics.MemoryNode.Nodes.Node>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.Statistics.MemoryNode.Nodes, self).__init__()

                        self.yang_name = "nodes"
                        self.yang_parent_name = "memory-node"

                        self.node = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.Statistics.MemoryNode.Nodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.Statistics.MemoryNode.Nodes, self).__setattr__(name, value)


                    class Node(Entity):
                        """
                        Node instance
                        
                        .. attribute:: node_id  <key>
                        
                        	Node ID
                        	**type**\:  str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.Statistics.MemoryNode.Nodes.Node, self).__init__()

                            self.yang_name = "node"
                            self.yang_parent_name = "nodes"

                            self.node_id = YLeaf(YType.str, "node-id")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_id",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.Statistics.MemoryNode.Nodes.Node, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.Statistics.MemoryNode.Nodes.Node, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.node_id.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_id.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "node" + "[node-id='" + self.node_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/memory-node/nodes/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_id.is_set or self.node_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_id.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "node-id" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-id"):
                                self.node_id = value
                                self.node_id.value_namespace = name_space
                                self.node_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.node:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.node:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/memory-node/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "node"):
                            for c in self.node:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.Statistics.MemoryNode.Nodes.Node()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.node.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "node"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.node_all is not None and self.node_all.has_data()) or
                        (self.nodes is not None and self.nodes.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.node_all is not None and self.node_all.has_operation()) or
                        (self.nodes is not None and self.nodes.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "memory-node" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "node-all"):
                        if (self.node_all is None):
                            self.node_all = PerfMgmt.Enable.Statistics.MemoryNode.NodeAll()
                            self.node_all.parent = self
                            self._children_name_map["node_all"] = "node-all"
                        return self.node_all

                    if (child_yang_name == "nodes"):
                        if (self.nodes is None):
                            self.nodes = PerfMgmt.Enable.Statistics.MemoryNode.Nodes()
                            self.nodes.parent = self
                            self._children_name_map["nodes"] = "nodes"
                        return self.nodes

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node-all" or name == "nodes"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class LdpMpls(Entity):
                """
                Collection for labels distribution protocol
                
                .. attribute:: template_name
                
                	Template name
                	**type**\:  str
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.Statistics.LdpMpls, self).__init__()

                    self.yang_name = "ldp-mpls"
                    self.yang_parent_name = "statistics"

                    self.template_name = YLeaf(YType.str, "template-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("template_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Enable.Statistics.LdpMpls, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Enable.Statistics.LdpMpls, self).__setattr__(name, value)

                def has_data(self):
                    return self.template_name.is_set

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.template_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ldp-mpls" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.template_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "template-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "template-name"):
                        self.template_name = value
                        self.template_name.value_namespace = name_space
                        self.template_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                return (
                    (self.basic_counter_interface is not None and self.basic_counter_interface.has_data()) or
                    (self.bgp is not None and self.bgp.has_data()) or
                    (self.cpu_node is not None and self.cpu_node.has_data()) or
                    (self.data_rate_interface is not None and self.data_rate_interface.has_data()) or
                    (self.generic_counter_interface is not None and self.generic_counter_interface.has_data()) or
                    (self.ldp_mpls is not None and self.ldp_mpls.has_data()) or
                    (self.memory_node is not None and self.memory_node.has_data()) or
                    (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_data()) or
                    (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_data()) or
                    (self.process_node is not None and self.process_node.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.basic_counter_interface is not None and self.basic_counter_interface.has_operation()) or
                    (self.bgp is not None and self.bgp.has_operation()) or
                    (self.cpu_node is not None and self.cpu_node.has_operation()) or
                    (self.data_rate_interface is not None and self.data_rate_interface.has_operation()) or
                    (self.generic_counter_interface is not None and self.generic_counter_interface.has_operation()) or
                    (self.ldp_mpls is not None and self.ldp_mpls.has_operation()) or
                    (self.memory_node is not None and self.memory_node.has_operation()) or
                    (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_operation()) or
                    (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_operation()) or
                    (self.process_node is not None and self.process_node.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "statistics" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "basic-counter-interface"):
                    if (self.basic_counter_interface is None):
                        self.basic_counter_interface = PerfMgmt.Enable.Statistics.BasicCounterInterface()
                        self.basic_counter_interface.parent = self
                        self._children_name_map["basic_counter_interface"] = "basic-counter-interface"
                    return self.basic_counter_interface

                if (child_yang_name == "bgp"):
                    if (self.bgp is None):
                        self.bgp = PerfMgmt.Enable.Statistics.Bgp()
                        self.bgp.parent = self
                        self._children_name_map["bgp"] = "bgp"
                    return self.bgp

                if (child_yang_name == "cpu-node"):
                    if (self.cpu_node is None):
                        self.cpu_node = PerfMgmt.Enable.Statistics.CpuNode()
                        self.cpu_node.parent = self
                        self._children_name_map["cpu_node"] = "cpu-node"
                    return self.cpu_node

                if (child_yang_name == "data-rate-interface"):
                    if (self.data_rate_interface is None):
                        self.data_rate_interface = PerfMgmt.Enable.Statistics.DataRateInterface()
                        self.data_rate_interface.parent = self
                        self._children_name_map["data_rate_interface"] = "data-rate-interface"
                    return self.data_rate_interface

                if (child_yang_name == "generic-counter-interface"):
                    if (self.generic_counter_interface is None):
                        self.generic_counter_interface = PerfMgmt.Enable.Statistics.GenericCounterInterface()
                        self.generic_counter_interface.parent = self
                        self._children_name_map["generic_counter_interface"] = "generic-counter-interface"
                    return self.generic_counter_interface

                if (child_yang_name == "ldp-mpls"):
                    if (self.ldp_mpls is None):
                        self.ldp_mpls = PerfMgmt.Enable.Statistics.LdpMpls()
                        self.ldp_mpls.parent = self
                        self._children_name_map["ldp_mpls"] = "ldp-mpls"
                    return self.ldp_mpls

                if (child_yang_name == "memory-node"):
                    if (self.memory_node is None):
                        self.memory_node = PerfMgmt.Enable.Statistics.MemoryNode()
                        self.memory_node.parent = self
                        self._children_name_map["memory_node"] = "memory-node"
                    return self.memory_node

                if (child_yang_name == "ospfv2-protocol"):
                    if (self.ospfv2_protocol is None):
                        self.ospfv2_protocol = PerfMgmt.Enable.Statistics.Ospfv2Protocol()
                        self.ospfv2_protocol.parent = self
                        self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
                    return self.ospfv2_protocol

                if (child_yang_name == "ospfv3-protocol"):
                    if (self.ospfv3_protocol is None):
                        self.ospfv3_protocol = PerfMgmt.Enable.Statistics.Ospfv3Protocol()
                        self.ospfv3_protocol.parent = self
                        self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
                    return self.ospfv3_protocol

                if (child_yang_name == "process-node"):
                    if (self.process_node is None):
                        self.process_node = PerfMgmt.Enable.Statistics.ProcessNode()
                        self.process_node.parent = self
                        self._children_name_map["process_node"] = "process-node"
                    return self.process_node

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "basic-counter-interface" or name == "bgp" or name == "cpu-node" or name == "data-rate-interface" or name == "generic-counter-interface" or name == "ldp-mpls" or name == "memory-node" or name == "ospfv2-protocol" or name == "ospfv3-protocol" or name == "process-node"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class MonitorEnable(Entity):
            """
            Start data collection for a monitored instance
            
            .. attribute:: basic_counters
            
            	Monitoring for basic\-counters
            	**type**\:   :py:class:`BasicCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.BasicCounters>`
            
            .. attribute:: bgp
            
            	Monitor BGP protocol
            	**type**\:   :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Bgp>`
            
            .. attribute:: cpu
            
            	Collection for CPU
            	**type**\:   :py:class:`Cpu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Cpu>`
            
            .. attribute:: data_rates
            
            	Monitoring for data\-rates
            	**type**\:   :py:class:`DataRates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.DataRates>`
            
            .. attribute:: generic_counters
            
            	Monitoring for generic\-counters
            	**type**\:   :py:class:`GenericCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.GenericCounters>`
            
            .. attribute:: ldp_mpls
            
            	Monitoring for LDP
            	**type**\:   :py:class:`LdpMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.LdpMpls>`
            
            .. attribute:: memory
            
            	Collection for memory
            	**type**\:   :py:class:`Memory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Memory>`
            
            .. attribute:: ospfv2_protocol
            
            	Monitor OSPF v2 Protocol
            	**type**\:   :py:class:`Ospfv2Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol>`
            
            .. attribute:: ospfv3_protocol
            
            	Monitor OSPF v3 Protocol
            	**type**\:   :py:class:`Ospfv3Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol>`
            
            .. attribute:: process
            
            	Collection for a single process
            	**type**\:   :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Process>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Enable.MonitorEnable, self).__init__()

                self.yang_name = "monitor-enable"
                self.yang_parent_name = "enable"

                self.basic_counters = PerfMgmt.Enable.MonitorEnable.BasicCounters()
                self.basic_counters.parent = self
                self._children_name_map["basic_counters"] = "basic-counters"
                self._children_yang_names.add("basic-counters")

                self.bgp = PerfMgmt.Enable.MonitorEnable.Bgp()
                self.bgp.parent = self
                self._children_name_map["bgp"] = "bgp"
                self._children_yang_names.add("bgp")

                self.cpu = PerfMgmt.Enable.MonitorEnable.Cpu()
                self.cpu.parent = self
                self._children_name_map["cpu"] = "cpu"
                self._children_yang_names.add("cpu")

                self.data_rates = PerfMgmt.Enable.MonitorEnable.DataRates()
                self.data_rates.parent = self
                self._children_name_map["data_rates"] = "data-rates"
                self._children_yang_names.add("data-rates")

                self.generic_counters = PerfMgmt.Enable.MonitorEnable.GenericCounters()
                self.generic_counters.parent = self
                self._children_name_map["generic_counters"] = "generic-counters"
                self._children_yang_names.add("generic-counters")

                self.ldp_mpls = PerfMgmt.Enable.MonitorEnable.LdpMpls()
                self.ldp_mpls.parent = self
                self._children_name_map["ldp_mpls"] = "ldp-mpls"
                self._children_yang_names.add("ldp-mpls")

                self.memory = PerfMgmt.Enable.MonitorEnable.Memory()
                self.memory.parent = self
                self._children_name_map["memory"] = "memory"
                self._children_yang_names.add("memory")

                self.ospfv2_protocol = PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol()
                self.ospfv2_protocol.parent = self
                self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
                self._children_yang_names.add("ospfv2-protocol")

                self.ospfv3_protocol = PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol()
                self.ospfv3_protocol.parent = self
                self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
                self._children_yang_names.add("ospfv3-protocol")

                self.process = PerfMgmt.Enable.MonitorEnable.Process()
                self.process.parent = self
                self._children_name_map["process"] = "process"
                self._children_yang_names.add("process")


            class LdpMpls(Entity):
                """
                Monitoring for LDP
                
                .. attribute:: sessions
                
                	LDP session specification
                	**type**\:   :py:class:`Sessions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.LdpMpls, self).__init__()

                    self.yang_name = "ldp-mpls"
                    self.yang_parent_name = "monitor-enable"

                    self.sessions = PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions()
                    self.sessions.parent = self
                    self._children_name_map["sessions"] = "sessions"
                    self._children_yang_names.add("sessions")


                class Sessions(Entity):
                    """
                    LDP session specification
                    
                    .. attribute:: session
                    
                    	IP address of the LDP Session
                    	**type**\: list of    :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions.Session>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions, self).__init__()

                        self.yang_name = "sessions"
                        self.yang_parent_name = "ldp-mpls"

                        self.session = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions, self).__setattr__(name, value)


                    class Session(Entity):
                        """
                        IP address of the LDP Session
                        
                        .. attribute:: session  <key>
                        
                        	IP address of the LDP Session
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions.Session, self).__init__()

                            self.yang_name = "session"
                            self.yang_parent_name = "sessions"

                            self.session = YLeaf(YType.str, "session")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("session",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions.Session, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions.Session, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.session.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.session.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "session" + "[session='" + self.session.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ldp-mpls/sessions/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.session.is_set or self.session.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "session" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "session"):
                                self.session = value
                                self.session.value_namespace = name_space
                                self.session.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.session:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.session:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "sessions" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ldp-mpls/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "session"):
                            for c in self.session:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions.Session()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.session.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "session"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.sessions is not None and self.sessions.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.sessions is not None and self.sessions.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ldp-mpls" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "sessions"):
                        if (self.sessions is None):
                            self.sessions = PerfMgmt.Enable.MonitorEnable.LdpMpls.Sessions()
                            self.sessions.parent = self
                            self._children_name_map["sessions"] = "sessions"
                        return self.sessions

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "sessions"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Ospfv3Protocol(Entity):
                """
                Monitor OSPF v3 Protocol
                
                .. attribute:: ospf_instances
                
                	Monitor an instance
                	**type**\:   :py:class:`OspfInstances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol, self).__init__()

                    self.yang_name = "ospfv3-protocol"
                    self.yang_parent_name = "monitor-enable"

                    self.ospf_instances = PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances()
                    self.ospf_instances.parent = self
                    self._children_name_map["ospf_instances"] = "ospf-instances"
                    self._children_yang_names.add("ospf-instances")


                class OspfInstances(Entity):
                    """
                    Monitor an instance
                    
                    .. attribute:: ospf_instance
                    
                    	Instance being monitored
                    	**type**\: list of    :py:class:`OspfInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances.OspfInstance>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances, self).__init__()

                        self.yang_name = "ospf-instances"
                        self.yang_parent_name = "ospfv3-protocol"

                        self.ospf_instance = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances, self).__setattr__(name, value)


                    class OspfInstance(Entity):
                        """
                        Instance being monitored
                        
                        .. attribute:: instance_name  <key>
                        
                        	OSPF Instance Name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances.OspfInstance, self).__init__()

                            self.yang_name = "ospf-instance"
                            self.yang_parent_name = "ospf-instances"

                            self.instance_name = YLeaf(YType.str, "instance-name")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("instance_name",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances.OspfInstance, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances.OspfInstance, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.instance_name.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.instance_name.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ospf-instance" + "[instance-name='" + self.instance_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ospfv3-protocol/ospf-instances/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.instance_name.is_set or self.instance_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.instance_name.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "instance-name" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "instance-name"):
                                self.instance_name = value
                                self.instance_name.value_namespace = name_space
                                self.instance_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ospf_instance:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ospf_instance:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "ospf-instances" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ospfv3-protocol/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ospf-instance"):
                            for c in self.ospf_instance:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances.OspfInstance()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ospf_instance.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ospf-instance"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.ospf_instances is not None and self.ospf_instances.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.ospf_instances is not None and self.ospf_instances.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ospfv3-protocol" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "ospf-instances"):
                        if (self.ospf_instances is None):
                            self.ospf_instances = PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol.OspfInstances()
                            self.ospf_instances.parent = self
                            self._children_name_map["ospf_instances"] = "ospf-instances"
                        return self.ospf_instances

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "ospf-instances"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class GenericCounters(Entity):
                """
                Monitoring for generic\-counters
                
                .. attribute:: interfaces
                
                	Monitor an Interface
                	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.GenericCounters, self).__init__()

                    self.yang_name = "generic-counters"
                    self.yang_parent_name = "monitor-enable"

                    self.interfaces = PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")


                class Interfaces(Entity):
                    """
                    Monitor an Interface
                    
                    .. attribute:: interface
                    
                    	Interface being Monitored
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "generic-counters"

                        self.interface = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces, self).__setattr__(name, value)


                    class Interface(Entity):
                        """
                        Interface being Monitored
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface Name
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("interface_name",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces.Interface, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces.Interface, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.interface_name.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/generic-counters/interfaces/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "interface-name" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.interface:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.interface:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interfaces" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/generic-counters/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "interface"):
                            for c in self.interface:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces.Interface()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.interface.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "interface"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.interfaces is not None and self.interfaces.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.interfaces is not None and self.interfaces.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "generic-counters" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "interfaces"):
                        if (self.interfaces is None):
                            self.interfaces = PerfMgmt.Enable.MonitorEnable.GenericCounters.Interfaces()
                            self.interfaces.parent = self
                            self._children_name_map["interfaces"] = "interfaces"
                        return self.interfaces

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "interfaces"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Process(Entity):
                """
                Collection for a single process
                
                .. attribute:: process_nodes
                
                	Node specification
                	**type**\:   :py:class:`ProcessNodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.Process, self).__init__()

                    self.yang_name = "process"
                    self.yang_parent_name = "monitor-enable"

                    self.process_nodes = PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes()
                    self.process_nodes.parent = self
                    self._children_name_map["process_nodes"] = "process-nodes"
                    self._children_yang_names.add("process-nodes")


                class ProcessNodes(Entity):
                    """
                    Node specification
                    
                    .. attribute:: process_node
                    
                    	Node instance
                    	**type**\: list of    :py:class:`ProcessNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes, self).__init__()

                        self.yang_name = "process-nodes"
                        self.yang_parent_name = "process"

                        self.process_node = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes, self).__setattr__(name, value)


                    class ProcessNode(Entity):
                        """
                        Node instance
                        
                        .. attribute:: node_id  <key>
                        
                        	Node ID
                        	**type**\:  str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: pids
                        
                        	Process ID specification
                        	**type**\:   :py:class:`Pids <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids>`
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode, self).__init__()

                            self.yang_name = "process-node"
                            self.yang_parent_name = "process-nodes"

                            self.node_id = YLeaf(YType.str, "node-id")

                            self.pids = PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids()
                            self.pids.parent = self
                            self._children_name_map["pids"] = "pids"
                            self._children_yang_names.add("pids")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_id") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode, self).__setattr__(name, value)


                        class Pids(Entity):
                            """
                            Process ID specification
                            
                            .. attribute:: pid
                            
                            	Specify an existing template for data collection
                            	**type**\: list of    :py:class:`Pid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids.Pid>`
                            
                            

                            """

                            _prefix = 'manageability-perfmgmt-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids, self).__init__()

                                self.yang_name = "pids"
                                self.yang_parent_name = "process-node"

                                self.pid = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids, self).__setattr__(name, value)


                            class Pid(Entity):
                                """
                                Specify an existing template for data
                                collection
                                
                                .. attribute:: pid  <key>
                                
                                	Specify Process ID
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: template_name
                                
                                	Template name
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'manageability-perfmgmt-cfg'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids.Pid, self).__init__()

                                    self.yang_name = "pid"
                                    self.yang_parent_name = "pids"

                                    self.pid = YLeaf(YType.uint32, "pid")

                                    self.template_name = YLeaf(YType.str, "template-name")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("pid",
                                                    "template_name") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids.Pid, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids.Pid, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.pid.is_set or
                                        self.template_name.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.pid.yfilter != YFilter.not_set or
                                        self.template_name.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pid" + "[pid='" + self.pid.get() + "']" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.pid.is_set or self.pid.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.pid.get_name_leafdata())
                                    if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.template_name.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "pid" or name == "template-name"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "pid"):
                                        self.pid = value
                                        self.pid.value_namespace = name_space
                                        self.pid.value_namespace_prefix = name_space_prefix
                                    if(value_path == "template-name"):
                                        self.template_name = value
                                        self.template_name.value_namespace = name_space
                                        self.template_name.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.pid:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.pid:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "pids" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "pid"):
                                    for c in self.pid:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids.Pid()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.pid.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "pid"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.node_id.is_set or
                                (self.pids is not None and self.pids.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_id.yfilter != YFilter.not_set or
                                (self.pids is not None and self.pids.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "process-node" + "[node-id='" + self.node_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/process/process-nodes/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_id.is_set or self.node_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_id.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "pids"):
                                if (self.pids is None):
                                    self.pids = PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode.Pids()
                                    self.pids.parent = self
                                    self._children_name_map["pids"] = "pids"
                                return self.pids

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "pids" or name == "node-id"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-id"):
                                self.node_id = value
                                self.node_id.value_namespace = name_space
                                self.node_id.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.process_node:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.process_node:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "process-nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/process/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "process-node"):
                            for c in self.process_node:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes.ProcessNode()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.process_node.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "process-node"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.process_nodes is not None and self.process_nodes.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.process_nodes is not None and self.process_nodes.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "process" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "process-nodes"):
                        if (self.process_nodes is None):
                            self.process_nodes = PerfMgmt.Enable.MonitorEnable.Process.ProcessNodes()
                            self.process_nodes.parent = self
                            self._children_name_map["process_nodes"] = "process-nodes"
                        return self.process_nodes

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "process-nodes"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class BasicCounters(Entity):
                """
                Monitoring for basic\-counters
                
                .. attribute:: interfaces
                
                	Monitor an Interface
                	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.BasicCounters, self).__init__()

                    self.yang_name = "basic-counters"
                    self.yang_parent_name = "monitor-enable"

                    self.interfaces = PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")


                class Interfaces(Entity):
                    """
                    Monitor an Interface
                    
                    .. attribute:: interface
                    
                    	Interface being Monitored
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "basic-counters"

                        self.interface = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces, self).__setattr__(name, value)


                    class Interface(Entity):
                        """
                        Interface being Monitored
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface Name
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("interface_name",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces.Interface, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces.Interface, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.interface_name.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/basic-counters/interfaces/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "interface-name" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.interface:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.interface:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interfaces" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/basic-counters/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "interface"):
                            for c in self.interface:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces.Interface()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.interface.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "interface"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.interfaces is not None and self.interfaces.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.interfaces is not None and self.interfaces.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "basic-counters" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "interfaces"):
                        if (self.interfaces is None):
                            self.interfaces = PerfMgmt.Enable.MonitorEnable.BasicCounters.Interfaces()
                            self.interfaces.parent = self
                            self._children_name_map["interfaces"] = "interfaces"
                        return self.interfaces

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "interfaces"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Memory(Entity):
                """
                Collection for memory
                
                .. attribute:: nodes
                
                	Node specification
                	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Memory.Nodes>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.Memory, self).__init__()

                    self.yang_name = "memory"
                    self.yang_parent_name = "monitor-enable"

                    self.nodes = PerfMgmt.Enable.MonitorEnable.Memory.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                    self._children_yang_names.add("nodes")


                class Nodes(Entity):
                    """
                    Node specification
                    
                    .. attribute:: node
                    
                    	Node instance
                    	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Memory.Nodes.Node>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.Memory.Nodes, self).__init__()

                        self.yang_name = "nodes"
                        self.yang_parent_name = "memory"

                        self.node = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.Memory.Nodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.Memory.Nodes, self).__setattr__(name, value)


                    class Node(Entity):
                        """
                        Node instance
                        
                        .. attribute:: node_id  <key>
                        
                        	Node ID
                        	**type**\:  str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.Memory.Nodes.Node, self).__init__()

                            self.yang_name = "node"
                            self.yang_parent_name = "nodes"

                            self.node_id = YLeaf(YType.str, "node-id")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_id",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.Memory.Nodes.Node, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.Memory.Nodes.Node, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.node_id.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_id.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "node" + "[node-id='" + self.node_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/memory/nodes/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_id.is_set or self.node_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_id.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "node-id" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-id"):
                                self.node_id = value
                                self.node_id.value_namespace = name_space
                                self.node_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.node:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.node:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/memory/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "node"):
                            for c in self.node:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.Memory.Nodes.Node()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.node.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "node"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.nodes is not None and self.nodes.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.nodes is not None and self.nodes.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "memory" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "nodes"):
                        if (self.nodes is None):
                            self.nodes = PerfMgmt.Enable.MonitorEnable.Memory.Nodes()
                            self.nodes.parent = self
                            self._children_name_map["nodes"] = "nodes"
                        return self.nodes

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "nodes"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Ospfv2Protocol(Entity):
                """
                Monitor OSPF v2 Protocol
                
                .. attribute:: ospf_instances
                
                	Monitor an instance
                	**type**\:   :py:class:`OspfInstances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol, self).__init__()

                    self.yang_name = "ospfv2-protocol"
                    self.yang_parent_name = "monitor-enable"

                    self.ospf_instances = PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances()
                    self.ospf_instances.parent = self
                    self._children_name_map["ospf_instances"] = "ospf-instances"
                    self._children_yang_names.add("ospf-instances")


                class OspfInstances(Entity):
                    """
                    Monitor an instance
                    
                    .. attribute:: ospf_instance
                    
                    	Instance being monitored
                    	**type**\: list of    :py:class:`OspfInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances.OspfInstance>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances, self).__init__()

                        self.yang_name = "ospf-instances"
                        self.yang_parent_name = "ospfv2-protocol"

                        self.ospf_instance = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances, self).__setattr__(name, value)


                    class OspfInstance(Entity):
                        """
                        Instance being monitored
                        
                        .. attribute:: instance_name  <key>
                        
                        	OSPF Instance Name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances.OspfInstance, self).__init__()

                            self.yang_name = "ospf-instance"
                            self.yang_parent_name = "ospf-instances"

                            self.instance_name = YLeaf(YType.str, "instance-name")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("instance_name",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances.OspfInstance, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances.OspfInstance, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.instance_name.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.instance_name.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ospf-instance" + "[instance-name='" + self.instance_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ospfv2-protocol/ospf-instances/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.instance_name.is_set or self.instance_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.instance_name.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "instance-name" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "instance-name"):
                                self.instance_name = value
                                self.instance_name.value_namespace = name_space
                                self.instance_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ospf_instance:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ospf_instance:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "ospf-instances" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ospfv2-protocol/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ospf-instance"):
                            for c in self.ospf_instance:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances.OspfInstance()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ospf_instance.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ospf-instance"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.ospf_instances is not None and self.ospf_instances.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.ospf_instances is not None and self.ospf_instances.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ospfv2-protocol" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "ospf-instances"):
                        if (self.ospf_instances is None):
                            self.ospf_instances = PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol.OspfInstances()
                            self.ospf_instances.parent = self
                            self._children_name_map["ospf_instances"] = "ospf-instances"
                        return self.ospf_instances

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "ospf-instances"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Cpu(Entity):
                """
                Collection for CPU
                
                .. attribute:: nodes
                
                	Node specification
                	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Cpu.Nodes>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.Cpu, self).__init__()

                    self.yang_name = "cpu"
                    self.yang_parent_name = "monitor-enable"

                    self.nodes = PerfMgmt.Enable.MonitorEnable.Cpu.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                    self._children_yang_names.add("nodes")


                class Nodes(Entity):
                    """
                    Node specification
                    
                    .. attribute:: node
                    
                    	Node instance
                    	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Cpu.Nodes.Node>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.Cpu.Nodes, self).__init__()

                        self.yang_name = "nodes"
                        self.yang_parent_name = "cpu"

                        self.node = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.Cpu.Nodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.Cpu.Nodes, self).__setattr__(name, value)


                    class Node(Entity):
                        """
                        Node instance
                        
                        .. attribute:: node_id  <key>
                        
                        	Node ID
                        	**type**\:  str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.Cpu.Nodes.Node, self).__init__()

                            self.yang_name = "node"
                            self.yang_parent_name = "nodes"

                            self.node_id = YLeaf(YType.str, "node-id")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_id",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.Cpu.Nodes.Node, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.Cpu.Nodes.Node, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.node_id.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_id.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "node" + "[node-id='" + self.node_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/cpu/nodes/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_id.is_set or self.node_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_id.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "node-id" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-id"):
                                self.node_id = value
                                self.node_id.value_namespace = name_space
                                self.node_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.node:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.node:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/cpu/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "node"):
                            for c in self.node:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.Cpu.Nodes.Node()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.node.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "node"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.nodes is not None and self.nodes.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.nodes is not None and self.nodes.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "cpu" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "nodes"):
                        if (self.nodes is None):
                            self.nodes = PerfMgmt.Enable.MonitorEnable.Cpu.Nodes()
                            self.nodes.parent = self
                            self._children_name_map["nodes"] = "nodes"
                        return self.nodes

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "nodes"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Bgp(Entity):
                """
                Monitor BGP protocol
                
                .. attribute:: neighbors
                
                	Monitor BGP protocol for a BGP peer
                	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.Bgp, self).__init__()

                    self.yang_name = "bgp"
                    self.yang_parent_name = "monitor-enable"

                    self.neighbors = PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors()
                    self.neighbors.parent = self
                    self._children_name_map["neighbors"] = "neighbors"
                    self._children_yang_names.add("neighbors")


                class Neighbors(Entity):
                    """
                    Monitor BGP protocol for a BGP peer
                    
                    .. attribute:: neighbor
                    
                    	Neighbor being monitored
                    	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors.Neighbor>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors, self).__init__()

                        self.yang_name = "neighbors"
                        self.yang_parent_name = "bgp"

                        self.neighbor = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors, self).__setattr__(name, value)


                    class Neighbor(Entity):
                        """
                        Neighbor being monitored
                        
                        .. attribute:: peer_address  <key>
                        
                        	IP address of the Neighbor
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors.Neighbor, self).__init__()

                            self.yang_name = "neighbor"
                            self.yang_parent_name = "neighbors"

                            self.peer_address = YLeaf(YType.str, "peer-address")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("peer_address",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors.Neighbor, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors.Neighbor, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.peer_address.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.peer_address.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "neighbor" + "[peer-address='" + self.peer_address.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/bgp/neighbors/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.peer_address.is_set or self.peer_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.peer_address.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "peer-address" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "peer-address"):
                                self.peer_address = value
                                self.peer_address.value_namespace = name_space
                                self.peer_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.neighbor:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.neighbor:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "neighbors" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/bgp/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "neighbor"):
                            for c in self.neighbor:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors.Neighbor()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.neighbor.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "neighbor"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.neighbors is not None and self.neighbors.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.neighbors is not None and self.neighbors.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "bgp" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "neighbors"):
                        if (self.neighbors is None):
                            self.neighbors = PerfMgmt.Enable.MonitorEnable.Bgp.Neighbors()
                            self.neighbors.parent = self
                            self._children_name_map["neighbors"] = "neighbors"
                        return self.neighbors

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "neighbors"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class DataRates(Entity):
                """
                Monitoring for data\-rates
                
                .. attribute:: interfaces
                
                	Monitor an Interface
                	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Enable.MonitorEnable.DataRates, self).__init__()

                    self.yang_name = "data-rates"
                    self.yang_parent_name = "monitor-enable"

                    self.interfaces = PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")


                class Interfaces(Entity):
                    """
                    Monitor an Interface
                    
                    .. attribute:: interface
                    
                    	Interface being Monitored
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "data-rates"

                        self.interface = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces, self).__setattr__(name, value)


                    class Interface(Entity):
                        """
                        Interface being Monitored
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface Name
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: template_name
                        
                        	Template name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.template_name = YLeaf(YType.str, "template-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("interface_name",
                                            "template_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces.Interface, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces.Interface, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.interface_name.is_set or
                                self.template_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                self.template_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/data-rates/interfaces/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                            if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.template_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "interface-name" or name == "template-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "template-name"):
                                self.template_name = value
                                self.template_name.value_namespace = name_space
                                self.template_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.interface:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.interface:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interfaces" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/data-rates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "interface"):
                            for c in self.interface:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces.Interface()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.interface.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "interface"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (self.interfaces is not None and self.interfaces.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.interfaces is not None and self.interfaces.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "data-rates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "interfaces"):
                        if (self.interfaces is None):
                            self.interfaces = PerfMgmt.Enable.MonitorEnable.DataRates.Interfaces()
                            self.interfaces.parent = self
                            self._children_name_map["interfaces"] = "interfaces"
                        return self.interfaces

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "interfaces"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    (self.basic_counters is not None and self.basic_counters.has_data()) or
                    (self.bgp is not None and self.bgp.has_data()) or
                    (self.cpu is not None and self.cpu.has_data()) or
                    (self.data_rates is not None and self.data_rates.has_data()) or
                    (self.generic_counters is not None and self.generic_counters.has_data()) or
                    (self.ldp_mpls is not None and self.ldp_mpls.has_data()) or
                    (self.memory is not None and self.memory.has_data()) or
                    (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_data()) or
                    (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_data()) or
                    (self.process is not None and self.process.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.basic_counters is not None and self.basic_counters.has_operation()) or
                    (self.bgp is not None and self.bgp.has_operation()) or
                    (self.cpu is not None and self.cpu.has_operation()) or
                    (self.data_rates is not None and self.data_rates.has_operation()) or
                    (self.generic_counters is not None and self.generic_counters.has_operation()) or
                    (self.ldp_mpls is not None and self.ldp_mpls.has_operation()) or
                    (self.memory is not None and self.memory.has_operation()) or
                    (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_operation()) or
                    (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_operation()) or
                    (self.process is not None and self.process.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "monitor-enable" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "basic-counters"):
                    if (self.basic_counters is None):
                        self.basic_counters = PerfMgmt.Enable.MonitorEnable.BasicCounters()
                        self.basic_counters.parent = self
                        self._children_name_map["basic_counters"] = "basic-counters"
                    return self.basic_counters

                if (child_yang_name == "bgp"):
                    if (self.bgp is None):
                        self.bgp = PerfMgmt.Enable.MonitorEnable.Bgp()
                        self.bgp.parent = self
                        self._children_name_map["bgp"] = "bgp"
                    return self.bgp

                if (child_yang_name == "cpu"):
                    if (self.cpu is None):
                        self.cpu = PerfMgmt.Enable.MonitorEnable.Cpu()
                        self.cpu.parent = self
                        self._children_name_map["cpu"] = "cpu"
                    return self.cpu

                if (child_yang_name == "data-rates"):
                    if (self.data_rates is None):
                        self.data_rates = PerfMgmt.Enable.MonitorEnable.DataRates()
                        self.data_rates.parent = self
                        self._children_name_map["data_rates"] = "data-rates"
                    return self.data_rates

                if (child_yang_name == "generic-counters"):
                    if (self.generic_counters is None):
                        self.generic_counters = PerfMgmt.Enable.MonitorEnable.GenericCounters()
                        self.generic_counters.parent = self
                        self._children_name_map["generic_counters"] = "generic-counters"
                    return self.generic_counters

                if (child_yang_name == "ldp-mpls"):
                    if (self.ldp_mpls is None):
                        self.ldp_mpls = PerfMgmt.Enable.MonitorEnable.LdpMpls()
                        self.ldp_mpls.parent = self
                        self._children_name_map["ldp_mpls"] = "ldp-mpls"
                    return self.ldp_mpls

                if (child_yang_name == "memory"):
                    if (self.memory is None):
                        self.memory = PerfMgmt.Enable.MonitorEnable.Memory()
                        self.memory.parent = self
                        self._children_name_map["memory"] = "memory"
                    return self.memory

                if (child_yang_name == "ospfv2-protocol"):
                    if (self.ospfv2_protocol is None):
                        self.ospfv2_protocol = PerfMgmt.Enable.MonitorEnable.Ospfv2Protocol()
                        self.ospfv2_protocol.parent = self
                        self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
                    return self.ospfv2_protocol

                if (child_yang_name == "ospfv3-protocol"):
                    if (self.ospfv3_protocol is None):
                        self.ospfv3_protocol = PerfMgmt.Enable.MonitorEnable.Ospfv3Protocol()
                        self.ospfv3_protocol.parent = self
                        self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
                    return self.ospfv3_protocol

                if (child_yang_name == "process"):
                    if (self.process is None):
                        self.process = PerfMgmt.Enable.MonitorEnable.Process()
                        self.process.parent = self
                        self._children_name_map["process"] = "process"
                    return self.process

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "basic-counters" or name == "bgp" or name == "cpu" or name == "data-rates" or name == "generic-counters" or name == "ldp-mpls" or name == "memory" or name == "ospfv2-protocol" or name == "ospfv3-protocol" or name == "process"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (
                (self.monitor_enable is not None and self.monitor_enable.has_data()) or
                (self.statistics is not None and self.statistics.has_data()) or
                (self.threshold is not None and self.threshold.has_data()))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.monitor_enable is not None and self.monitor_enable.has_operation()) or
                (self.statistics is not None and self.statistics.has_operation()) or
                (self.threshold is not None and self.threshold.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "enable" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "monitor-enable"):
                if (self.monitor_enable is None):
                    self.monitor_enable = PerfMgmt.Enable.MonitorEnable()
                    self.monitor_enable.parent = self
                    self._children_name_map["monitor_enable"] = "monitor-enable"
                return self.monitor_enable

            if (child_yang_name == "statistics"):
                if (self.statistics is None):
                    self.statistics = PerfMgmt.Enable.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                return self.statistics

            if (child_yang_name == "threshold"):
                if (self.threshold is None):
                    self.threshold = PerfMgmt.Enable.Threshold()
                    self.threshold.parent = self
                    self._children_name_map["threshold"] = "threshold"
                return self.threshold

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "monitor-enable" or name == "statistics" or name == "threshold"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class RegExpGroups(Entity):
        """
        Configure regular expression group
        
        .. attribute:: reg_exp_group
        
        	Specify regular expression group name
        	**type**\: list of    :py:class:`RegExpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.RegExpGroups.RegExpGroup>`
        
        

        """

        _prefix = 'manageability-perfmgmt-cfg'
        _revision = '2015-11-09'

        def __init__(self):
            super(PerfMgmt.RegExpGroups, self).__init__()

            self.yang_name = "reg-exp-groups"
            self.yang_parent_name = "perf-mgmt"

            self.reg_exp_group = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(PerfMgmt.RegExpGroups, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(PerfMgmt.RegExpGroups, self).__setattr__(name, value)


        class RegExpGroup(Entity):
            """
            Specify regular expression group name
            
            .. attribute:: reg_exp_group_name  <key>
            
            	Regular expression group name
            	**type**\:  str
            
            	**length:** 1..32
            
            .. attribute:: reg_exps
            
            	Configure regular expression
            	**type**\:   :py:class:`RegExps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.RegExpGroups.RegExpGroup.RegExps>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.RegExpGroups.RegExpGroup, self).__init__()

                self.yang_name = "reg-exp-group"
                self.yang_parent_name = "reg-exp-groups"

                self.reg_exp_group_name = YLeaf(YType.str, "reg-exp-group-name")

                self.reg_exps = PerfMgmt.RegExpGroups.RegExpGroup.RegExps()
                self.reg_exps.parent = self
                self._children_name_map["reg_exps"] = "reg-exps"
                self._children_yang_names.add("reg-exps")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("reg_exp_group_name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(PerfMgmt.RegExpGroups.RegExpGroup, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(PerfMgmt.RegExpGroups.RegExpGroup, self).__setattr__(name, value)


            class RegExps(Entity):
                """
                Configure regular expression
                
                .. attribute:: reg_exp
                
                	Specify regular expression index number
                	**type**\: list of    :py:class:`RegExp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.RegExpGroups.RegExpGroup.RegExps.RegExp>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.RegExpGroups.RegExpGroup.RegExps, self).__init__()

                    self.yang_name = "reg-exps"
                    self.yang_parent_name = "reg-exp-group"

                    self.reg_exp = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.RegExpGroups.RegExpGroup.RegExps, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.RegExpGroups.RegExpGroup.RegExps, self).__setattr__(name, value)


                class RegExp(Entity):
                    """
                    Specify regular expression index number
                    
                    .. attribute:: reg_exp_index  <key>
                    
                    	Regular expression index number
                    	**type**\:  int
                    
                    	**range:** 1..100
                    
                    .. attribute:: reg_exp_string
                    
                    	Regular expression string to match
                    	**type**\:  str
                    
                    	**length:** 1..128
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.RegExpGroups.RegExpGroup.RegExps.RegExp, self).__init__()

                        self.yang_name = "reg-exp"
                        self.yang_parent_name = "reg-exps"

                        self.reg_exp_index = YLeaf(YType.uint32, "reg-exp-index")

                        self.reg_exp_string = YLeaf(YType.str, "reg-exp-string")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("reg_exp_index",
                                        "reg_exp_string") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.RegExpGroups.RegExpGroup.RegExps.RegExp, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.RegExpGroups.RegExpGroup.RegExps.RegExp, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.reg_exp_index.is_set or
                            self.reg_exp_string.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.reg_exp_index.yfilter != YFilter.not_set or
                            self.reg_exp_string.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "reg-exp" + "[reg-exp-index='" + self.reg_exp_index.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.reg_exp_index.is_set or self.reg_exp_index.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_index.get_name_leafdata())
                        if (self.reg_exp_string.is_set or self.reg_exp_string.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_string.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "reg-exp-index" or name == "reg-exp-string"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "reg-exp-index"):
                            self.reg_exp_index = value
                            self.reg_exp_index.value_namespace = name_space
                            self.reg_exp_index.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-string"):
                            self.reg_exp_string = value
                            self.reg_exp_string.value_namespace = name_space
                            self.reg_exp_string.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.reg_exp:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.reg_exp:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "reg-exps" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "reg-exp"):
                        for c in self.reg_exp:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.RegExpGroups.RegExpGroup.RegExps.RegExp()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.reg_exp.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "reg-exp"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.reg_exp_group_name.is_set or
                    (self.reg_exps is not None and self.reg_exps.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.reg_exp_group_name.yfilter != YFilter.not_set or
                    (self.reg_exps is not None and self.reg_exps.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "reg-exp-group" + "[reg-exp-group-name='" + self.reg_exp_group_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/reg-exp-groups/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.reg_exp_group_name.is_set or self.reg_exp_group_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.reg_exp_group_name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "reg-exps"):
                    if (self.reg_exps is None):
                        self.reg_exps = PerfMgmt.RegExpGroups.RegExpGroup.RegExps()
                        self.reg_exps.parent = self
                        self._children_name_map["reg_exps"] = "reg-exps"
                    return self.reg_exps

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "reg-exps" or name == "reg-exp-group-name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "reg-exp-group-name"):
                    self.reg_exp_group_name = value
                    self.reg_exp_group_name.value_namespace = name_space
                    self.reg_exp_group_name.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.reg_exp_group:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.reg_exp_group:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "reg-exp-groups" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "reg-exp-group"):
                for c in self.reg_exp_group:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = PerfMgmt.RegExpGroups.RegExpGroup()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.reg_exp_group.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "reg-exp-group"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class Threshold(Entity):
        """
        Container for threshold templates
        
        .. attribute:: basic_counter_interface
        
        	Interface Basic Counter threshold configuration
        	**type**\:   :py:class:`BasicCounterInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface>`
        
        .. attribute:: bgp
        
        	BGP threshold configuration
        	**type**\:   :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp>`
        
        .. attribute:: cpu_node
        
        	Node CPU threshold configuration
        	**type**\:   :py:class:`CpuNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.CpuNode>`
        
        .. attribute:: data_rate_interface
        
        	Interface Data Rates threshold configuration
        	**type**\:   :py:class:`DataRateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface>`
        
        .. attribute:: generic_counter_interface
        
        	Interface Generic Counter threshold configuration
        	**type**\:   :py:class:`GenericCounterInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface>`
        
        .. attribute:: ldp_mpls
        
        	MPLS LDP threshold configuration
        	**type**\:   :py:class:`LdpMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls>`
        
        .. attribute:: memory_node
        
        	Node Memory threshold configuration
        	**type**\:   :py:class:`MemoryNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.MemoryNode>`
        
        .. attribute:: ospfv2_protocol
        
        	OSPF v2 Protocol threshold configuration
        	**type**\:   :py:class:`Ospfv2Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol>`
        
        .. attribute:: ospfv3_protocol
        
        	OSPF v2 Protocol threshold configuration
        	**type**\:   :py:class:`Ospfv3Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol>`
        
        .. attribute:: process_node
        
        	Node Process threshold configuration
        	**type**\:   :py:class:`ProcessNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.ProcessNode>`
        
        

        """

        _prefix = 'manageability-perfmgmt-cfg'
        _revision = '2015-11-09'

        def __init__(self):
            super(PerfMgmt.Threshold, self).__init__()

            self.yang_name = "threshold"
            self.yang_parent_name = "perf-mgmt"

            self.basic_counter_interface = PerfMgmt.Threshold.BasicCounterInterface()
            self.basic_counter_interface.parent = self
            self._children_name_map["basic_counter_interface"] = "basic-counter-interface"
            self._children_yang_names.add("basic-counter-interface")

            self.bgp = PerfMgmt.Threshold.Bgp()
            self.bgp.parent = self
            self._children_name_map["bgp"] = "bgp"
            self._children_yang_names.add("bgp")

            self.cpu_node = PerfMgmt.Threshold.CpuNode()
            self.cpu_node.parent = self
            self._children_name_map["cpu_node"] = "cpu-node"
            self._children_yang_names.add("cpu-node")

            self.data_rate_interface = PerfMgmt.Threshold.DataRateInterface()
            self.data_rate_interface.parent = self
            self._children_name_map["data_rate_interface"] = "data-rate-interface"
            self._children_yang_names.add("data-rate-interface")

            self.generic_counter_interface = PerfMgmt.Threshold.GenericCounterInterface()
            self.generic_counter_interface.parent = self
            self._children_name_map["generic_counter_interface"] = "generic-counter-interface"
            self._children_yang_names.add("generic-counter-interface")

            self.ldp_mpls = PerfMgmt.Threshold.LdpMpls()
            self.ldp_mpls.parent = self
            self._children_name_map["ldp_mpls"] = "ldp-mpls"
            self._children_yang_names.add("ldp-mpls")

            self.memory_node = PerfMgmt.Threshold.MemoryNode()
            self.memory_node.parent = self
            self._children_name_map["memory_node"] = "memory-node"
            self._children_yang_names.add("memory-node")

            self.ospfv2_protocol = PerfMgmt.Threshold.Ospfv2Protocol()
            self.ospfv2_protocol.parent = self
            self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
            self._children_yang_names.add("ospfv2-protocol")

            self.ospfv3_protocol = PerfMgmt.Threshold.Ospfv3Protocol()
            self.ospfv3_protocol.parent = self
            self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
            self._children_yang_names.add("ospfv3-protocol")

            self.process_node = PerfMgmt.Threshold.ProcessNode()
            self.process_node.parent = self
            self._children_name_map["process_node"] = "process-node"
            self._children_yang_names.add("process-node")


        class GenericCounterInterface(Entity):
            """
            Interface Generic Counter threshold
            configuration
            
            .. attribute:: generic_counter_interface_templates
            
            	Interface Generic Counter threshold templates
            	**type**\:   :py:class:`GenericCounterInterfaceTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.GenericCounterInterface, self).__init__()

                self.yang_name = "generic-counter-interface"
                self.yang_parent_name = "threshold"

                self.generic_counter_interface_templates = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates()
                self.generic_counter_interface_templates.parent = self
                self._children_name_map["generic_counter_interface_templates"] = "generic-counter-interface-templates"
                self._children_yang_names.add("generic-counter-interface-templates")


            class GenericCounterInterfaceTemplates(Entity):
                """
                Interface Generic Counter threshold templates
                
                .. attribute:: generic_counter_interface_template
                
                	Interface Generic Counter threshold template instance
                	**type**\: list of    :py:class:`GenericCounterInterfaceTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates, self).__init__()

                    self.yang_name = "generic-counter-interface-templates"
                    self.yang_parent_name = "generic-counter-interface"

                    self.generic_counter_interface_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates, self).__setattr__(name, value)


                class GenericCounterInterfaceTemplate(Entity):
                    """
                    Interface Generic Counter threshold template
                    instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: in_broadcast_pkts
                    
                    	Number of inbound broadcast packets
                    	**type**\:   :py:class:`InBroadcastPkts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InBroadcastPkts>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: in_multicast_pkts
                    
                    	Number of inbound multicast packets
                    	**type**\:   :py:class:`InMulticastPkts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InMulticastPkts>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: in_octets
                    
                    	Number of inbound octets/bytes
                    	**type**\:   :py:class:`InOctets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InOctets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: in_packets
                    
                    	Number of inbound packets
                    	**type**\:   :py:class:`InPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: in_ucast_pkts
                    
                    	Number of inbound unicast packets
                    	**type**\:   :py:class:`InUcastPkts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InUcastPkts>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_crc
                    
                    	Number of inbound packets discarded with incorrect CRC
                    	**type**\:   :py:class:`InputCrc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputCrc>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_frame
                    
                    	Number of inbound packets with framing errors
                    	**type**\:   :py:class:`InputFrame <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputFrame>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_overrun
                    
                    	Number of inbound packets with overrun errors
                    	**type**\:   :py:class:`InputOverrun <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputOverrun>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_queue_drops
                    
                    	Number of input queue drops
                    	**type**\:   :py:class:`InputQueueDrops <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputQueueDrops>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_total_drops
                    
                    	Number of inbound correct packets discarded
                    	**type**\:   :py:class:`InputTotalDrops <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalDrops>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_total_errors
                    
                    	Number of inbound incorrect packets discarded
                    	**type**\:   :py:class:`InputTotalErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalErrors>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_unknown_proto
                    
                    	Number of inbound packets discarded with unknown protocol
                    	**type**\:   :py:class:`InputUnknownProto <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputUnknownProto>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: out_broadcast_pkts
                    
                    	Number of outbound broadcast packets
                    	**type**\:   :py:class:`OutBroadcastPkts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutBroadcastPkts>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: out_multicast_pkts
                    
                    	Number of outbound multicast packets
                    	**type**\:   :py:class:`OutMulticastPkts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutMulticastPkts>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: out_octets
                    
                    	Number of outbound octets/bytes
                    	**type**\:   :py:class:`OutOctets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutOctets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: out_packets
                    
                    	Number of outbound packets
                    	**type**\:   :py:class:`OutPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: out_ucast_pkts
                    
                    	Number of outbound unicast packets
                    	**type**\:   :py:class:`OutUcastPkts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutUcastPkts>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_total_drops
                    
                    	Number of outbound correct packets discarded
                    	**type**\:   :py:class:`OutputTotalDrops <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalDrops>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_total_errors
                    
                    	Number of outbound incorrect packets discarded
                    	**type**\:   :py:class:`OutputTotalErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalErrors>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_underrun
                    
                    	Number of outbound packets with underrun errors
                    	**type**\:   :py:class:`OutputUnderrun <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputUnderrun>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: vrf_group
                    
                    	Enable instance filtering by VRF name regular expression 
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate, self).__init__()

                        self.yang_name = "generic-counter-interface-template"
                        self.yang_parent_name = "generic-counter-interface-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                        self.in_broadcast_pkts = None
                        self._children_name_map["in_broadcast_pkts"] = "in-broadcast-pkts"
                        self._children_yang_names.add("in-broadcast-pkts")

                        self.in_multicast_pkts = None
                        self._children_name_map["in_multicast_pkts"] = "in-multicast-pkts"
                        self._children_yang_names.add("in-multicast-pkts")

                        self.in_octets = None
                        self._children_name_map["in_octets"] = "in-octets"
                        self._children_yang_names.add("in-octets")

                        self.in_packets = None
                        self._children_name_map["in_packets"] = "in-packets"
                        self._children_yang_names.add("in-packets")

                        self.in_ucast_pkts = None
                        self._children_name_map["in_ucast_pkts"] = "in-ucast-pkts"
                        self._children_yang_names.add("in-ucast-pkts")

                        self.input_crc = None
                        self._children_name_map["input_crc"] = "input-crc"
                        self._children_yang_names.add("input-crc")

                        self.input_frame = None
                        self._children_name_map["input_frame"] = "input-frame"
                        self._children_yang_names.add("input-frame")

                        self.input_overrun = None
                        self._children_name_map["input_overrun"] = "input-overrun"
                        self._children_yang_names.add("input-overrun")

                        self.input_queue_drops = None
                        self._children_name_map["input_queue_drops"] = "input-queue-drops"
                        self._children_yang_names.add("input-queue-drops")

                        self.input_total_drops = None
                        self._children_name_map["input_total_drops"] = "input-total-drops"
                        self._children_yang_names.add("input-total-drops")

                        self.input_total_errors = None
                        self._children_name_map["input_total_errors"] = "input-total-errors"
                        self._children_yang_names.add("input-total-errors")

                        self.input_unknown_proto = None
                        self._children_name_map["input_unknown_proto"] = "input-unknown-proto"
                        self._children_yang_names.add("input-unknown-proto")

                        self.out_broadcast_pkts = None
                        self._children_name_map["out_broadcast_pkts"] = "out-broadcast-pkts"
                        self._children_yang_names.add("out-broadcast-pkts")

                        self.out_multicast_pkts = None
                        self._children_name_map["out_multicast_pkts"] = "out-multicast-pkts"
                        self._children_yang_names.add("out-multicast-pkts")

                        self.out_octets = None
                        self._children_name_map["out_octets"] = "out-octets"
                        self._children_yang_names.add("out-octets")

                        self.out_packets = None
                        self._children_name_map["out_packets"] = "out-packets"
                        self._children_yang_names.add("out-packets")

                        self.out_ucast_pkts = None
                        self._children_name_map["out_ucast_pkts"] = "out-ucast-pkts"
                        self._children_yang_names.add("out-ucast-pkts")

                        self.output_total_drops = None
                        self._children_name_map["output_total_drops"] = "output-total-drops"
                        self._children_yang_names.add("output-total-drops")

                        self.output_total_errors = None
                        self._children_name_map["output_total_errors"] = "output-total-errors"
                        self._children_yang_names.add("output-total-errors")

                        self.output_underrun = None
                        self._children_name_map["output_underrun"] = "output-underrun"
                        self._children_yang_names.add("output-underrun")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate, self).__setattr__(name, value)


                    class InOctets(Entity):
                        """
                        Number of inbound octets/bytes
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InOctets, self).__init__()

                            self.yang_name = "in-octets"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InOctets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InOctets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "in-octets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InUcastPkts(Entity):
                        """
                        Number of inbound unicast packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InUcastPkts, self).__init__()

                            self.yang_name = "in-ucast-pkts"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InUcastPkts, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InUcastPkts, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "in-ucast-pkts" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutUcastPkts(Entity):
                        """
                        Number of outbound unicast packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutUcastPkts, self).__init__()

                            self.yang_name = "out-ucast-pkts"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutUcastPkts, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutUcastPkts, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "out-ucast-pkts" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutBroadcastPkts(Entity):
                        """
                        Number of outbound broadcast packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutBroadcastPkts, self).__init__()

                            self.yang_name = "out-broadcast-pkts"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutBroadcastPkts, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutBroadcastPkts, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "out-broadcast-pkts" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutMulticastPkts(Entity):
                        """
                        Number of outbound multicast packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutMulticastPkts, self).__init__()

                            self.yang_name = "out-multicast-pkts"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutMulticastPkts, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutMulticastPkts, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "out-multicast-pkts" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputOverrun(Entity):
                        """
                        Number of inbound packets with overrun
                        errors
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputOverrun, self).__init__()

                            self.yang_name = "input-overrun"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputOverrun, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputOverrun, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-overrun" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutOctets(Entity):
                        """
                        Number of outbound octets/bytes
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutOctets, self).__init__()

                            self.yang_name = "out-octets"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutOctets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutOctets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "out-octets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputUnderrun(Entity):
                        """
                        Number of outbound packets with underrun
                        errors
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputUnderrun, self).__init__()

                            self.yang_name = "output-underrun"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputUnderrun, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputUnderrun, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-underrun" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputTotalErrors(Entity):
                        """
                        Number of inbound incorrect packets
                        discarded
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalErrors, self).__init__()

                            self.yang_name = "input-total-errors"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalErrors, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalErrors, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-total-errors" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputTotalDrops(Entity):
                        """
                        Number of outbound correct packets discarded
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalDrops, self).__init__()

                            self.yang_name = "output-total-drops"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalDrops, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalDrops, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-total-drops" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputCrc(Entity):
                        """
                        Number of inbound packets discarded with
                        incorrect CRC
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputCrc, self).__init__()

                            self.yang_name = "input-crc"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputCrc, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputCrc, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-crc" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InBroadcastPkts(Entity):
                        """
                        Number of inbound broadcast packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InBroadcastPkts, self).__init__()

                            self.yang_name = "in-broadcast-pkts"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InBroadcastPkts, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InBroadcastPkts, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "in-broadcast-pkts" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InMulticastPkts(Entity):
                        """
                        Number of inbound multicast packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InMulticastPkts, self).__init__()

                            self.yang_name = "in-multicast-pkts"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InMulticastPkts, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InMulticastPkts, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "in-multicast-pkts" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutPackets(Entity):
                        """
                        Number of outbound packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutPackets, self).__init__()

                            self.yang_name = "out-packets"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "out-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputTotalErrors(Entity):
                        """
                        Number of outbound incorrect packets
                        discarded
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalErrors, self).__init__()

                            self.yang_name = "output-total-errors"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalErrors, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalErrors, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-total-errors" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InPackets(Entity):
                        """
                        Number of inbound packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InPackets, self).__init__()

                            self.yang_name = "in-packets"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "in-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputUnknownProto(Entity):
                        """
                        Number of inbound packets discarded with
                        unknown protocol
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputUnknownProto, self).__init__()

                            self.yang_name = "input-unknown-proto"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputUnknownProto, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputUnknownProto, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-unknown-proto" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputQueueDrops(Entity):
                        """
                        Number of input queue drops
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputQueueDrops, self).__init__()

                            self.yang_name = "input-queue-drops"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputQueueDrops, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputQueueDrops, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-queue-drops" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputTotalDrops(Entity):
                        """
                        Number of inbound correct packets discarded
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalDrops, self).__init__()

                            self.yang_name = "input-total-drops"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalDrops, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalDrops, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-total-drops" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputFrame(Entity):
                        """
                        Number of inbound packets with framing
                        errors
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputFrame, self).__init__()

                            self.yang_name = "input-frame"
                            self.yang_parent_name = "generic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputFrame, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputFrame, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-frame" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.vrf_group.is_set or
                            (self.in_broadcast_pkts is not None) or
                            (self.in_multicast_pkts is not None) or
                            (self.in_octets is not None) or
                            (self.in_packets is not None) or
                            (self.in_ucast_pkts is not None) or
                            (self.input_crc is not None) or
                            (self.input_frame is not None) or
                            (self.input_overrun is not None) or
                            (self.input_queue_drops is not None) or
                            (self.input_total_drops is not None) or
                            (self.input_total_errors is not None) or
                            (self.input_unknown_proto is not None) or
                            (self.out_broadcast_pkts is not None) or
                            (self.out_multicast_pkts is not None) or
                            (self.out_octets is not None) or
                            (self.out_packets is not None) or
                            (self.out_ucast_pkts is not None) or
                            (self.output_total_drops is not None) or
                            (self.output_total_errors is not None) or
                            (self.output_underrun is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set or
                            (self.in_broadcast_pkts is not None and self.in_broadcast_pkts.has_operation()) or
                            (self.in_multicast_pkts is not None and self.in_multicast_pkts.has_operation()) or
                            (self.in_octets is not None and self.in_octets.has_operation()) or
                            (self.in_packets is not None and self.in_packets.has_operation()) or
                            (self.in_ucast_pkts is not None and self.in_ucast_pkts.has_operation()) or
                            (self.input_crc is not None and self.input_crc.has_operation()) or
                            (self.input_frame is not None and self.input_frame.has_operation()) or
                            (self.input_overrun is not None and self.input_overrun.has_operation()) or
                            (self.input_queue_drops is not None and self.input_queue_drops.has_operation()) or
                            (self.input_total_drops is not None and self.input_total_drops.has_operation()) or
                            (self.input_total_errors is not None and self.input_total_errors.has_operation()) or
                            (self.input_unknown_proto is not None and self.input_unknown_proto.has_operation()) or
                            (self.out_broadcast_pkts is not None and self.out_broadcast_pkts.has_operation()) or
                            (self.out_multicast_pkts is not None and self.out_multicast_pkts.has_operation()) or
                            (self.out_octets is not None and self.out_octets.has_operation()) or
                            (self.out_packets is not None and self.out_packets.has_operation()) or
                            (self.out_ucast_pkts is not None and self.out_ucast_pkts.has_operation()) or
                            (self.output_total_drops is not None and self.output_total_drops.has_operation()) or
                            (self.output_total_errors is not None and self.output_total_errors.has_operation()) or
                            (self.output_underrun is not None and self.output_underrun.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "generic-counter-interface-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/generic-counter-interface/generic-counter-interface-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "in-broadcast-pkts"):
                            if (self.in_broadcast_pkts is None):
                                self.in_broadcast_pkts = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InBroadcastPkts()
                                self.in_broadcast_pkts.parent = self
                                self._children_name_map["in_broadcast_pkts"] = "in-broadcast-pkts"
                            return self.in_broadcast_pkts

                        if (child_yang_name == "in-multicast-pkts"):
                            if (self.in_multicast_pkts is None):
                                self.in_multicast_pkts = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InMulticastPkts()
                                self.in_multicast_pkts.parent = self
                                self._children_name_map["in_multicast_pkts"] = "in-multicast-pkts"
                            return self.in_multicast_pkts

                        if (child_yang_name == "in-octets"):
                            if (self.in_octets is None):
                                self.in_octets = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InOctets()
                                self.in_octets.parent = self
                                self._children_name_map["in_octets"] = "in-octets"
                            return self.in_octets

                        if (child_yang_name == "in-packets"):
                            if (self.in_packets is None):
                                self.in_packets = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InPackets()
                                self.in_packets.parent = self
                                self._children_name_map["in_packets"] = "in-packets"
                            return self.in_packets

                        if (child_yang_name == "in-ucast-pkts"):
                            if (self.in_ucast_pkts is None):
                                self.in_ucast_pkts = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InUcastPkts()
                                self.in_ucast_pkts.parent = self
                                self._children_name_map["in_ucast_pkts"] = "in-ucast-pkts"
                            return self.in_ucast_pkts

                        if (child_yang_name == "input-crc"):
                            if (self.input_crc is None):
                                self.input_crc = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputCrc()
                                self.input_crc.parent = self
                                self._children_name_map["input_crc"] = "input-crc"
                            return self.input_crc

                        if (child_yang_name == "input-frame"):
                            if (self.input_frame is None):
                                self.input_frame = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputFrame()
                                self.input_frame.parent = self
                                self._children_name_map["input_frame"] = "input-frame"
                            return self.input_frame

                        if (child_yang_name == "input-overrun"):
                            if (self.input_overrun is None):
                                self.input_overrun = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputOverrun()
                                self.input_overrun.parent = self
                                self._children_name_map["input_overrun"] = "input-overrun"
                            return self.input_overrun

                        if (child_yang_name == "input-queue-drops"):
                            if (self.input_queue_drops is None):
                                self.input_queue_drops = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputQueueDrops()
                                self.input_queue_drops.parent = self
                                self._children_name_map["input_queue_drops"] = "input-queue-drops"
                            return self.input_queue_drops

                        if (child_yang_name == "input-total-drops"):
                            if (self.input_total_drops is None):
                                self.input_total_drops = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalDrops()
                                self.input_total_drops.parent = self
                                self._children_name_map["input_total_drops"] = "input-total-drops"
                            return self.input_total_drops

                        if (child_yang_name == "input-total-errors"):
                            if (self.input_total_errors is None):
                                self.input_total_errors = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputTotalErrors()
                                self.input_total_errors.parent = self
                                self._children_name_map["input_total_errors"] = "input-total-errors"
                            return self.input_total_errors

                        if (child_yang_name == "input-unknown-proto"):
                            if (self.input_unknown_proto is None):
                                self.input_unknown_proto = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.InputUnknownProto()
                                self.input_unknown_proto.parent = self
                                self._children_name_map["input_unknown_proto"] = "input-unknown-proto"
                            return self.input_unknown_proto

                        if (child_yang_name == "out-broadcast-pkts"):
                            if (self.out_broadcast_pkts is None):
                                self.out_broadcast_pkts = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutBroadcastPkts()
                                self.out_broadcast_pkts.parent = self
                                self._children_name_map["out_broadcast_pkts"] = "out-broadcast-pkts"
                            return self.out_broadcast_pkts

                        if (child_yang_name == "out-multicast-pkts"):
                            if (self.out_multicast_pkts is None):
                                self.out_multicast_pkts = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutMulticastPkts()
                                self.out_multicast_pkts.parent = self
                                self._children_name_map["out_multicast_pkts"] = "out-multicast-pkts"
                            return self.out_multicast_pkts

                        if (child_yang_name == "out-octets"):
                            if (self.out_octets is None):
                                self.out_octets = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutOctets()
                                self.out_octets.parent = self
                                self._children_name_map["out_octets"] = "out-octets"
                            return self.out_octets

                        if (child_yang_name == "out-packets"):
                            if (self.out_packets is None):
                                self.out_packets = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutPackets()
                                self.out_packets.parent = self
                                self._children_name_map["out_packets"] = "out-packets"
                            return self.out_packets

                        if (child_yang_name == "out-ucast-pkts"):
                            if (self.out_ucast_pkts is None):
                                self.out_ucast_pkts = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutUcastPkts()
                                self.out_ucast_pkts.parent = self
                                self._children_name_map["out_ucast_pkts"] = "out-ucast-pkts"
                            return self.out_ucast_pkts

                        if (child_yang_name == "output-total-drops"):
                            if (self.output_total_drops is None):
                                self.output_total_drops = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalDrops()
                                self.output_total_drops.parent = self
                                self._children_name_map["output_total_drops"] = "output-total-drops"
                            return self.output_total_drops

                        if (child_yang_name == "output-total-errors"):
                            if (self.output_total_errors is None):
                                self.output_total_errors = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputTotalErrors()
                                self.output_total_errors.parent = self
                                self._children_name_map["output_total_errors"] = "output-total-errors"
                            return self.output_total_errors

                        if (child_yang_name == "output-underrun"):
                            if (self.output_underrun is None):
                                self.output_underrun = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate.OutputUnderrun()
                                self.output_underrun.parent = self
                                self._children_name_map["output_underrun"] = "output-underrun"
                            return self.output_underrun

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "in-broadcast-pkts" or name == "in-multicast-pkts" or name == "in-octets" or name == "in-packets" or name == "in-ucast-pkts" or name == "input-crc" or name == "input-frame" or name == "input-overrun" or name == "input-queue-drops" or name == "input-total-drops" or name == "input-total-errors" or name == "input-unknown-proto" or name == "out-broadcast-pkts" or name == "out-multicast-pkts" or name == "out-octets" or name == "out-packets" or name == "out-ucast-pkts" or name == "output-total-drops" or name == "output-total-errors" or name == "output-underrun" or name == "template-name" or name == "reg-exp-group" or name == "sample-interval" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.generic_counter_interface_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.generic_counter_interface_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "generic-counter-interface-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/generic-counter-interface/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "generic-counter-interface-template"):
                        for c in self.generic_counter_interface_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates.GenericCounterInterfaceTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.generic_counter_interface_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "generic-counter-interface-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.generic_counter_interface_templates is not None and self.generic_counter_interface_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.generic_counter_interface_templates is not None and self.generic_counter_interface_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "generic-counter-interface" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "generic-counter-interface-templates"):
                    if (self.generic_counter_interface_templates is None):
                        self.generic_counter_interface_templates = PerfMgmt.Threshold.GenericCounterInterface.GenericCounterInterfaceTemplates()
                        self.generic_counter_interface_templates.parent = self
                        self._children_name_map["generic_counter_interface_templates"] = "generic-counter-interface-templates"
                    return self.generic_counter_interface_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "generic-counter-interface-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class LdpMpls(Entity):
            """
            MPLS LDP threshold configuration
            
            .. attribute:: ldp_mpls_templates
            
            	MPLS LDP threshold templates
            	**type**\:   :py:class:`LdpMplsTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.LdpMpls, self).__init__()

                self.yang_name = "ldp-mpls"
                self.yang_parent_name = "threshold"

                self.ldp_mpls_templates = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates()
                self.ldp_mpls_templates.parent = self
                self._children_name_map["ldp_mpls_templates"] = "ldp-mpls-templates"
                self._children_yang_names.add("ldp-mpls-templates")


            class LdpMplsTemplates(Entity):
                """
                MPLS LDP threshold templates
                
                .. attribute:: ldp_mpls_template
                
                	MPLS LDP threshold template instance
                	**type**\: list of    :py:class:`LdpMplsTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates, self).__init__()

                    self.yang_name = "ldp-mpls-templates"
                    self.yang_parent_name = "ldp-mpls"

                    self.ldp_mpls_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates, self).__setattr__(name, value)


                class LdpMplsTemplate(Entity):
                    """
                    MPLS LDP threshold template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: address_msgs_rcvd
                    
                    	Number of Address messages received
                    	**type**\:   :py:class:`AddressMsgsRcvd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsRcvd>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: address_msgs_sent
                    
                    	Number of Address messages sent
                    	**type**\:   :py:class:`AddressMsgsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsSent>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: address_withdraw_msgs_rcvd
                    
                    	Number of Address Withdraw messages received
                    	**type**\:   :py:class:`AddressWithdrawMsgsRcvd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsRcvd>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: address_withdraw_msgs_sent
                    
                    	Number of Address Withdraw messages sent
                    	**type**\:   :py:class:`AddressWithdrawMsgsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsSent>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: init_msgs_rcvd
                    
                    	Number of Init messages received
                    	**type**\:   :py:class:`InitMsgsRcvd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsRcvd>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: init_msgs_sent
                    
                    	Number of Init messages sent
                    	**type**\:   :py:class:`InitMsgsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsSent>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: keepalive_msgs_rcvd
                    
                    	Number of Keepalive messages received
                    	**type**\:   :py:class:`KeepaliveMsgsRcvd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsRcvd>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: keepalive_msgs_sent
                    
                    	Number of Keepalive messages sent
                    	**type**\:   :py:class:`KeepaliveMsgsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsSent>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: label_mapping_msgs_rcvd
                    
                    	Number of Label Mapping messages received
                    	**type**\:   :py:class:`LabelMappingMsgsRcvd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsRcvd>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: label_mapping_msgs_sent
                    
                    	Number of Label Mapping messages sent
                    	**type**\:   :py:class:`LabelMappingMsgsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsSent>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: label_release_msgs_rcvd
                    
                    	Number of LAbel Release messages received
                    	**type**\:   :py:class:`LabelReleaseMsgsRcvd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsRcvd>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: label_release_msgs_sent
                    
                    	Number of Label Release messages sent
                    	**type**\:   :py:class:`LabelReleaseMsgsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsSent>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: label_withdraw_msgs_rcvd
                    
                    	Number of Label Withdraw messages received
                    	**type**\:   :py:class:`LabelWithdrawMsgsRcvd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsRcvd>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: label_withdraw_msgs_sent
                    
                    	Number of Label Withdraw messages sent
                    	**type**\:   :py:class:`LabelWithdrawMsgsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsSent>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: notification_msgs_rcvd
                    
                    	Number of Notification messages received
                    	**type**\:   :py:class:`NotificationMsgsRcvd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsRcvd>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: notification_msgs_sent
                    
                    	Number of Notification messages sent
                    	**type**\:   :py:class:`NotificationMsgsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsSent>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: total_msgs_rcvd
                    
                    	Total number of messages received
                    	**type**\:   :py:class:`TotalMsgsRcvd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsRcvd>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: total_msgs_sent
                    
                    	Total number of messages sent
                    	**type**\:   :py:class:`TotalMsgsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsSent>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate, self).__init__()

                        self.yang_name = "ldp-mpls-template"
                        self.yang_parent_name = "ldp-mpls-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.address_msgs_rcvd = None
                        self._children_name_map["address_msgs_rcvd"] = "address-msgs-rcvd"
                        self._children_yang_names.add("address-msgs-rcvd")

                        self.address_msgs_sent = None
                        self._children_name_map["address_msgs_sent"] = "address-msgs-sent"
                        self._children_yang_names.add("address-msgs-sent")

                        self.address_withdraw_msgs_rcvd = None
                        self._children_name_map["address_withdraw_msgs_rcvd"] = "address-withdraw-msgs-rcvd"
                        self._children_yang_names.add("address-withdraw-msgs-rcvd")

                        self.address_withdraw_msgs_sent = None
                        self._children_name_map["address_withdraw_msgs_sent"] = "address-withdraw-msgs-sent"
                        self._children_yang_names.add("address-withdraw-msgs-sent")

                        self.init_msgs_rcvd = None
                        self._children_name_map["init_msgs_rcvd"] = "init-msgs-rcvd"
                        self._children_yang_names.add("init-msgs-rcvd")

                        self.init_msgs_sent = None
                        self._children_name_map["init_msgs_sent"] = "init-msgs-sent"
                        self._children_yang_names.add("init-msgs-sent")

                        self.keepalive_msgs_rcvd = None
                        self._children_name_map["keepalive_msgs_rcvd"] = "keepalive-msgs-rcvd"
                        self._children_yang_names.add("keepalive-msgs-rcvd")

                        self.keepalive_msgs_sent = None
                        self._children_name_map["keepalive_msgs_sent"] = "keepalive-msgs-sent"
                        self._children_yang_names.add("keepalive-msgs-sent")

                        self.label_mapping_msgs_rcvd = None
                        self._children_name_map["label_mapping_msgs_rcvd"] = "label-mapping-msgs-rcvd"
                        self._children_yang_names.add("label-mapping-msgs-rcvd")

                        self.label_mapping_msgs_sent = None
                        self._children_name_map["label_mapping_msgs_sent"] = "label-mapping-msgs-sent"
                        self._children_yang_names.add("label-mapping-msgs-sent")

                        self.label_release_msgs_rcvd = None
                        self._children_name_map["label_release_msgs_rcvd"] = "label-release-msgs-rcvd"
                        self._children_yang_names.add("label-release-msgs-rcvd")

                        self.label_release_msgs_sent = None
                        self._children_name_map["label_release_msgs_sent"] = "label-release-msgs-sent"
                        self._children_yang_names.add("label-release-msgs-sent")

                        self.label_withdraw_msgs_rcvd = None
                        self._children_name_map["label_withdraw_msgs_rcvd"] = "label-withdraw-msgs-rcvd"
                        self._children_yang_names.add("label-withdraw-msgs-rcvd")

                        self.label_withdraw_msgs_sent = None
                        self._children_name_map["label_withdraw_msgs_sent"] = "label-withdraw-msgs-sent"
                        self._children_yang_names.add("label-withdraw-msgs-sent")

                        self.notification_msgs_rcvd = None
                        self._children_name_map["notification_msgs_rcvd"] = "notification-msgs-rcvd"
                        self._children_yang_names.add("notification-msgs-rcvd")

                        self.notification_msgs_sent = None
                        self._children_name_map["notification_msgs_sent"] = "notification-msgs-sent"
                        self._children_yang_names.add("notification-msgs-sent")

                        self.total_msgs_rcvd = None
                        self._children_name_map["total_msgs_rcvd"] = "total-msgs-rcvd"
                        self._children_yang_names.add("total-msgs-rcvd")

                        self.total_msgs_sent = None
                        self._children_name_map["total_msgs_sent"] = "total-msgs-sent"
                        self._children_yang_names.add("total-msgs-sent")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "sample_interval") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate, self).__setattr__(name, value)


                    class AddressWithdrawMsgsRcvd(Entity):
                        """
                        Number of Address Withdraw messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsRcvd, self).__init__()

                            self.yang_name = "address-withdraw-msgs-rcvd"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsRcvd, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsRcvd, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "address-withdraw-msgs-rcvd" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class LabelWithdrawMsgsRcvd(Entity):
                        """
                        Number of Label Withdraw messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsRcvd, self).__init__()

                            self.yang_name = "label-withdraw-msgs-rcvd"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsRcvd, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsRcvd, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "label-withdraw-msgs-rcvd" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class AddressWithdrawMsgsSent(Entity):
                        """
                        Number of Address Withdraw messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsSent, self).__init__()

                            self.yang_name = "address-withdraw-msgs-sent"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "address-withdraw-msgs-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class LabelWithdrawMsgsSent(Entity):
                        """
                        Number of Label Withdraw messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsSent, self).__init__()

                            self.yang_name = "label-withdraw-msgs-sent"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "label-withdraw-msgs-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class NotificationMsgsRcvd(Entity):
                        """
                        Number of Notification messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsRcvd, self).__init__()

                            self.yang_name = "notification-msgs-rcvd"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsRcvd, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsRcvd, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "notification-msgs-rcvd" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class TotalMsgsRcvd(Entity):
                        """
                        Total number of messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..65536
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..65536
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsRcvd, self).__init__()

                            self.yang_name = "total-msgs-rcvd"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsRcvd, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsRcvd, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "total-msgs-rcvd" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class NotificationMsgsSent(Entity):
                        """
                        Number of Notification messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsSent, self).__init__()

                            self.yang_name = "notification-msgs-sent"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "notification-msgs-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class TotalMsgsSent(Entity):
                        """
                        Total number of messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsSent, self).__init__()

                            self.yang_name = "total-msgs-sent"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "total-msgs-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class LabelReleaseMsgsRcvd(Entity):
                        """
                        Number of LAbel Release messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsRcvd, self).__init__()

                            self.yang_name = "label-release-msgs-rcvd"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsRcvd, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsRcvd, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "label-release-msgs-rcvd" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InitMsgsRcvd(Entity):
                        """
                        Number of Init messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsRcvd, self).__init__()

                            self.yang_name = "init-msgs-rcvd"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsRcvd, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsRcvd, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "init-msgs-rcvd" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class LabelReleaseMsgsSent(Entity):
                        """
                        Number of Label Release messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsSent, self).__init__()

                            self.yang_name = "label-release-msgs-sent"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "label-release-msgs-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InitMsgsSent(Entity):
                        """
                        Number of Init messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsSent, self).__init__()

                            self.yang_name = "init-msgs-sent"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "init-msgs-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class LabelMappingMsgsRcvd(Entity):
                        """
                        Number of Label Mapping messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsRcvd, self).__init__()

                            self.yang_name = "label-mapping-msgs-rcvd"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsRcvd, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsRcvd, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "label-mapping-msgs-rcvd" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class KeepaliveMsgsRcvd(Entity):
                        """
                        Number of Keepalive messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsRcvd, self).__init__()

                            self.yang_name = "keepalive-msgs-rcvd"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsRcvd, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsRcvd, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "keepalive-msgs-rcvd" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class LabelMappingMsgsSent(Entity):
                        """
                        Number of Label Mapping messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsSent, self).__init__()

                            self.yang_name = "label-mapping-msgs-sent"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "label-mapping-msgs-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class KeepaliveMsgsSent(Entity):
                        """
                        Number of Keepalive messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsSent, self).__init__()

                            self.yang_name = "keepalive-msgs-sent"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "keepalive-msgs-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class AddressMsgsRcvd(Entity):
                        """
                        Number of Address messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsRcvd, self).__init__()

                            self.yang_name = "address-msgs-rcvd"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsRcvd, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsRcvd, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "address-msgs-rcvd" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class AddressMsgsSent(Entity):
                        """
                        Number of Address messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsSent, self).__init__()

                            self.yang_name = "address-msgs-sent"
                            self.yang_parent_name = "ldp-mpls-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "address-msgs-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.sample_interval.is_set or
                            (self.address_msgs_rcvd is not None) or
                            (self.address_msgs_sent is not None) or
                            (self.address_withdraw_msgs_rcvd is not None) or
                            (self.address_withdraw_msgs_sent is not None) or
                            (self.init_msgs_rcvd is not None) or
                            (self.init_msgs_sent is not None) or
                            (self.keepalive_msgs_rcvd is not None) or
                            (self.keepalive_msgs_sent is not None) or
                            (self.label_mapping_msgs_rcvd is not None) or
                            (self.label_mapping_msgs_sent is not None) or
                            (self.label_release_msgs_rcvd is not None) or
                            (self.label_release_msgs_sent is not None) or
                            (self.label_withdraw_msgs_rcvd is not None) or
                            (self.label_withdraw_msgs_sent is not None) or
                            (self.notification_msgs_rcvd is not None) or
                            (self.notification_msgs_sent is not None) or
                            (self.total_msgs_rcvd is not None) or
                            (self.total_msgs_sent is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            (self.address_msgs_rcvd is not None and self.address_msgs_rcvd.has_operation()) or
                            (self.address_msgs_sent is not None and self.address_msgs_sent.has_operation()) or
                            (self.address_withdraw_msgs_rcvd is not None and self.address_withdraw_msgs_rcvd.has_operation()) or
                            (self.address_withdraw_msgs_sent is not None and self.address_withdraw_msgs_sent.has_operation()) or
                            (self.init_msgs_rcvd is not None and self.init_msgs_rcvd.has_operation()) or
                            (self.init_msgs_sent is not None and self.init_msgs_sent.has_operation()) or
                            (self.keepalive_msgs_rcvd is not None and self.keepalive_msgs_rcvd.has_operation()) or
                            (self.keepalive_msgs_sent is not None and self.keepalive_msgs_sent.has_operation()) or
                            (self.label_mapping_msgs_rcvd is not None and self.label_mapping_msgs_rcvd.has_operation()) or
                            (self.label_mapping_msgs_sent is not None and self.label_mapping_msgs_sent.has_operation()) or
                            (self.label_release_msgs_rcvd is not None and self.label_release_msgs_rcvd.has_operation()) or
                            (self.label_release_msgs_sent is not None and self.label_release_msgs_sent.has_operation()) or
                            (self.label_withdraw_msgs_rcvd is not None and self.label_withdraw_msgs_rcvd.has_operation()) or
                            (self.label_withdraw_msgs_sent is not None and self.label_withdraw_msgs_sent.has_operation()) or
                            (self.notification_msgs_rcvd is not None and self.notification_msgs_rcvd.has_operation()) or
                            (self.notification_msgs_sent is not None and self.notification_msgs_sent.has_operation()) or
                            (self.total_msgs_rcvd is not None and self.total_msgs_rcvd.has_operation()) or
                            (self.total_msgs_sent is not None and self.total_msgs_sent.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "ldp-mpls-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ldp-mpls/ldp-mpls-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "address-msgs-rcvd"):
                            if (self.address_msgs_rcvd is None):
                                self.address_msgs_rcvd = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsRcvd()
                                self.address_msgs_rcvd.parent = self
                                self._children_name_map["address_msgs_rcvd"] = "address-msgs-rcvd"
                            return self.address_msgs_rcvd

                        if (child_yang_name == "address-msgs-sent"):
                            if (self.address_msgs_sent is None):
                                self.address_msgs_sent = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressMsgsSent()
                                self.address_msgs_sent.parent = self
                                self._children_name_map["address_msgs_sent"] = "address-msgs-sent"
                            return self.address_msgs_sent

                        if (child_yang_name == "address-withdraw-msgs-rcvd"):
                            if (self.address_withdraw_msgs_rcvd is None):
                                self.address_withdraw_msgs_rcvd = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsRcvd()
                                self.address_withdraw_msgs_rcvd.parent = self
                                self._children_name_map["address_withdraw_msgs_rcvd"] = "address-withdraw-msgs-rcvd"
                            return self.address_withdraw_msgs_rcvd

                        if (child_yang_name == "address-withdraw-msgs-sent"):
                            if (self.address_withdraw_msgs_sent is None):
                                self.address_withdraw_msgs_sent = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.AddressWithdrawMsgsSent()
                                self.address_withdraw_msgs_sent.parent = self
                                self._children_name_map["address_withdraw_msgs_sent"] = "address-withdraw-msgs-sent"
                            return self.address_withdraw_msgs_sent

                        if (child_yang_name == "init-msgs-rcvd"):
                            if (self.init_msgs_rcvd is None):
                                self.init_msgs_rcvd = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsRcvd()
                                self.init_msgs_rcvd.parent = self
                                self._children_name_map["init_msgs_rcvd"] = "init-msgs-rcvd"
                            return self.init_msgs_rcvd

                        if (child_yang_name == "init-msgs-sent"):
                            if (self.init_msgs_sent is None):
                                self.init_msgs_sent = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.InitMsgsSent()
                                self.init_msgs_sent.parent = self
                                self._children_name_map["init_msgs_sent"] = "init-msgs-sent"
                            return self.init_msgs_sent

                        if (child_yang_name == "keepalive-msgs-rcvd"):
                            if (self.keepalive_msgs_rcvd is None):
                                self.keepalive_msgs_rcvd = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsRcvd()
                                self.keepalive_msgs_rcvd.parent = self
                                self._children_name_map["keepalive_msgs_rcvd"] = "keepalive-msgs-rcvd"
                            return self.keepalive_msgs_rcvd

                        if (child_yang_name == "keepalive-msgs-sent"):
                            if (self.keepalive_msgs_sent is None):
                                self.keepalive_msgs_sent = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.KeepaliveMsgsSent()
                                self.keepalive_msgs_sent.parent = self
                                self._children_name_map["keepalive_msgs_sent"] = "keepalive-msgs-sent"
                            return self.keepalive_msgs_sent

                        if (child_yang_name == "label-mapping-msgs-rcvd"):
                            if (self.label_mapping_msgs_rcvd is None):
                                self.label_mapping_msgs_rcvd = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsRcvd()
                                self.label_mapping_msgs_rcvd.parent = self
                                self._children_name_map["label_mapping_msgs_rcvd"] = "label-mapping-msgs-rcvd"
                            return self.label_mapping_msgs_rcvd

                        if (child_yang_name == "label-mapping-msgs-sent"):
                            if (self.label_mapping_msgs_sent is None):
                                self.label_mapping_msgs_sent = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelMappingMsgsSent()
                                self.label_mapping_msgs_sent.parent = self
                                self._children_name_map["label_mapping_msgs_sent"] = "label-mapping-msgs-sent"
                            return self.label_mapping_msgs_sent

                        if (child_yang_name == "label-release-msgs-rcvd"):
                            if (self.label_release_msgs_rcvd is None):
                                self.label_release_msgs_rcvd = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsRcvd()
                                self.label_release_msgs_rcvd.parent = self
                                self._children_name_map["label_release_msgs_rcvd"] = "label-release-msgs-rcvd"
                            return self.label_release_msgs_rcvd

                        if (child_yang_name == "label-release-msgs-sent"):
                            if (self.label_release_msgs_sent is None):
                                self.label_release_msgs_sent = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelReleaseMsgsSent()
                                self.label_release_msgs_sent.parent = self
                                self._children_name_map["label_release_msgs_sent"] = "label-release-msgs-sent"
                            return self.label_release_msgs_sent

                        if (child_yang_name == "label-withdraw-msgs-rcvd"):
                            if (self.label_withdraw_msgs_rcvd is None):
                                self.label_withdraw_msgs_rcvd = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsRcvd()
                                self.label_withdraw_msgs_rcvd.parent = self
                                self._children_name_map["label_withdraw_msgs_rcvd"] = "label-withdraw-msgs-rcvd"
                            return self.label_withdraw_msgs_rcvd

                        if (child_yang_name == "label-withdraw-msgs-sent"):
                            if (self.label_withdraw_msgs_sent is None):
                                self.label_withdraw_msgs_sent = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.LabelWithdrawMsgsSent()
                                self.label_withdraw_msgs_sent.parent = self
                                self._children_name_map["label_withdraw_msgs_sent"] = "label-withdraw-msgs-sent"
                            return self.label_withdraw_msgs_sent

                        if (child_yang_name == "notification-msgs-rcvd"):
                            if (self.notification_msgs_rcvd is None):
                                self.notification_msgs_rcvd = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsRcvd()
                                self.notification_msgs_rcvd.parent = self
                                self._children_name_map["notification_msgs_rcvd"] = "notification-msgs-rcvd"
                            return self.notification_msgs_rcvd

                        if (child_yang_name == "notification-msgs-sent"):
                            if (self.notification_msgs_sent is None):
                                self.notification_msgs_sent = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.NotificationMsgsSent()
                                self.notification_msgs_sent.parent = self
                                self._children_name_map["notification_msgs_sent"] = "notification-msgs-sent"
                            return self.notification_msgs_sent

                        if (child_yang_name == "total-msgs-rcvd"):
                            if (self.total_msgs_rcvd is None):
                                self.total_msgs_rcvd = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsRcvd()
                                self.total_msgs_rcvd.parent = self
                                self._children_name_map["total_msgs_rcvd"] = "total-msgs-rcvd"
                            return self.total_msgs_rcvd

                        if (child_yang_name == "total-msgs-sent"):
                            if (self.total_msgs_sent is None):
                                self.total_msgs_sent = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate.TotalMsgsSent()
                                self.total_msgs_sent.parent = self
                                self._children_name_map["total_msgs_sent"] = "total-msgs-sent"
                            return self.total_msgs_sent

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "address-msgs-rcvd" or name == "address-msgs-sent" or name == "address-withdraw-msgs-rcvd" or name == "address-withdraw-msgs-sent" or name == "init-msgs-rcvd" or name == "init-msgs-sent" or name == "keepalive-msgs-rcvd" or name == "keepalive-msgs-sent" or name == "label-mapping-msgs-rcvd" or name == "label-mapping-msgs-sent" or name == "label-release-msgs-rcvd" or name == "label-release-msgs-sent" or name == "label-withdraw-msgs-rcvd" or name == "label-withdraw-msgs-sent" or name == "notification-msgs-rcvd" or name == "notification-msgs-sent" or name == "total-msgs-rcvd" or name == "total-msgs-sent" or name == "template-name" or name == "sample-interval"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.ldp_mpls_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.ldp_mpls_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ldp-mpls-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ldp-mpls/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "ldp-mpls-template"):
                        for c in self.ldp_mpls_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates.LdpMplsTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.ldp_mpls_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "ldp-mpls-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.ldp_mpls_templates is not None and self.ldp_mpls_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.ldp_mpls_templates is not None and self.ldp_mpls_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "ldp-mpls" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "ldp-mpls-templates"):
                    if (self.ldp_mpls_templates is None):
                        self.ldp_mpls_templates = PerfMgmt.Threshold.LdpMpls.LdpMplsTemplates()
                        self.ldp_mpls_templates.parent = self
                        self._children_name_map["ldp_mpls_templates"] = "ldp-mpls-templates"
                    return self.ldp_mpls_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "ldp-mpls-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class BasicCounterInterface(Entity):
            """
            Interface Basic Counter threshold configuration
            
            .. attribute:: basic_counter_interface_templates
            
            	Interface Basic Counter threshold templates
            	**type**\:   :py:class:`BasicCounterInterfaceTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.BasicCounterInterface, self).__init__()

                self.yang_name = "basic-counter-interface"
                self.yang_parent_name = "threshold"

                self.basic_counter_interface_templates = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates()
                self.basic_counter_interface_templates.parent = self
                self._children_name_map["basic_counter_interface_templates"] = "basic-counter-interface-templates"
                self._children_yang_names.add("basic-counter-interface-templates")


            class BasicCounterInterfaceTemplates(Entity):
                """
                Interface Basic Counter threshold templates
                
                .. attribute:: basic_counter_interface_template
                
                	Interface Basic Counter threshold template instance
                	**type**\: list of    :py:class:`BasicCounterInterfaceTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates, self).__init__()

                    self.yang_name = "basic-counter-interface-templates"
                    self.yang_parent_name = "basic-counter-interface"

                    self.basic_counter_interface_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates, self).__setattr__(name, value)


                class BasicCounterInterfaceTemplate(Entity):
                    """
                    Interface Basic Counter threshold template
                    instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: in_octets
                    
                    	Number of inbound octets/bytes
                    	**type**\:   :py:class:`InOctets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InOctets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: in_packets
                    
                    	Number of inbound packets
                    	**type**\:   :py:class:`InPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_queue_drops
                    
                    	Number of input queue drops
                    	**type**\:   :py:class:`InputQueueDrops <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputQueueDrops>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_total_drops
                    
                    	Number of inbound correct packets discarded
                    	**type**\:   :py:class:`InputTotalDrops <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalDrops>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_total_errors
                    
                    	Number of inbound incorrect packets discarded
                    	**type**\:   :py:class:`InputTotalErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalErrors>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: out_octets
                    
                    	Number of outbound octets/bytes
                    	**type**\:   :py:class:`OutOctets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutOctets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: out_packets
                    
                    	Number of outbound packets
                    	**type**\:   :py:class:`OutPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_queue_drops
                    
                    	Number of outbound queue drops
                    	**type**\:   :py:class:`OutputQueueDrops <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputQueueDrops>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_total_drops
                    
                    	Number of outbound correct packets discarded
                    	**type**\:   :py:class:`OutputTotalDrops <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalDrops>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_total_errors
                    
                    	Number of outbound incorrect packets discarded
                    	**type**\:   :py:class:`OutputTotalErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalErrors>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: vrf_group
                    
                    	Enable instance filtering by VRF name regular expression 
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate, self).__init__()

                        self.yang_name = "basic-counter-interface-template"
                        self.yang_parent_name = "basic-counter-interface-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                        self.in_octets = None
                        self._children_name_map["in_octets"] = "in-octets"
                        self._children_yang_names.add("in-octets")

                        self.in_packets = None
                        self._children_name_map["in_packets"] = "in-packets"
                        self._children_yang_names.add("in-packets")

                        self.input_queue_drops = None
                        self._children_name_map["input_queue_drops"] = "input-queue-drops"
                        self._children_yang_names.add("input-queue-drops")

                        self.input_total_drops = None
                        self._children_name_map["input_total_drops"] = "input-total-drops"
                        self._children_yang_names.add("input-total-drops")

                        self.input_total_errors = None
                        self._children_name_map["input_total_errors"] = "input-total-errors"
                        self._children_yang_names.add("input-total-errors")

                        self.out_octets = None
                        self._children_name_map["out_octets"] = "out-octets"
                        self._children_yang_names.add("out-octets")

                        self.out_packets = None
                        self._children_name_map["out_packets"] = "out-packets"
                        self._children_yang_names.add("out-packets")

                        self.output_queue_drops = None
                        self._children_name_map["output_queue_drops"] = "output-queue-drops"
                        self._children_yang_names.add("output-queue-drops")

                        self.output_total_drops = None
                        self._children_name_map["output_total_drops"] = "output-total-drops"
                        self._children_yang_names.add("output-total-drops")

                        self.output_total_errors = None
                        self._children_name_map["output_total_errors"] = "output-total-errors"
                        self._children_yang_names.add("output-total-errors")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate, self).__setattr__(name, value)


                    class InOctets(Entity):
                        """
                        Number of inbound octets/bytes
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InOctets, self).__init__()

                            self.yang_name = "in-octets"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InOctets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InOctets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "in-octets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutOctets(Entity):
                        """
                        Number of outbound octets/bytes
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutOctets, self).__init__()

                            self.yang_name = "out-octets"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutOctets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutOctets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "out-octets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputQueueDrops(Entity):
                        """
                        Number of outbound queue drops
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputQueueDrops, self).__init__()

                            self.yang_name = "output-queue-drops"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputQueueDrops, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputQueueDrops, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-queue-drops" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputTotalErrors(Entity):
                        """
                        Number of inbound incorrect packets
                        discarded
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalErrors, self).__init__()

                            self.yang_name = "input-total-errors"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalErrors, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalErrors, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-total-errors" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputTotalDrops(Entity):
                        """
                        Number of outbound correct packets discarded
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalDrops, self).__init__()

                            self.yang_name = "output-total-drops"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalDrops, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalDrops, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-total-drops" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutPackets(Entity):
                        """
                        Number of outbound packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutPackets, self).__init__()

                            self.yang_name = "out-packets"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "out-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputTotalErrors(Entity):
                        """
                        Number of outbound incorrect packets
                        discarded
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalErrors, self).__init__()

                            self.yang_name = "output-total-errors"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalErrors, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalErrors, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-total-errors" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InPackets(Entity):
                        """
                        Number of inbound packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InPackets, self).__init__()

                            self.yang_name = "in-packets"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "in-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputQueueDrops(Entity):
                        """
                        Number of input queue drops
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputQueueDrops, self).__init__()

                            self.yang_name = "input-queue-drops"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputQueueDrops, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputQueueDrops, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-queue-drops" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputTotalDrops(Entity):
                        """
                        Number of inbound correct packets discarded
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalDrops, self).__init__()

                            self.yang_name = "input-total-drops"
                            self.yang_parent_name = "basic-counter-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalDrops, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalDrops, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-total-drops" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.vrf_group.is_set or
                            (self.in_octets is not None) or
                            (self.in_packets is not None) or
                            (self.input_queue_drops is not None) or
                            (self.input_total_drops is not None) or
                            (self.input_total_errors is not None) or
                            (self.out_octets is not None) or
                            (self.out_packets is not None) or
                            (self.output_queue_drops is not None) or
                            (self.output_total_drops is not None) or
                            (self.output_total_errors is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set or
                            (self.in_octets is not None and self.in_octets.has_operation()) or
                            (self.in_packets is not None and self.in_packets.has_operation()) or
                            (self.input_queue_drops is not None and self.input_queue_drops.has_operation()) or
                            (self.input_total_drops is not None and self.input_total_drops.has_operation()) or
                            (self.input_total_errors is not None and self.input_total_errors.has_operation()) or
                            (self.out_octets is not None and self.out_octets.has_operation()) or
                            (self.out_packets is not None and self.out_packets.has_operation()) or
                            (self.output_queue_drops is not None and self.output_queue_drops.has_operation()) or
                            (self.output_total_drops is not None and self.output_total_drops.has_operation()) or
                            (self.output_total_errors is not None and self.output_total_errors.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "basic-counter-interface-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/basic-counter-interface/basic-counter-interface-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "in-octets"):
                            if (self.in_octets is None):
                                self.in_octets = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InOctets()
                                self.in_octets.parent = self
                                self._children_name_map["in_octets"] = "in-octets"
                            return self.in_octets

                        if (child_yang_name == "in-packets"):
                            if (self.in_packets is None):
                                self.in_packets = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InPackets()
                                self.in_packets.parent = self
                                self._children_name_map["in_packets"] = "in-packets"
                            return self.in_packets

                        if (child_yang_name == "input-queue-drops"):
                            if (self.input_queue_drops is None):
                                self.input_queue_drops = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputQueueDrops()
                                self.input_queue_drops.parent = self
                                self._children_name_map["input_queue_drops"] = "input-queue-drops"
                            return self.input_queue_drops

                        if (child_yang_name == "input-total-drops"):
                            if (self.input_total_drops is None):
                                self.input_total_drops = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalDrops()
                                self.input_total_drops.parent = self
                                self._children_name_map["input_total_drops"] = "input-total-drops"
                            return self.input_total_drops

                        if (child_yang_name == "input-total-errors"):
                            if (self.input_total_errors is None):
                                self.input_total_errors = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.InputTotalErrors()
                                self.input_total_errors.parent = self
                                self._children_name_map["input_total_errors"] = "input-total-errors"
                            return self.input_total_errors

                        if (child_yang_name == "out-octets"):
                            if (self.out_octets is None):
                                self.out_octets = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutOctets()
                                self.out_octets.parent = self
                                self._children_name_map["out_octets"] = "out-octets"
                            return self.out_octets

                        if (child_yang_name == "out-packets"):
                            if (self.out_packets is None):
                                self.out_packets = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutPackets()
                                self.out_packets.parent = self
                                self._children_name_map["out_packets"] = "out-packets"
                            return self.out_packets

                        if (child_yang_name == "output-queue-drops"):
                            if (self.output_queue_drops is None):
                                self.output_queue_drops = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputQueueDrops()
                                self.output_queue_drops.parent = self
                                self._children_name_map["output_queue_drops"] = "output-queue-drops"
                            return self.output_queue_drops

                        if (child_yang_name == "output-total-drops"):
                            if (self.output_total_drops is None):
                                self.output_total_drops = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalDrops()
                                self.output_total_drops.parent = self
                                self._children_name_map["output_total_drops"] = "output-total-drops"
                            return self.output_total_drops

                        if (child_yang_name == "output-total-errors"):
                            if (self.output_total_errors is None):
                                self.output_total_errors = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate.OutputTotalErrors()
                                self.output_total_errors.parent = self
                                self._children_name_map["output_total_errors"] = "output-total-errors"
                            return self.output_total_errors

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "in-octets" or name == "in-packets" or name == "input-queue-drops" or name == "input-total-drops" or name == "input-total-errors" or name == "out-octets" or name == "out-packets" or name == "output-queue-drops" or name == "output-total-drops" or name == "output-total-errors" or name == "template-name" or name == "reg-exp-group" or name == "sample-interval" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.basic_counter_interface_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.basic_counter_interface_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "basic-counter-interface-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/basic-counter-interface/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "basic-counter-interface-template"):
                        for c in self.basic_counter_interface_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates.BasicCounterInterfaceTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.basic_counter_interface_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "basic-counter-interface-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.basic_counter_interface_templates is not None and self.basic_counter_interface_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.basic_counter_interface_templates is not None and self.basic_counter_interface_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "basic-counter-interface" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "basic-counter-interface-templates"):
                    if (self.basic_counter_interface_templates is None):
                        self.basic_counter_interface_templates = PerfMgmt.Threshold.BasicCounterInterface.BasicCounterInterfaceTemplates()
                        self.basic_counter_interface_templates.parent = self
                        self._children_name_map["basic_counter_interface_templates"] = "basic-counter-interface-templates"
                    return self.basic_counter_interface_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "basic-counter-interface-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Bgp(Entity):
            """
            BGP threshold configuration
            
            .. attribute:: bgp_templates
            
            	BGP threshold templates
            	**type**\:   :py:class:`BgpTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.Bgp, self).__init__()

                self.yang_name = "bgp"
                self.yang_parent_name = "threshold"

                self.bgp_templates = PerfMgmt.Threshold.Bgp.BgpTemplates()
                self.bgp_templates.parent = self
                self._children_name_map["bgp_templates"] = "bgp-templates"
                self._children_yang_names.add("bgp-templates")


            class BgpTemplates(Entity):
                """
                BGP threshold templates
                
                .. attribute:: bgp_template
                
                	BGP threshold template instance
                	**type**\: list of    :py:class:`BgpTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.Bgp.BgpTemplates, self).__init__()

                    self.yang_name = "bgp-templates"
                    self.yang_parent_name = "bgp"

                    self.bgp_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.Bgp.BgpTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.Bgp.BgpTemplates, self).__setattr__(name, value)


                class BgpTemplate(Entity):
                    """
                    BGP threshold template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: conn_dropped
                    
                    	Number of times the connection was dropped
                    	**type**\:   :py:class:`ConnDropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnDropped>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: conn_established
                    
                    	Number of times the connection was established
                    	**type**\:   :py:class:`ConnEstablished <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnEstablished>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: errors_received
                    
                    	Number of error notifications received
                    	**type**\:   :py:class:`ErrorsReceived <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsReceived>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: errors_sent
                    
                    	Number of error notifications sent
                    	**type**\:   :py:class:`ErrorsSent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsSent>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_messages
                    
                    	Number of messages received
                    	**type**\:   :py:class:`InputMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputMessages>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_update_messages
                    
                    	Number of update messages received
                    	**type**\:   :py:class:`InputUpdateMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputUpdateMessages>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_messages
                    
                    	Number of messages sent
                    	**type**\:   :py:class:`OutputMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputMessages>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_update_messages
                    
                    	Number of update messages sent
                    	**type**\:   :py:class:`OutputUpdateMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputUpdateMessages>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate, self).__init__()

                        self.yang_name = "bgp-template"
                        self.yang_parent_name = "bgp-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.conn_dropped = None
                        self._children_name_map["conn_dropped"] = "conn-dropped"
                        self._children_yang_names.add("conn-dropped")

                        self.conn_established = None
                        self._children_name_map["conn_established"] = "conn-established"
                        self._children_yang_names.add("conn-established")

                        self.errors_received = None
                        self._children_name_map["errors_received"] = "errors-received"
                        self._children_yang_names.add("errors-received")

                        self.errors_sent = None
                        self._children_name_map["errors_sent"] = "errors-sent"
                        self._children_yang_names.add("errors-sent")

                        self.input_messages = None
                        self._children_name_map["input_messages"] = "input-messages"
                        self._children_yang_names.add("input-messages")

                        self.input_update_messages = None
                        self._children_name_map["input_update_messages"] = "input-update-messages"
                        self._children_yang_names.add("input-update-messages")

                        self.output_messages = None
                        self._children_name_map["output_messages"] = "output-messages"
                        self._children_yang_names.add("output-messages")

                        self.output_update_messages = None
                        self._children_name_map["output_update_messages"] = "output-update-messages"
                        self._children_yang_names.add("output-update-messages")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "sample_interval") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate, self).__setattr__(name, value)


                    class OutputUpdateMessages(Entity):
                        """
                        Number of update messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputUpdateMessages, self).__init__()

                            self.yang_name = "output-update-messages"
                            self.yang_parent_name = "bgp-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputUpdateMessages, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputUpdateMessages, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-update-messages" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class ErrorsReceived(Entity):
                        """
                        Number of error notifications received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsReceived, self).__init__()

                            self.yang_name = "errors-received"
                            self.yang_parent_name = "bgp-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsReceived, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsReceived, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "errors-received" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class ConnEstablished(Entity):
                        """
                        Number of times the connection was
                        established
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnEstablished, self).__init__()

                            self.yang_name = "conn-established"
                            self.yang_parent_name = "bgp-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnEstablished, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnEstablished, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "conn-established" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputMessages(Entity):
                        """
                        Number of messages sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputMessages, self).__init__()

                            self.yang_name = "output-messages"
                            self.yang_parent_name = "bgp-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputMessages, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputMessages, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-messages" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class ConnDropped(Entity):
                        """
                        Number of times the connection was dropped
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnDropped, self).__init__()

                            self.yang_name = "conn-dropped"
                            self.yang_parent_name = "bgp-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnDropped, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnDropped, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "conn-dropped" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputUpdateMessages(Entity):
                        """
                        Number of update messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputUpdateMessages, self).__init__()

                            self.yang_name = "input-update-messages"
                            self.yang_parent_name = "bgp-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputUpdateMessages, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputUpdateMessages, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-update-messages" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class ErrorsSent(Entity):
                        """
                        Number of error notifications sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsSent, self).__init__()

                            self.yang_name = "errors-sent"
                            self.yang_parent_name = "bgp-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsSent, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsSent, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "errors-sent" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputMessages(Entity):
                        """
                        Number of messages received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputMessages, self).__init__()

                            self.yang_name = "input-messages"
                            self.yang_parent_name = "bgp-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputMessages, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputMessages, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-messages" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.sample_interval.is_set or
                            (self.conn_dropped is not None) or
                            (self.conn_established is not None) or
                            (self.errors_received is not None) or
                            (self.errors_sent is not None) or
                            (self.input_messages is not None) or
                            (self.input_update_messages is not None) or
                            (self.output_messages is not None) or
                            (self.output_update_messages is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            (self.conn_dropped is not None and self.conn_dropped.has_operation()) or
                            (self.conn_established is not None and self.conn_established.has_operation()) or
                            (self.errors_received is not None and self.errors_received.has_operation()) or
                            (self.errors_sent is not None and self.errors_sent.has_operation()) or
                            (self.input_messages is not None and self.input_messages.has_operation()) or
                            (self.input_update_messages is not None and self.input_update_messages.has_operation()) or
                            (self.output_messages is not None and self.output_messages.has_operation()) or
                            (self.output_update_messages is not None and self.output_update_messages.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "bgp-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/bgp/bgp-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "conn-dropped"):
                            if (self.conn_dropped is None):
                                self.conn_dropped = PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnDropped()
                                self.conn_dropped.parent = self
                                self._children_name_map["conn_dropped"] = "conn-dropped"
                            return self.conn_dropped

                        if (child_yang_name == "conn-established"):
                            if (self.conn_established is None):
                                self.conn_established = PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ConnEstablished()
                                self.conn_established.parent = self
                                self._children_name_map["conn_established"] = "conn-established"
                            return self.conn_established

                        if (child_yang_name == "errors-received"):
                            if (self.errors_received is None):
                                self.errors_received = PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsReceived()
                                self.errors_received.parent = self
                                self._children_name_map["errors_received"] = "errors-received"
                            return self.errors_received

                        if (child_yang_name == "errors-sent"):
                            if (self.errors_sent is None):
                                self.errors_sent = PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.ErrorsSent()
                                self.errors_sent.parent = self
                                self._children_name_map["errors_sent"] = "errors-sent"
                            return self.errors_sent

                        if (child_yang_name == "input-messages"):
                            if (self.input_messages is None):
                                self.input_messages = PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputMessages()
                                self.input_messages.parent = self
                                self._children_name_map["input_messages"] = "input-messages"
                            return self.input_messages

                        if (child_yang_name == "input-update-messages"):
                            if (self.input_update_messages is None):
                                self.input_update_messages = PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.InputUpdateMessages()
                                self.input_update_messages.parent = self
                                self._children_name_map["input_update_messages"] = "input-update-messages"
                            return self.input_update_messages

                        if (child_yang_name == "output-messages"):
                            if (self.output_messages is None):
                                self.output_messages = PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputMessages()
                                self.output_messages.parent = self
                                self._children_name_map["output_messages"] = "output-messages"
                            return self.output_messages

                        if (child_yang_name == "output-update-messages"):
                            if (self.output_update_messages is None):
                                self.output_update_messages = PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate.OutputUpdateMessages()
                                self.output_update_messages.parent = self
                                self._children_name_map["output_update_messages"] = "output-update-messages"
                            return self.output_update_messages

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "conn-dropped" or name == "conn-established" or name == "errors-received" or name == "errors-sent" or name == "input-messages" or name == "input-update-messages" or name == "output-messages" or name == "output-update-messages" or name == "template-name" or name == "sample-interval"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.bgp_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.bgp_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "bgp-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/bgp/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "bgp-template"):
                        for c in self.bgp_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.Bgp.BgpTemplates.BgpTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.bgp_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "bgp-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.bgp_templates is not None and self.bgp_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.bgp_templates is not None and self.bgp_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "bgp" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "bgp-templates"):
                    if (self.bgp_templates is None):
                        self.bgp_templates = PerfMgmt.Threshold.Bgp.BgpTemplates()
                        self.bgp_templates.parent = self
                        self._children_name_map["bgp_templates"] = "bgp-templates"
                    return self.bgp_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "bgp-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Ospfv2Protocol(Entity):
            """
            OSPF v2 Protocol threshold configuration
            
            .. attribute:: ospfv2_protocol_templates
            
            	OSPF v2 Protocol threshold templates
            	**type**\:   :py:class:`Ospfv2ProtocolTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.Ospfv2Protocol, self).__init__()

                self.yang_name = "ospfv2-protocol"
                self.yang_parent_name = "threshold"

                self.ospfv2_protocol_templates = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates()
                self.ospfv2_protocol_templates.parent = self
                self._children_name_map["ospfv2_protocol_templates"] = "ospfv2-protocol-templates"
                self._children_yang_names.add("ospfv2-protocol-templates")


            class Ospfv2ProtocolTemplates(Entity):
                """
                OSPF v2 Protocol threshold templates
                
                .. attribute:: ospfv2_protocol_template
                
                	OSPF v2 Protocol threshold template instance
                	**type**\: list of    :py:class:`Ospfv2ProtocolTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates, self).__init__()

                    self.yang_name = "ospfv2-protocol-templates"
                    self.yang_parent_name = "ospfv2-protocol"

                    self.ospfv2_protocol_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates, self).__setattr__(name, value)


                class Ospfv2ProtocolTemplate(Entity):
                    """
                    OSPF v2 Protocol threshold template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: checksum_errors
                    
                    	Number of packets received with checksum errors
                    	**type**\:   :py:class:`ChecksumErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.ChecksumErrors>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_db_ds
                    
                    	Number of DBD packets received
                    	**type**\:   :py:class:`InputDbDs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDs>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_db_ds_lsa
                    
                    	Number of LSA received in DBD packets
                    	**type**\:   :py:class:`InputDbDsLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDsLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_hello_packets
                    
                    	Number of Hello packets received
                    	**type**\:   :py:class:`InputHelloPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputHelloPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_ls_requests
                    
                    	Number of LS Requests received
                    	**type**\:   :py:class:`InputLsRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequests>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_ls_requests_lsa
                    
                    	Number of LSA received in LS Requests
                    	**type**\:   :py:class:`InputLsRequestsLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequestsLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_lsa_acks
                    
                    	Number of LSA Acknowledgements received
                    	**type**\:   :py:class:`InputLsaAcks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcks>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_lsa_acks_lsa
                    
                    	Number of LSA received in LSA Acknowledgements
                    	**type**\:   :py:class:`InputLsaAcksLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcksLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_lsa_updates
                    
                    	Number of LSA Updates received
                    	**type**\:   :py:class:`InputLsaUpdates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdates>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_lsa_updates_lsa
                    
                    	Number of LSA received in LSA Updates
                    	**type**\:   :py:class:`InputLsaUpdatesLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdatesLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_packets
                    
                    	Total number of packets received
                    	**type**\:   :py:class:`InputPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_db_ds
                    
                    	Number of DBD packets sent
                    	**type**\:   :py:class:`OutputDbDs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDs>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_db_ds_lsa
                    
                    	Number of LSA sent in DBD packets
                    	**type**\:   :py:class:`OutputDbDsLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDsLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_hello_packets
                    
                    	Total number of packets sent
                    	**type**\:   :py:class:`OutputHelloPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputHelloPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_ls_requests
                    
                    	Number of LS Requests sent
                    	**type**\:   :py:class:`OutputLsRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequests>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_ls_requests_lsa
                    
                    	Number of LSA sent in LS Requests
                    	**type**\:   :py:class:`OutputLsRequestsLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequestsLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_lsa_acks
                    
                    	Number of LSA Acknowledgements sent
                    	**type**\:   :py:class:`OutputLsaAcks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcks>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_lsa_acks_lsa
                    
                    	Number of LSA sent in LSA Acknowledgements
                    	**type**\:   :py:class:`OutputLsaAcksLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcksLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_lsa_updates
                    
                    	Number of LSA Updates sent
                    	**type**\:   :py:class:`OutputLsaUpdates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdates>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_lsa_updates_lsa
                    
                    	Number of LSA sent in LSA Updates
                    	**type**\:   :py:class:`OutputLsaUpdatesLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdatesLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_packets
                    
                    	Total number of packets sent
                    	**type**\:   :py:class:`OutputPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate, self).__init__()

                        self.yang_name = "ospfv2-protocol-template"
                        self.yang_parent_name = "ospfv2-protocol-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.checksum_errors = None
                        self._children_name_map["checksum_errors"] = "checksum-errors"
                        self._children_yang_names.add("checksum-errors")

                        self.input_db_ds = None
                        self._children_name_map["input_db_ds"] = "input-db-ds"
                        self._children_yang_names.add("input-db-ds")

                        self.input_db_ds_lsa = None
                        self._children_name_map["input_db_ds_lsa"] = "input-db-ds-lsa"
                        self._children_yang_names.add("input-db-ds-lsa")

                        self.input_hello_packets = None
                        self._children_name_map["input_hello_packets"] = "input-hello-packets"
                        self._children_yang_names.add("input-hello-packets")

                        self.input_ls_requests = None
                        self._children_name_map["input_ls_requests"] = "input-ls-requests"
                        self._children_yang_names.add("input-ls-requests")

                        self.input_ls_requests_lsa = None
                        self._children_name_map["input_ls_requests_lsa"] = "input-ls-requests-lsa"
                        self._children_yang_names.add("input-ls-requests-lsa")

                        self.input_lsa_acks = None
                        self._children_name_map["input_lsa_acks"] = "input-lsa-acks"
                        self._children_yang_names.add("input-lsa-acks")

                        self.input_lsa_acks_lsa = None
                        self._children_name_map["input_lsa_acks_lsa"] = "input-lsa-acks-lsa"
                        self._children_yang_names.add("input-lsa-acks-lsa")

                        self.input_lsa_updates = None
                        self._children_name_map["input_lsa_updates"] = "input-lsa-updates"
                        self._children_yang_names.add("input-lsa-updates")

                        self.input_lsa_updates_lsa = None
                        self._children_name_map["input_lsa_updates_lsa"] = "input-lsa-updates-lsa"
                        self._children_yang_names.add("input-lsa-updates-lsa")

                        self.input_packets = None
                        self._children_name_map["input_packets"] = "input-packets"
                        self._children_yang_names.add("input-packets")

                        self.output_db_ds = None
                        self._children_name_map["output_db_ds"] = "output-db-ds"
                        self._children_yang_names.add("output-db-ds")

                        self.output_db_ds_lsa = None
                        self._children_name_map["output_db_ds_lsa"] = "output-db-ds-lsa"
                        self._children_yang_names.add("output-db-ds-lsa")

                        self.output_hello_packets = None
                        self._children_name_map["output_hello_packets"] = "output-hello-packets"
                        self._children_yang_names.add("output-hello-packets")

                        self.output_ls_requests = None
                        self._children_name_map["output_ls_requests"] = "output-ls-requests"
                        self._children_yang_names.add("output-ls-requests")

                        self.output_ls_requests_lsa = None
                        self._children_name_map["output_ls_requests_lsa"] = "output-ls-requests-lsa"
                        self._children_yang_names.add("output-ls-requests-lsa")

                        self.output_lsa_acks = None
                        self._children_name_map["output_lsa_acks"] = "output-lsa-acks"
                        self._children_yang_names.add("output-lsa-acks")

                        self.output_lsa_acks_lsa = None
                        self._children_name_map["output_lsa_acks_lsa"] = "output-lsa-acks-lsa"
                        self._children_yang_names.add("output-lsa-acks-lsa")

                        self.output_lsa_updates = None
                        self._children_name_map["output_lsa_updates"] = "output-lsa-updates"
                        self._children_yang_names.add("output-lsa-updates")

                        self.output_lsa_updates_lsa = None
                        self._children_name_map["output_lsa_updates_lsa"] = "output-lsa-updates-lsa"
                        self._children_yang_names.add("output-lsa-updates-lsa")

                        self.output_packets = None
                        self._children_name_map["output_packets"] = "output-packets"
                        self._children_yang_names.add("output-packets")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "sample_interval") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate, self).__setattr__(name, value)


                    class ChecksumErrors(Entity):
                        """
                        Number of packets received with checksum
                        errors
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.ChecksumErrors, self).__init__()

                            self.yang_name = "checksum-errors"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.ChecksumErrors, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.ChecksumErrors, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "checksum-errors" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsaAcksLsa(Entity):
                        """
                        Number of LSA received in LSA Acknowledgements
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcksLsa, self).__init__()

                            self.yang_name = "input-lsa-acks-lsa"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcksLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcksLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-lsa-acks-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputDbDsLsa(Entity):
                        """
                        Number of LSA sent in DBD packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDsLsa, self).__init__()

                            self.yang_name = "output-db-ds-lsa"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDsLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDsLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-db-ds-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputDbDsLsa(Entity):
                        """
                        Number of LSA received in DBD packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDsLsa, self).__init__()

                            self.yang_name = "input-db-ds-lsa"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDsLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDsLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-db-ds-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsaUpdates(Entity):
                        """
                        Number of LSA Updates received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdates, self).__init__()

                            self.yang_name = "input-lsa-updates"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdates, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdates, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-lsa-updates" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputDbDs(Entity):
                        """
                        Number of DBD packets sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDs, self).__init__()

                            self.yang_name = "output-db-ds"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDs, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDs, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-db-ds" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsaUpdatesLsa(Entity):
                        """
                        Number of LSA sent in LSA Updates
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdatesLsa, self).__init__()

                            self.yang_name = "output-lsa-updates-lsa"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdatesLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdatesLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-lsa-updates-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputDbDs(Entity):
                        """
                        Number of DBD packets received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDs, self).__init__()

                            self.yang_name = "input-db-ds"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDs, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDs, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-db-ds" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsaUpdatesLsa(Entity):
                        """
                        Number of LSA received in LSA Updates
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdatesLsa, self).__init__()

                            self.yang_name = "input-lsa-updates-lsa"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdatesLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdatesLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-lsa-updates-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputPackets(Entity):
                        """
                        Total number of packets sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputPackets, self).__init__()

                            self.yang_name = "output-packets"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputPackets(Entity):
                        """
                        Total number of packets received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputPackets, self).__init__()

                            self.yang_name = "input-packets"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputHelloPackets(Entity):
                        """
                        Total number of packets sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputHelloPackets, self).__init__()

                            self.yang_name = "output-hello-packets"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputHelloPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputHelloPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-hello-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputHelloPackets(Entity):
                        """
                        Number of Hello packets received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputHelloPackets, self).__init__()

                            self.yang_name = "input-hello-packets"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputHelloPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputHelloPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-hello-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsRequests(Entity):
                        """
                        Number of LS Requests sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequests, self).__init__()

                            self.yang_name = "output-ls-requests"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequests, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequests, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-ls-requests" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsaAcksLsa(Entity):
                        """
                        Number of LSA sent in LSA Acknowledgements
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcksLsa, self).__init__()

                            self.yang_name = "output-lsa-acks-lsa"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcksLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcksLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-lsa-acks-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsaAcks(Entity):
                        """
                        Number of LSA Acknowledgements sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcks, self).__init__()

                            self.yang_name = "output-lsa-acks"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcks, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcks, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-lsa-acks" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsaAcks(Entity):
                        """
                        Number of LSA Acknowledgements received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcks, self).__init__()

                            self.yang_name = "input-lsa-acks"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcks, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcks, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-lsa-acks" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsaUpdates(Entity):
                        """
                        Number of LSA Updates sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdates, self).__init__()

                            self.yang_name = "output-lsa-updates"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdates, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdates, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-lsa-updates" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsRequestsLsa(Entity):
                        """
                        Number of LSA sent in LS Requests
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequestsLsa, self).__init__()

                            self.yang_name = "output-ls-requests-lsa"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequestsLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequestsLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-ls-requests-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsRequestsLsa(Entity):
                        """
                        Number of LSA received in LS Requests
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequestsLsa, self).__init__()

                            self.yang_name = "input-ls-requests-lsa"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequestsLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequestsLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-ls-requests-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsRequests(Entity):
                        """
                        Number of LS Requests received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequests, self).__init__()

                            self.yang_name = "input-ls-requests"
                            self.yang_parent_name = "ospfv2-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequests, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequests, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-ls-requests" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.sample_interval.is_set or
                            (self.checksum_errors is not None) or
                            (self.input_db_ds is not None) or
                            (self.input_db_ds_lsa is not None) or
                            (self.input_hello_packets is not None) or
                            (self.input_ls_requests is not None) or
                            (self.input_ls_requests_lsa is not None) or
                            (self.input_lsa_acks is not None) or
                            (self.input_lsa_acks_lsa is not None) or
                            (self.input_lsa_updates is not None) or
                            (self.input_lsa_updates_lsa is not None) or
                            (self.input_packets is not None) or
                            (self.output_db_ds is not None) or
                            (self.output_db_ds_lsa is not None) or
                            (self.output_hello_packets is not None) or
                            (self.output_ls_requests is not None) or
                            (self.output_ls_requests_lsa is not None) or
                            (self.output_lsa_acks is not None) or
                            (self.output_lsa_acks_lsa is not None) or
                            (self.output_lsa_updates is not None) or
                            (self.output_lsa_updates_lsa is not None) or
                            (self.output_packets is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            (self.checksum_errors is not None and self.checksum_errors.has_operation()) or
                            (self.input_db_ds is not None and self.input_db_ds.has_operation()) or
                            (self.input_db_ds_lsa is not None and self.input_db_ds_lsa.has_operation()) or
                            (self.input_hello_packets is not None and self.input_hello_packets.has_operation()) or
                            (self.input_ls_requests is not None and self.input_ls_requests.has_operation()) or
                            (self.input_ls_requests_lsa is not None and self.input_ls_requests_lsa.has_operation()) or
                            (self.input_lsa_acks is not None and self.input_lsa_acks.has_operation()) or
                            (self.input_lsa_acks_lsa is not None and self.input_lsa_acks_lsa.has_operation()) or
                            (self.input_lsa_updates is not None and self.input_lsa_updates.has_operation()) or
                            (self.input_lsa_updates_lsa is not None and self.input_lsa_updates_lsa.has_operation()) or
                            (self.input_packets is not None and self.input_packets.has_operation()) or
                            (self.output_db_ds is not None and self.output_db_ds.has_operation()) or
                            (self.output_db_ds_lsa is not None and self.output_db_ds_lsa.has_operation()) or
                            (self.output_hello_packets is not None and self.output_hello_packets.has_operation()) or
                            (self.output_ls_requests is not None and self.output_ls_requests.has_operation()) or
                            (self.output_ls_requests_lsa is not None and self.output_ls_requests_lsa.has_operation()) or
                            (self.output_lsa_acks is not None and self.output_lsa_acks.has_operation()) or
                            (self.output_lsa_acks_lsa is not None and self.output_lsa_acks_lsa.has_operation()) or
                            (self.output_lsa_updates is not None and self.output_lsa_updates.has_operation()) or
                            (self.output_lsa_updates_lsa is not None and self.output_lsa_updates_lsa.has_operation()) or
                            (self.output_packets is not None and self.output_packets.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "ospfv2-protocol-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ospfv2-protocol/ospfv2-protocol-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "checksum-errors"):
                            if (self.checksum_errors is None):
                                self.checksum_errors = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.ChecksumErrors()
                                self.checksum_errors.parent = self
                                self._children_name_map["checksum_errors"] = "checksum-errors"
                            return self.checksum_errors

                        if (child_yang_name == "input-db-ds"):
                            if (self.input_db_ds is None):
                                self.input_db_ds = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDs()
                                self.input_db_ds.parent = self
                                self._children_name_map["input_db_ds"] = "input-db-ds"
                            return self.input_db_ds

                        if (child_yang_name == "input-db-ds-lsa"):
                            if (self.input_db_ds_lsa is None):
                                self.input_db_ds_lsa = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputDbDsLsa()
                                self.input_db_ds_lsa.parent = self
                                self._children_name_map["input_db_ds_lsa"] = "input-db-ds-lsa"
                            return self.input_db_ds_lsa

                        if (child_yang_name == "input-hello-packets"):
                            if (self.input_hello_packets is None):
                                self.input_hello_packets = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputHelloPackets()
                                self.input_hello_packets.parent = self
                                self._children_name_map["input_hello_packets"] = "input-hello-packets"
                            return self.input_hello_packets

                        if (child_yang_name == "input-ls-requests"):
                            if (self.input_ls_requests is None):
                                self.input_ls_requests = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequests()
                                self.input_ls_requests.parent = self
                                self._children_name_map["input_ls_requests"] = "input-ls-requests"
                            return self.input_ls_requests

                        if (child_yang_name == "input-ls-requests-lsa"):
                            if (self.input_ls_requests_lsa is None):
                                self.input_ls_requests_lsa = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsRequestsLsa()
                                self.input_ls_requests_lsa.parent = self
                                self._children_name_map["input_ls_requests_lsa"] = "input-ls-requests-lsa"
                            return self.input_ls_requests_lsa

                        if (child_yang_name == "input-lsa-acks"):
                            if (self.input_lsa_acks is None):
                                self.input_lsa_acks = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcks()
                                self.input_lsa_acks.parent = self
                                self._children_name_map["input_lsa_acks"] = "input-lsa-acks"
                            return self.input_lsa_acks

                        if (child_yang_name == "input-lsa-acks-lsa"):
                            if (self.input_lsa_acks_lsa is None):
                                self.input_lsa_acks_lsa = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaAcksLsa()
                                self.input_lsa_acks_lsa.parent = self
                                self._children_name_map["input_lsa_acks_lsa"] = "input-lsa-acks-lsa"
                            return self.input_lsa_acks_lsa

                        if (child_yang_name == "input-lsa-updates"):
                            if (self.input_lsa_updates is None):
                                self.input_lsa_updates = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdates()
                                self.input_lsa_updates.parent = self
                                self._children_name_map["input_lsa_updates"] = "input-lsa-updates"
                            return self.input_lsa_updates

                        if (child_yang_name == "input-lsa-updates-lsa"):
                            if (self.input_lsa_updates_lsa is None):
                                self.input_lsa_updates_lsa = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputLsaUpdatesLsa()
                                self.input_lsa_updates_lsa.parent = self
                                self._children_name_map["input_lsa_updates_lsa"] = "input-lsa-updates-lsa"
                            return self.input_lsa_updates_lsa

                        if (child_yang_name == "input-packets"):
                            if (self.input_packets is None):
                                self.input_packets = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.InputPackets()
                                self.input_packets.parent = self
                                self._children_name_map["input_packets"] = "input-packets"
                            return self.input_packets

                        if (child_yang_name == "output-db-ds"):
                            if (self.output_db_ds is None):
                                self.output_db_ds = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDs()
                                self.output_db_ds.parent = self
                                self._children_name_map["output_db_ds"] = "output-db-ds"
                            return self.output_db_ds

                        if (child_yang_name == "output-db-ds-lsa"):
                            if (self.output_db_ds_lsa is None):
                                self.output_db_ds_lsa = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputDbDsLsa()
                                self.output_db_ds_lsa.parent = self
                                self._children_name_map["output_db_ds_lsa"] = "output-db-ds-lsa"
                            return self.output_db_ds_lsa

                        if (child_yang_name == "output-hello-packets"):
                            if (self.output_hello_packets is None):
                                self.output_hello_packets = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputHelloPackets()
                                self.output_hello_packets.parent = self
                                self._children_name_map["output_hello_packets"] = "output-hello-packets"
                            return self.output_hello_packets

                        if (child_yang_name == "output-ls-requests"):
                            if (self.output_ls_requests is None):
                                self.output_ls_requests = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequests()
                                self.output_ls_requests.parent = self
                                self._children_name_map["output_ls_requests"] = "output-ls-requests"
                            return self.output_ls_requests

                        if (child_yang_name == "output-ls-requests-lsa"):
                            if (self.output_ls_requests_lsa is None):
                                self.output_ls_requests_lsa = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsRequestsLsa()
                                self.output_ls_requests_lsa.parent = self
                                self._children_name_map["output_ls_requests_lsa"] = "output-ls-requests-lsa"
                            return self.output_ls_requests_lsa

                        if (child_yang_name == "output-lsa-acks"):
                            if (self.output_lsa_acks is None):
                                self.output_lsa_acks = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcks()
                                self.output_lsa_acks.parent = self
                                self._children_name_map["output_lsa_acks"] = "output-lsa-acks"
                            return self.output_lsa_acks

                        if (child_yang_name == "output-lsa-acks-lsa"):
                            if (self.output_lsa_acks_lsa is None):
                                self.output_lsa_acks_lsa = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaAcksLsa()
                                self.output_lsa_acks_lsa.parent = self
                                self._children_name_map["output_lsa_acks_lsa"] = "output-lsa-acks-lsa"
                            return self.output_lsa_acks_lsa

                        if (child_yang_name == "output-lsa-updates"):
                            if (self.output_lsa_updates is None):
                                self.output_lsa_updates = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdates()
                                self.output_lsa_updates.parent = self
                                self._children_name_map["output_lsa_updates"] = "output-lsa-updates"
                            return self.output_lsa_updates

                        if (child_yang_name == "output-lsa-updates-lsa"):
                            if (self.output_lsa_updates_lsa is None):
                                self.output_lsa_updates_lsa = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputLsaUpdatesLsa()
                                self.output_lsa_updates_lsa.parent = self
                                self._children_name_map["output_lsa_updates_lsa"] = "output-lsa-updates-lsa"
                            return self.output_lsa_updates_lsa

                        if (child_yang_name == "output-packets"):
                            if (self.output_packets is None):
                                self.output_packets = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate.OutputPackets()
                                self.output_packets.parent = self
                                self._children_name_map["output_packets"] = "output-packets"
                            return self.output_packets

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "checksum-errors" or name == "input-db-ds" or name == "input-db-ds-lsa" or name == "input-hello-packets" or name == "input-ls-requests" or name == "input-ls-requests-lsa" or name == "input-lsa-acks" or name == "input-lsa-acks-lsa" or name == "input-lsa-updates" or name == "input-lsa-updates-lsa" or name == "input-packets" or name == "output-db-ds" or name == "output-db-ds-lsa" or name == "output-hello-packets" or name == "output-ls-requests" or name == "output-ls-requests-lsa" or name == "output-lsa-acks" or name == "output-lsa-acks-lsa" or name == "output-lsa-updates" or name == "output-lsa-updates-lsa" or name == "output-packets" or name == "template-name" or name == "sample-interval"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.ospfv2_protocol_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.ospfv2_protocol_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ospfv2-protocol-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ospfv2-protocol/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "ospfv2-protocol-template"):
                        for c in self.ospfv2_protocol_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates.Ospfv2ProtocolTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.ospfv2_protocol_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "ospfv2-protocol-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.ospfv2_protocol_templates is not None and self.ospfv2_protocol_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.ospfv2_protocol_templates is not None and self.ospfv2_protocol_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "ospfv2-protocol" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "ospfv2-protocol-templates"):
                    if (self.ospfv2_protocol_templates is None):
                        self.ospfv2_protocol_templates = PerfMgmt.Threshold.Ospfv2Protocol.Ospfv2ProtocolTemplates()
                        self.ospfv2_protocol_templates.parent = self
                        self._children_name_map["ospfv2_protocol_templates"] = "ospfv2-protocol-templates"
                    return self.ospfv2_protocol_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "ospfv2-protocol-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class CpuNode(Entity):
            """
            Node CPU threshold configuration
            
            .. attribute:: cpu_node_templates
            
            	Node CPU threshold configuration templates
            	**type**\:   :py:class:`CpuNodeTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.CpuNode.CpuNodeTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.CpuNode, self).__init__()

                self.yang_name = "cpu-node"
                self.yang_parent_name = "threshold"

                self.cpu_node_templates = PerfMgmt.Threshold.CpuNode.CpuNodeTemplates()
                self.cpu_node_templates.parent = self
                self._children_name_map["cpu_node_templates"] = "cpu-node-templates"
                self._children_yang_names.add("cpu-node-templates")


            class CpuNodeTemplates(Entity):
                """
                Node CPU threshold configuration templates
                
                .. attribute:: cpu_node_template
                
                	Node CPU threshold configuration template instances
                	**type**\: list of    :py:class:`CpuNodeTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates, self).__init__()

                    self.yang_name = "cpu-node-templates"
                    self.yang_parent_name = "cpu-node"

                    self.cpu_node_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates, self).__setattr__(name, value)


                class CpuNodeTemplate(Entity):
                    """
                    Node CPU threshold configuration template
                    instances
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: average_cpu_used
                    
                    	Average %CPU utilization
                    	**type**\:   :py:class:`AverageCpuUsed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.AverageCpuUsed>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: no_processes
                    
                    	Number of processes
                    	**type**\:   :py:class:`NoProcesses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.NoProcesses>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate, self).__init__()

                        self.yang_name = "cpu-node-template"
                        self.yang_parent_name = "cpu-node-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.average_cpu_used = None
                        self._children_name_map["average_cpu_used"] = "average-cpu-used"
                        self._children_yang_names.add("average-cpu-used")

                        self.no_processes = None
                        self._children_name_map["no_processes"] = "no-processes"
                        self._children_yang_names.add("no-processes")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "sample_interval") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate, self).__setattr__(name, value)


                    class AverageCpuUsed(Entity):
                        """
                        Average %CPU utilization
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..100
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..100
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.AverageCpuUsed, self).__init__()

                            self.yang_name = "average-cpu-used"
                            self.yang_parent_name = "cpu-node-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.AverageCpuUsed, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.AverageCpuUsed, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "average-cpu-used" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class NoProcesses(Entity):
                        """
                        Number of processes
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.NoProcesses, self).__init__()

                            self.yang_name = "no-processes"
                            self.yang_parent_name = "cpu-node-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.NoProcesses, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.NoProcesses, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "no-processes" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.sample_interval.is_set or
                            (self.average_cpu_used is not None) or
                            (self.no_processes is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            (self.average_cpu_used is not None and self.average_cpu_used.has_operation()) or
                            (self.no_processes is not None and self.no_processes.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "cpu-node-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/cpu-node/cpu-node-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "average-cpu-used"):
                            if (self.average_cpu_used is None):
                                self.average_cpu_used = PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.AverageCpuUsed()
                                self.average_cpu_used.parent = self
                                self._children_name_map["average_cpu_used"] = "average-cpu-used"
                            return self.average_cpu_used

                        if (child_yang_name == "no-processes"):
                            if (self.no_processes is None):
                                self.no_processes = PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate.NoProcesses()
                                self.no_processes.parent = self
                                self._children_name_map["no_processes"] = "no-processes"
                            return self.no_processes

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "average-cpu-used" or name == "no-processes" or name == "template-name" or name == "sample-interval"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.cpu_node_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.cpu_node_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "cpu-node-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/cpu-node/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "cpu-node-template"):
                        for c in self.cpu_node_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.CpuNode.CpuNodeTemplates.CpuNodeTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.cpu_node_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "cpu-node-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.cpu_node_templates is not None and self.cpu_node_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.cpu_node_templates is not None and self.cpu_node_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "cpu-node" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "cpu-node-templates"):
                    if (self.cpu_node_templates is None):
                        self.cpu_node_templates = PerfMgmt.Threshold.CpuNode.CpuNodeTemplates()
                        self.cpu_node_templates.parent = self
                        self._children_name_map["cpu_node_templates"] = "cpu-node-templates"
                    return self.cpu_node_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "cpu-node-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class DataRateInterface(Entity):
            """
            Interface Data Rates threshold configuration
            
            .. attribute:: data_rate_interface_templates
            
            	Interface Data Rates threshold templates
            	**type**\:   :py:class:`DataRateInterfaceTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.DataRateInterface, self).__init__()

                self.yang_name = "data-rate-interface"
                self.yang_parent_name = "threshold"

                self.data_rate_interface_templates = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates()
                self.data_rate_interface_templates.parent = self
                self._children_name_map["data_rate_interface_templates"] = "data-rate-interface-templates"
                self._children_yang_names.add("data-rate-interface-templates")


            class DataRateInterfaceTemplates(Entity):
                """
                Interface Data Rates threshold templates
                
                .. attribute:: data_rate_interface_template
                
                	Interface Data Rates threshold template instance
                	**type**\: list of    :py:class:`DataRateInterfaceTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates, self).__init__()

                    self.yang_name = "data-rate-interface-templates"
                    self.yang_parent_name = "data-rate-interface"

                    self.data_rate_interface_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates, self).__setattr__(name, value)


                class DataRateInterfaceTemplate(Entity):
                    """
                    Interface Data Rates threshold template
                    instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: bandwidth
                    
                    	Bandwidth in kbps
                    	**type**\:   :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.Bandwidth>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_data_rate
                    
                    	Input data rate in kbps
                    	**type**\:   :py:class:`InputDataRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputDataRate>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_packet_rate
                    
                    	Number of input packets per second
                    	**type**\:   :py:class:`InputPacketRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPacketRate>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_peak_pkts
                    
                    	Maximum number of input packets per second
                    	**type**\:   :py:class:`InputPeakPkts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakPkts>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_peak_rate
                    
                    	Peak input data rate in kbps
                    	**type**\:   :py:class:`InputPeakRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakRate>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_data_rate
                    
                    	Output data rate in kbps
                    	**type**\:   :py:class:`OutputDataRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputDataRate>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_packet_rate
                    
                    	Number of Output packets per second
                    	**type**\:   :py:class:`OutputPacketRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPacketRate>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_peak_pkts
                    
                    	Maximum number of output packets per second
                    	**type**\:   :py:class:`OutputPeakPkts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakPkts>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_peak_rate
                    
                    	Peak output data rate in kbps
                    	**type**\:   :py:class:`OutputPeakRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakRate>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: reg_exp_group
                    
                    	Enable instance filtering by regular expression
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    .. attribute:: vrf_group
                    
                    	Enable instance filtering by VRF name regular expression 
                    	**type**\:  str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate, self).__init__()

                        self.yang_name = "data-rate-interface-template"
                        self.yang_parent_name = "data-rate-interface-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.reg_exp_group = YLeaf(YType.str, "reg-exp-group")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.vrf_group = YLeaf(YType.str, "vrf-group")

                        self.bandwidth = None
                        self._children_name_map["bandwidth"] = "bandwidth"
                        self._children_yang_names.add("bandwidth")

                        self.input_data_rate = None
                        self._children_name_map["input_data_rate"] = "input-data-rate"
                        self._children_yang_names.add("input-data-rate")

                        self.input_packet_rate = None
                        self._children_name_map["input_packet_rate"] = "input-packet-rate"
                        self._children_yang_names.add("input-packet-rate")

                        self.input_peak_pkts = None
                        self._children_name_map["input_peak_pkts"] = "input-peak-pkts"
                        self._children_yang_names.add("input-peak-pkts")

                        self.input_peak_rate = None
                        self._children_name_map["input_peak_rate"] = "input-peak-rate"
                        self._children_yang_names.add("input-peak-rate")

                        self.output_data_rate = None
                        self._children_name_map["output_data_rate"] = "output-data-rate"
                        self._children_yang_names.add("output-data-rate")

                        self.output_packet_rate = None
                        self._children_name_map["output_packet_rate"] = "output-packet-rate"
                        self._children_yang_names.add("output-packet-rate")

                        self.output_peak_pkts = None
                        self._children_name_map["output_peak_pkts"] = "output-peak-pkts"
                        self._children_yang_names.add("output-peak-pkts")

                        self.output_peak_rate = None
                        self._children_name_map["output_peak_rate"] = "output-peak-rate"
                        self._children_yang_names.add("output-peak-rate")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "reg_exp_group",
                                        "sample_interval",
                                        "vrf_group") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate, self).__setattr__(name, value)


                    class InputDataRate(Entity):
                        """
                        Input data rate in kbps
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputDataRate, self).__init__()

                            self.yang_name = "input-data-rate"
                            self.yang_parent_name = "data-rate-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputDataRate, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputDataRate, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-data-rate" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class Bandwidth(Entity):
                        """
                        Bandwidth in kbps
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.Bandwidth, self).__init__()

                            self.yang_name = "bandwidth"
                            self.yang_parent_name = "data-rate-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.Bandwidth, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.Bandwidth, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "bandwidth" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputPacketRate(Entity):
                        """
                        Number of Output packets per second
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPacketRate, self).__init__()

                            self.yang_name = "output-packet-rate"
                            self.yang_parent_name = "data-rate-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPacketRate, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPacketRate, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-packet-rate" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputPeakPkts(Entity):
                        """
                        Maximum number of input packets per second
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakPkts, self).__init__()

                            self.yang_name = "input-peak-pkts"
                            self.yang_parent_name = "data-rate-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakPkts, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakPkts, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-peak-pkts" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputPeakRate(Entity):
                        """
                        Peak output data rate in kbps
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakRate, self).__init__()

                            self.yang_name = "output-peak-rate"
                            self.yang_parent_name = "data-rate-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakRate, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakRate, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-peak-rate" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputDataRate(Entity):
                        """
                        Output data rate in kbps
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputDataRate, self).__init__()

                            self.yang_name = "output-data-rate"
                            self.yang_parent_name = "data-rate-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputDataRate, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputDataRate, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-data-rate" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputPacketRate(Entity):
                        """
                        Number of input packets per second
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPacketRate, self).__init__()

                            self.yang_name = "input-packet-rate"
                            self.yang_parent_name = "data-rate-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPacketRate, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPacketRate, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-packet-rate" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputPeakPkts(Entity):
                        """
                        Maximum number of output packets per second
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakPkts, self).__init__()

                            self.yang_name = "output-peak-pkts"
                            self.yang_parent_name = "data-rate-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakPkts, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakPkts, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-peak-pkts" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputPeakRate(Entity):
                        """
                        Peak input data rate in kbps
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakRate, self).__init__()

                            self.yang_name = "input-peak-rate"
                            self.yang_parent_name = "data-rate-interface-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakRate, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakRate, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-peak-rate" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.reg_exp_group.is_set or
                            self.sample_interval.is_set or
                            self.vrf_group.is_set or
                            (self.bandwidth is not None) or
                            (self.input_data_rate is not None) or
                            (self.input_packet_rate is not None) or
                            (self.input_peak_pkts is not None) or
                            (self.input_peak_rate is not None) or
                            (self.output_data_rate is not None) or
                            (self.output_packet_rate is not None) or
                            (self.output_peak_pkts is not None) or
                            (self.output_peak_rate is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.reg_exp_group.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            self.vrf_group.yfilter != YFilter.not_set or
                            (self.bandwidth is not None and self.bandwidth.has_operation()) or
                            (self.input_data_rate is not None and self.input_data_rate.has_operation()) or
                            (self.input_packet_rate is not None and self.input_packet_rate.has_operation()) or
                            (self.input_peak_pkts is not None and self.input_peak_pkts.has_operation()) or
                            (self.input_peak_rate is not None and self.input_peak_rate.has_operation()) or
                            (self.output_data_rate is not None and self.output_data_rate.has_operation()) or
                            (self.output_packet_rate is not None and self.output_packet_rate.has_operation()) or
                            (self.output_peak_pkts is not None and self.output_peak_pkts.has_operation()) or
                            (self.output_peak_rate is not None and self.output_peak_rate.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "data-rate-interface-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/data-rate-interface/data-rate-interface-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.reg_exp_group.is_set or self.reg_exp_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.reg_exp_group.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())
                        if (self.vrf_group.is_set or self.vrf_group.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_group.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "bandwidth"):
                            if (self.bandwidth is None):
                                self.bandwidth = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.Bandwidth()
                                self.bandwidth.parent = self
                                self._children_name_map["bandwidth"] = "bandwidth"
                            return self.bandwidth

                        if (child_yang_name == "input-data-rate"):
                            if (self.input_data_rate is None):
                                self.input_data_rate = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputDataRate()
                                self.input_data_rate.parent = self
                                self._children_name_map["input_data_rate"] = "input-data-rate"
                            return self.input_data_rate

                        if (child_yang_name == "input-packet-rate"):
                            if (self.input_packet_rate is None):
                                self.input_packet_rate = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPacketRate()
                                self.input_packet_rate.parent = self
                                self._children_name_map["input_packet_rate"] = "input-packet-rate"
                            return self.input_packet_rate

                        if (child_yang_name == "input-peak-pkts"):
                            if (self.input_peak_pkts is None):
                                self.input_peak_pkts = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakPkts()
                                self.input_peak_pkts.parent = self
                                self._children_name_map["input_peak_pkts"] = "input-peak-pkts"
                            return self.input_peak_pkts

                        if (child_yang_name == "input-peak-rate"):
                            if (self.input_peak_rate is None):
                                self.input_peak_rate = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.InputPeakRate()
                                self.input_peak_rate.parent = self
                                self._children_name_map["input_peak_rate"] = "input-peak-rate"
                            return self.input_peak_rate

                        if (child_yang_name == "output-data-rate"):
                            if (self.output_data_rate is None):
                                self.output_data_rate = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputDataRate()
                                self.output_data_rate.parent = self
                                self._children_name_map["output_data_rate"] = "output-data-rate"
                            return self.output_data_rate

                        if (child_yang_name == "output-packet-rate"):
                            if (self.output_packet_rate is None):
                                self.output_packet_rate = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPacketRate()
                                self.output_packet_rate.parent = self
                                self._children_name_map["output_packet_rate"] = "output-packet-rate"
                            return self.output_packet_rate

                        if (child_yang_name == "output-peak-pkts"):
                            if (self.output_peak_pkts is None):
                                self.output_peak_pkts = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakPkts()
                                self.output_peak_pkts.parent = self
                                self._children_name_map["output_peak_pkts"] = "output-peak-pkts"
                            return self.output_peak_pkts

                        if (child_yang_name == "output-peak-rate"):
                            if (self.output_peak_rate is None):
                                self.output_peak_rate = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate.OutputPeakRate()
                                self.output_peak_rate.parent = self
                                self._children_name_map["output_peak_rate"] = "output-peak-rate"
                            return self.output_peak_rate

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "bandwidth" or name == "input-data-rate" or name == "input-packet-rate" or name == "input-peak-pkts" or name == "input-peak-rate" or name == "output-data-rate" or name == "output-packet-rate" or name == "output-peak-pkts" or name == "output-peak-rate" or name == "template-name" or name == "reg-exp-group" or name == "sample-interval" or name == "vrf-group"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "reg-exp-group"):
                            self.reg_exp_group = value
                            self.reg_exp_group.value_namespace = name_space
                            self.reg_exp_group.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-group"):
                            self.vrf_group = value
                            self.vrf_group.value_namespace = name_space
                            self.vrf_group.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.data_rate_interface_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.data_rate_interface_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "data-rate-interface-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/data-rate-interface/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "data-rate-interface-template"):
                        for c in self.data_rate_interface_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates.DataRateInterfaceTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.data_rate_interface_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "data-rate-interface-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.data_rate_interface_templates is not None and self.data_rate_interface_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.data_rate_interface_templates is not None and self.data_rate_interface_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "data-rate-interface" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "data-rate-interface-templates"):
                    if (self.data_rate_interface_templates is None):
                        self.data_rate_interface_templates = PerfMgmt.Threshold.DataRateInterface.DataRateInterfaceTemplates()
                        self.data_rate_interface_templates.parent = self
                        self._children_name_map["data_rate_interface_templates"] = "data-rate-interface-templates"
                    return self.data_rate_interface_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "data-rate-interface-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class ProcessNode(Entity):
            """
            Node Process threshold configuration
            
            .. attribute:: process_node_templates
            
            	Node Memory threshold templates
            	**type**\:   :py:class:`ProcessNodeTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.ProcessNode, self).__init__()

                self.yang_name = "process-node"
                self.yang_parent_name = "threshold"

                self.process_node_templates = PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates()
                self.process_node_templates.parent = self
                self._children_name_map["process_node_templates"] = "process-node-templates"
                self._children_yang_names.add("process-node-templates")


            class ProcessNodeTemplates(Entity):
                """
                Node Memory threshold templates
                
                .. attribute:: process_node_template
                
                	Node Memory threshold template instance
                	**type**\: list of    :py:class:`ProcessNodeTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates, self).__init__()

                    self.yang_name = "process-node-templates"
                    self.yang_parent_name = "process-node"

                    self.process_node_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates, self).__setattr__(name, value)


                class ProcessNodeTemplate(Entity):
                    """
                    Node Memory threshold template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: average_cpu_used
                    
                    	Average %CPU utilization
                    	**type**\:   :py:class:`AverageCpuUsed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.AverageCpuUsed>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: no_threads
                    
                    	Number of threads
                    	**type**\:   :py:class:`NoThreads <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.NoThreads>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: peak_memory
                    
                    	Max memory (KBytes) used since startup time
                    	**type**\:   :py:class:`PeakMemory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.PeakMemory>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate, self).__init__()

                        self.yang_name = "process-node-template"
                        self.yang_parent_name = "process-node-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.average_cpu_used = None
                        self._children_name_map["average_cpu_used"] = "average-cpu-used"
                        self._children_yang_names.add("average-cpu-used")

                        self.no_threads = None
                        self._children_name_map["no_threads"] = "no-threads"
                        self._children_yang_names.add("no-threads")

                        self.peak_memory = None
                        self._children_name_map["peak_memory"] = "peak-memory"
                        self._children_yang_names.add("peak-memory")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "sample_interval") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate, self).__setattr__(name, value)


                    class AverageCpuUsed(Entity):
                        """
                        Average %CPU utilization
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..100
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..100
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.AverageCpuUsed, self).__init__()

                            self.yang_name = "average-cpu-used"
                            self.yang_parent_name = "process-node-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.AverageCpuUsed, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.AverageCpuUsed, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "average-cpu-used" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class PeakMemory(Entity):
                        """
                        Max memory (KBytes) used since startup time
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.PeakMemory, self).__init__()

                            self.yang_name = "peak-memory"
                            self.yang_parent_name = "process-node-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.PeakMemory, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.PeakMemory, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "peak-memory" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class NoThreads(Entity):
                        """
                        Number of threads
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..32767
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..32767
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.NoThreads, self).__init__()

                            self.yang_name = "no-threads"
                            self.yang_parent_name = "process-node-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.NoThreads, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.NoThreads, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "no-threads" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.sample_interval.is_set or
                            (self.average_cpu_used is not None) or
                            (self.no_threads is not None) or
                            (self.peak_memory is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            (self.average_cpu_used is not None and self.average_cpu_used.has_operation()) or
                            (self.no_threads is not None and self.no_threads.has_operation()) or
                            (self.peak_memory is not None and self.peak_memory.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "process-node-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/process-node/process-node-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "average-cpu-used"):
                            if (self.average_cpu_used is None):
                                self.average_cpu_used = PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.AverageCpuUsed()
                                self.average_cpu_used.parent = self
                                self._children_name_map["average_cpu_used"] = "average-cpu-used"
                            return self.average_cpu_used

                        if (child_yang_name == "no-threads"):
                            if (self.no_threads is None):
                                self.no_threads = PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.NoThreads()
                                self.no_threads.parent = self
                                self._children_name_map["no_threads"] = "no-threads"
                            return self.no_threads

                        if (child_yang_name == "peak-memory"):
                            if (self.peak_memory is None):
                                self.peak_memory = PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate.PeakMemory()
                                self.peak_memory.parent = self
                                self._children_name_map["peak_memory"] = "peak-memory"
                            return self.peak_memory

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "average-cpu-used" or name == "no-threads" or name == "peak-memory" or name == "template-name" or name == "sample-interval"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.process_node_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.process_node_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "process-node-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/process-node/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "process-node-template"):
                        for c in self.process_node_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates.ProcessNodeTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.process_node_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "process-node-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.process_node_templates is not None and self.process_node_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.process_node_templates is not None and self.process_node_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "process-node" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "process-node-templates"):
                    if (self.process_node_templates is None):
                        self.process_node_templates = PerfMgmt.Threshold.ProcessNode.ProcessNodeTemplates()
                        self.process_node_templates.parent = self
                        self._children_name_map["process_node_templates"] = "process-node-templates"
                    return self.process_node_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "process-node-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class MemoryNode(Entity):
            """
            Node Memory threshold configuration
            
            .. attribute:: memory_node_templates
            
            	Node Memory threshold configuration templates
            	**type**\:   :py:class:`MemoryNodeTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.MemoryNode, self).__init__()

                self.yang_name = "memory-node"
                self.yang_parent_name = "threshold"

                self.memory_node_templates = PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates()
                self.memory_node_templates.parent = self
                self._children_name_map["memory_node_templates"] = "memory-node-templates"
                self._children_yang_names.add("memory-node-templates")


            class MemoryNodeTemplates(Entity):
                """
                Node Memory threshold configuration templates
                
                .. attribute:: memory_node_template
                
                	Node Memory threshold configuration template instance
                	**type**\: list of    :py:class:`MemoryNodeTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates, self).__init__()

                    self.yang_name = "memory-node-templates"
                    self.yang_parent_name = "memory-node"

                    self.memory_node_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates, self).__setattr__(name, value)


                class MemoryNodeTemplate(Entity):
                    """
                    Node Memory threshold configuration template
                    instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: curr_memory
                    
                    	Current memory (Bytes) in use
                    	**type**\:   :py:class:`CurrMemory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.CurrMemory>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: peak_memory
                    
                    	Maximum memory (KBytes) used
                    	**type**\:   :py:class:`PeakMemory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.PeakMemory>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate, self).__init__()

                        self.yang_name = "memory-node-template"
                        self.yang_parent_name = "memory-node-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.curr_memory = None
                        self._children_name_map["curr_memory"] = "curr-memory"
                        self._children_yang_names.add("curr-memory")

                        self.peak_memory = None
                        self._children_name_map["peak_memory"] = "peak-memory"
                        self._children_yang_names.add("peak-memory")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "sample_interval") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate, self).__setattr__(name, value)


                    class PeakMemory(Entity):
                        """
                        Maximum memory (KBytes) used
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4194304
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4194304
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.PeakMemory, self).__init__()

                            self.yang_name = "peak-memory"
                            self.yang_parent_name = "memory-node-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.PeakMemory, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.PeakMemory, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "peak-memory" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class CurrMemory(Entity):
                        """
                        Current memory (Bytes) in use
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.CurrMemory, self).__init__()

                            self.yang_name = "curr-memory"
                            self.yang_parent_name = "memory-node-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.int32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.int32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.CurrMemory, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.CurrMemory, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "curr-memory" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.sample_interval.is_set or
                            (self.curr_memory is not None) or
                            (self.peak_memory is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            (self.curr_memory is not None and self.curr_memory.has_operation()) or
                            (self.peak_memory is not None and self.peak_memory.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "memory-node-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/memory-node/memory-node-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "curr-memory"):
                            if (self.curr_memory is None):
                                self.curr_memory = PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.CurrMemory()
                                self.curr_memory.parent = self
                                self._children_name_map["curr_memory"] = "curr-memory"
                            return self.curr_memory

                        if (child_yang_name == "peak-memory"):
                            if (self.peak_memory is None):
                                self.peak_memory = PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate.PeakMemory()
                                self.peak_memory.parent = self
                                self._children_name_map["peak_memory"] = "peak-memory"
                            return self.peak_memory

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "curr-memory" or name == "peak-memory" or name == "template-name" or name == "sample-interval"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.memory_node_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.memory_node_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "memory-node-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/memory-node/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "memory-node-template"):
                        for c in self.memory_node_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates.MemoryNodeTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.memory_node_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "memory-node-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.memory_node_templates is not None and self.memory_node_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.memory_node_templates is not None and self.memory_node_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "memory-node" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "memory-node-templates"):
                    if (self.memory_node_templates is None):
                        self.memory_node_templates = PerfMgmt.Threshold.MemoryNode.MemoryNodeTemplates()
                        self.memory_node_templates.parent = self
                        self._children_name_map["memory_node_templates"] = "memory-node-templates"
                    return self.memory_node_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "memory-node-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Ospfv3Protocol(Entity):
            """
            OSPF v2 Protocol threshold configuration
            
            .. attribute:: ospfv3_protocol_templates
            
            	OSPF v2 Protocol threshold templates
            	**type**\:   :py:class:`Ospfv3ProtocolTemplates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates>`
            
            

            """

            _prefix = 'manageability-perfmgmt-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(PerfMgmt.Threshold.Ospfv3Protocol, self).__init__()

                self.yang_name = "ospfv3-protocol"
                self.yang_parent_name = "threshold"

                self.ospfv3_protocol_templates = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates()
                self.ospfv3_protocol_templates.parent = self
                self._children_name_map["ospfv3_protocol_templates"] = "ospfv3-protocol-templates"
                self._children_yang_names.add("ospfv3-protocol-templates")


            class Ospfv3ProtocolTemplates(Entity):
                """
                OSPF v2 Protocol threshold templates
                
                .. attribute:: ospfv3_protocol_template
                
                	OSPF v2 Protocol threshold template instance
                	**type**\: list of    :py:class:`Ospfv3ProtocolTemplate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate>`
                
                

                """

                _prefix = 'manageability-perfmgmt-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates, self).__init__()

                    self.yang_name = "ospfv3-protocol-templates"
                    self.yang_parent_name = "ospfv3-protocol"

                    self.ospfv3_protocol_template = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates, self).__setattr__(name, value)


                class Ospfv3ProtocolTemplate(Entity):
                    """
                    OSPF v2 Protocol threshold template instance
                    
                    .. attribute:: template_name  <key>
                    
                    	Template Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: input_db_ds
                    
                    	Number of DBD packets received
                    	**type**\:   :py:class:`InputDbDs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDs>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_db_ds_lsa
                    
                    	Number of LSA received in DBD packets
                    	**type**\:   :py:class:`InputDbDsLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDsLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_hello_packets
                    
                    	Number of Hello packets received
                    	**type**\:   :py:class:`InputHelloPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputHelloPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_ls_requests
                    
                    	Number of LS Requests received
                    	**type**\:   :py:class:`InputLsRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequests>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_ls_requests_lsa
                    
                    	Number of LSA received in LS Requests
                    	**type**\:   :py:class:`InputLsRequestsLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequestsLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_lsa_acks
                    
                    	Number of LSA Acknowledgements received
                    	**type**\:   :py:class:`InputLsaAcks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcks>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_lsa_acks_lsa
                    
                    	Number of LSA received in LSA Acknowledgements
                    	**type**\:   :py:class:`InputLsaAcksLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcksLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_lsa_updates
                    
                    	Number of LSA Updates received
                    	**type**\:   :py:class:`InputLsaUpdates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdates>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_lsa_updates_lsa
                    
                    	Number of LSA received in LSA Updates
                    	**type**\:   :py:class:`InputLsaUpdatesLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdatesLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: input_packets
                    
                    	Total number of packets received
                    	**type**\:   :py:class:`InputPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_db_ds
                    
                    	Number of DBD packets sent
                    	**type**\:   :py:class:`OutputDbDs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDs>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_db_ds_lsa
                    
                    	Number of LSA sent in DBD packets
                    	**type**\:   :py:class:`OutputDbDsLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDsLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_hello_packets
                    
                    	Total number of packets sent
                    	**type**\:   :py:class:`OutputHelloPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputHelloPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_ls_requests
                    
                    	Number of LS Requests sent
                    	**type**\:   :py:class:`OutputLsRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequests>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_ls_requests_lsa
                    
                    	Number of LSA sent in LS Requests
                    	**type**\:   :py:class:`OutputLsRequestsLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequestsLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_lsa_acks
                    
                    	Number of LSA Acknowledgements sent
                    	**type**\:   :py:class:`OutputLsaAcks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcks>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_lsa_acks_lsa
                    
                    	Number of LSA sent in LSA Acknowledgements
                    	**type**\:   :py:class:`OutputLsaAcksLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcksLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_lsa_updates
                    
                    	Number of LSA Updates sent
                    	**type**\:   :py:class:`OutputLsaUpdates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdates>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_lsa_updates_lsa
                    
                    	Number of LSA sent in LSA Updates
                    	**type**\:   :py:class:`OutputLsaUpdatesLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdatesLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: output_packets
                    
                    	Total number of packets sent
                    	**type**\:   :py:class:`OutputPackets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputPackets>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: sample_interval
                    
                    	Frequency of sampling in minutes
                    	**type**\:  int
                    
                    	**range:** 1..60
                    
                    	**units**\: minute
                    
                    

                    """

                    _prefix = 'manageability-perfmgmt-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate, self).__init__()

                        self.yang_name = "ospfv3-protocol-template"
                        self.yang_parent_name = "ospfv3-protocol-templates"

                        self.template_name = YLeaf(YType.str, "template-name")

                        self.sample_interval = YLeaf(YType.uint32, "sample-interval")

                        self.input_db_ds = None
                        self._children_name_map["input_db_ds"] = "input-db-ds"
                        self._children_yang_names.add("input-db-ds")

                        self.input_db_ds_lsa = None
                        self._children_name_map["input_db_ds_lsa"] = "input-db-ds-lsa"
                        self._children_yang_names.add("input-db-ds-lsa")

                        self.input_hello_packets = None
                        self._children_name_map["input_hello_packets"] = "input-hello-packets"
                        self._children_yang_names.add("input-hello-packets")

                        self.input_ls_requests = None
                        self._children_name_map["input_ls_requests"] = "input-ls-requests"
                        self._children_yang_names.add("input-ls-requests")

                        self.input_ls_requests_lsa = None
                        self._children_name_map["input_ls_requests_lsa"] = "input-ls-requests-lsa"
                        self._children_yang_names.add("input-ls-requests-lsa")

                        self.input_lsa_acks = None
                        self._children_name_map["input_lsa_acks"] = "input-lsa-acks"
                        self._children_yang_names.add("input-lsa-acks")

                        self.input_lsa_acks_lsa = None
                        self._children_name_map["input_lsa_acks_lsa"] = "input-lsa-acks-lsa"
                        self._children_yang_names.add("input-lsa-acks-lsa")

                        self.input_lsa_updates = None
                        self._children_name_map["input_lsa_updates"] = "input-lsa-updates"
                        self._children_yang_names.add("input-lsa-updates")

                        self.input_lsa_updates_lsa = None
                        self._children_name_map["input_lsa_updates_lsa"] = "input-lsa-updates-lsa"
                        self._children_yang_names.add("input-lsa-updates-lsa")

                        self.input_packets = None
                        self._children_name_map["input_packets"] = "input-packets"
                        self._children_yang_names.add("input-packets")

                        self.output_db_ds = None
                        self._children_name_map["output_db_ds"] = "output-db-ds"
                        self._children_yang_names.add("output-db-ds")

                        self.output_db_ds_lsa = None
                        self._children_name_map["output_db_ds_lsa"] = "output-db-ds-lsa"
                        self._children_yang_names.add("output-db-ds-lsa")

                        self.output_hello_packets = None
                        self._children_name_map["output_hello_packets"] = "output-hello-packets"
                        self._children_yang_names.add("output-hello-packets")

                        self.output_ls_requests = None
                        self._children_name_map["output_ls_requests"] = "output-ls-requests"
                        self._children_yang_names.add("output-ls-requests")

                        self.output_ls_requests_lsa = None
                        self._children_name_map["output_ls_requests_lsa"] = "output-ls-requests-lsa"
                        self._children_yang_names.add("output-ls-requests-lsa")

                        self.output_lsa_acks = None
                        self._children_name_map["output_lsa_acks"] = "output-lsa-acks"
                        self._children_yang_names.add("output-lsa-acks")

                        self.output_lsa_acks_lsa = None
                        self._children_name_map["output_lsa_acks_lsa"] = "output-lsa-acks-lsa"
                        self._children_yang_names.add("output-lsa-acks-lsa")

                        self.output_lsa_updates = None
                        self._children_name_map["output_lsa_updates"] = "output-lsa-updates"
                        self._children_yang_names.add("output-lsa-updates")

                        self.output_lsa_updates_lsa = None
                        self._children_name_map["output_lsa_updates_lsa"] = "output-lsa-updates-lsa"
                        self._children_yang_names.add("output-lsa-updates-lsa")

                        self.output_packets = None
                        self._children_name_map["output_packets"] = "output-packets"
                        self._children_yang_names.add("output-packets")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("template_name",
                                        "sample_interval") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate, self).__setattr__(name, value)


                    class InputLsaAcksLsa(Entity):
                        """
                        Number of LSA received in LSA Acknowledgements
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcksLsa, self).__init__()

                            self.yang_name = "input-lsa-acks-lsa"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcksLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcksLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-lsa-acks-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputDbDsLsa(Entity):
                        """
                        Number of LSA sent in DBD packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDsLsa, self).__init__()

                            self.yang_name = "output-db-ds-lsa"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDsLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDsLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-db-ds-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputDbDsLsa(Entity):
                        """
                        Number of LSA received in DBD packets
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDsLsa, self).__init__()

                            self.yang_name = "input-db-ds-lsa"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDsLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDsLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-db-ds-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsaUpdates(Entity):
                        """
                        Number of LSA Updates received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdates, self).__init__()

                            self.yang_name = "input-lsa-updates"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdates, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdates, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-lsa-updates" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputDbDs(Entity):
                        """
                        Number of DBD packets sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDs, self).__init__()

                            self.yang_name = "output-db-ds"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDs, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDs, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-db-ds" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsaUpdatesLsa(Entity):
                        """
                        Number of LSA sent in LSA Updates
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdatesLsa, self).__init__()

                            self.yang_name = "output-lsa-updates-lsa"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdatesLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdatesLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-lsa-updates-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputDbDs(Entity):
                        """
                        Number of DBD packets received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDs, self).__init__()

                            self.yang_name = "input-db-ds"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDs, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDs, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-db-ds" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsaUpdatesLsa(Entity):
                        """
                        Number of LSA received in LSA Updates
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdatesLsa, self).__init__()

                            self.yang_name = "input-lsa-updates-lsa"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdatesLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdatesLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-lsa-updates-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputPackets(Entity):
                        """
                        Total number of packets sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputPackets, self).__init__()

                            self.yang_name = "output-packets"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputPackets(Entity):
                        """
                        Total number of packets received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputPackets, self).__init__()

                            self.yang_name = "input-packets"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputHelloPackets(Entity):
                        """
                        Total number of packets sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputHelloPackets, self).__init__()

                            self.yang_name = "output-hello-packets"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputHelloPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputHelloPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-hello-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputHelloPackets(Entity):
                        """
                        Number of Hello packets received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputHelloPackets, self).__init__()

                            self.yang_name = "input-hello-packets"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputHelloPackets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputHelloPackets, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-hello-packets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsRequests(Entity):
                        """
                        Number of LS Requests sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequests, self).__init__()

                            self.yang_name = "output-ls-requests"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequests, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequests, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-ls-requests" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsaAcksLsa(Entity):
                        """
                        Number of LSA sent in LSA Acknowledgements
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcksLsa, self).__init__()

                            self.yang_name = "output-lsa-acks-lsa"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcksLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcksLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-lsa-acks-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsaAcks(Entity):
                        """
                        Number of LSA Acknowledgements sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcks, self).__init__()

                            self.yang_name = "output-lsa-acks"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcks, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcks, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-lsa-acks" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsaAcks(Entity):
                        """
                        Number of LSA Acknowledgements received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcks, self).__init__()

                            self.yang_name = "input-lsa-acks"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcks, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcks, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-lsa-acks" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsaUpdates(Entity):
                        """
                        Number of LSA Updates sent
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdates, self).__init__()

                            self.yang_name = "output-lsa-updates"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdates, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdates, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-lsa-updates" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class OutputLsRequestsLsa(Entity):
                        """
                        Number of LSA sent in LS Requests
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequestsLsa, self).__init__()

                            self.yang_name = "output-ls-requests-lsa"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequestsLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequestsLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output-ls-requests-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsRequestsLsa(Entity):
                        """
                        Number of LSA received in LS Requests
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequestsLsa, self).__init__()

                            self.yang_name = "input-ls-requests-lsa"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequestsLsa, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequestsLsa, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-ls-requests-lsa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix


                    class InputLsRequests(Entity):
                        """
                        Number of LS Requests received
                        
                        .. attribute:: end_range_value
                        
                        	Threshold end range value (for operator RG, set to 0 otherwise)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operator
                        
                        	Operator
                        	**type**\:   :py:class:`PmThresholdOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdOp>`
                        
                        .. attribute:: percent
                        
                        	Set to TRUE if Specified threshold values are in percent
                        	**type**\:  bool
                        
                        .. attribute:: rearm_type
                        
                        	Configure the Rearm type
                        	**type**\:   :py:class:`PmThresholdRearm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_manageability_perfmgmt_cfg.PmThresholdRearm>`
                        
                        .. attribute:: rearm_window
                        
                        	Configure the rearm window size (for rearm type Window)
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: value
                        
                        	Threshold value (or start range value for operator RG)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'manageability-perfmgmt-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequests, self).__init__()

                            self.yang_name = "input-ls-requests"
                            self.yang_parent_name = "ospfv3-protocol-template"
                            self.is_presence_container = True

                            self.end_range_value = YLeaf(YType.uint32, "end-range-value")

                            self.operator = YLeaf(YType.enumeration, "operator")

                            self.percent = YLeaf(YType.boolean, "percent")

                            self.rearm_type = YLeaf(YType.enumeration, "rearm-type")

                            self.rearm_window = YLeaf(YType.uint32, "rearm-window")

                            self.value = YLeaf(YType.uint32, "value")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("end_range_value",
                                            "operator",
                                            "percent",
                                            "rearm_type",
                                            "rearm_window",
                                            "value") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequests, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequests, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.end_range_value.is_set or
                                self.operator.is_set or
                                self.percent.is_set or
                                self.rearm_type.is_set or
                                self.rearm_window.is_set or
                                self.value.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.end_range_value.yfilter != YFilter.not_set or
                                self.operator.yfilter != YFilter.not_set or
                                self.percent.yfilter != YFilter.not_set or
                                self.rearm_type.yfilter != YFilter.not_set or
                                self.rearm_window.yfilter != YFilter.not_set or
                                self.value.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input-ls-requests" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.end_range_value.is_set or self.end_range_value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.end_range_value.get_name_leafdata())
                            if (self.operator.is_set or self.operator.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.operator.get_name_leafdata())
                            if (self.percent.is_set or self.percent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.percent.get_name_leafdata())
                            if (self.rearm_type.is_set or self.rearm_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_type.get_name_leafdata())
                            if (self.rearm_window.is_set or self.rearm_window.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rearm_window.get_name_leafdata())
                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.value.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "end-range-value" or name == "operator" or name == "percent" or name == "rearm-type" or name == "rearm-window" or name == "value"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "end-range-value"):
                                self.end_range_value = value
                                self.end_range_value.value_namespace = name_space
                                self.end_range_value.value_namespace_prefix = name_space_prefix
                            if(value_path == "operator"):
                                self.operator = value
                                self.operator.value_namespace = name_space
                                self.operator.value_namespace_prefix = name_space_prefix
                            if(value_path == "percent"):
                                self.percent = value
                                self.percent.value_namespace = name_space
                                self.percent.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-type"):
                                self.rearm_type = value
                                self.rearm_type.value_namespace = name_space
                                self.rearm_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "rearm-window"):
                                self.rearm_window = value
                                self.rearm_window.value_namespace = name_space
                                self.rearm_window.value_namespace_prefix = name_space_prefix
                            if(value_path == "value"):
                                self.value = value
                                self.value.value_namespace = name_space
                                self.value.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.template_name.is_set or
                            self.sample_interval.is_set or
                            (self.input_db_ds is not None) or
                            (self.input_db_ds_lsa is not None) or
                            (self.input_hello_packets is not None) or
                            (self.input_ls_requests is not None) or
                            (self.input_ls_requests_lsa is not None) or
                            (self.input_lsa_acks is not None) or
                            (self.input_lsa_acks_lsa is not None) or
                            (self.input_lsa_updates is not None) or
                            (self.input_lsa_updates_lsa is not None) or
                            (self.input_packets is not None) or
                            (self.output_db_ds is not None) or
                            (self.output_db_ds_lsa is not None) or
                            (self.output_hello_packets is not None) or
                            (self.output_ls_requests is not None) or
                            (self.output_ls_requests_lsa is not None) or
                            (self.output_lsa_acks is not None) or
                            (self.output_lsa_acks_lsa is not None) or
                            (self.output_lsa_updates is not None) or
                            (self.output_lsa_updates_lsa is not None) or
                            (self.output_packets is not None))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.template_name.yfilter != YFilter.not_set or
                            self.sample_interval.yfilter != YFilter.not_set or
                            (self.input_db_ds is not None and self.input_db_ds.has_operation()) or
                            (self.input_db_ds_lsa is not None and self.input_db_ds_lsa.has_operation()) or
                            (self.input_hello_packets is not None and self.input_hello_packets.has_operation()) or
                            (self.input_ls_requests is not None and self.input_ls_requests.has_operation()) or
                            (self.input_ls_requests_lsa is not None and self.input_ls_requests_lsa.has_operation()) or
                            (self.input_lsa_acks is not None and self.input_lsa_acks.has_operation()) or
                            (self.input_lsa_acks_lsa is not None and self.input_lsa_acks_lsa.has_operation()) or
                            (self.input_lsa_updates is not None and self.input_lsa_updates.has_operation()) or
                            (self.input_lsa_updates_lsa is not None and self.input_lsa_updates_lsa.has_operation()) or
                            (self.input_packets is not None and self.input_packets.has_operation()) or
                            (self.output_db_ds is not None and self.output_db_ds.has_operation()) or
                            (self.output_db_ds_lsa is not None and self.output_db_ds_lsa.has_operation()) or
                            (self.output_hello_packets is not None and self.output_hello_packets.has_operation()) or
                            (self.output_ls_requests is not None and self.output_ls_requests.has_operation()) or
                            (self.output_ls_requests_lsa is not None and self.output_ls_requests_lsa.has_operation()) or
                            (self.output_lsa_acks is not None and self.output_lsa_acks.has_operation()) or
                            (self.output_lsa_acks_lsa is not None and self.output_lsa_acks_lsa.has_operation()) or
                            (self.output_lsa_updates is not None and self.output_lsa_updates.has_operation()) or
                            (self.output_lsa_updates_lsa is not None and self.output_lsa_updates_lsa.has_operation()) or
                            (self.output_packets is not None and self.output_packets.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "ospfv3-protocol-template" + "[template-name='" + self.template_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ospfv3-protocol/ospfv3-protocol-templates/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.template_name.is_set or self.template_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.template_name.get_name_leafdata())
                        if (self.sample_interval.is_set or self.sample_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.sample_interval.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "input-db-ds"):
                            if (self.input_db_ds is None):
                                self.input_db_ds = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDs()
                                self.input_db_ds.parent = self
                                self._children_name_map["input_db_ds"] = "input-db-ds"
                            return self.input_db_ds

                        if (child_yang_name == "input-db-ds-lsa"):
                            if (self.input_db_ds_lsa is None):
                                self.input_db_ds_lsa = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputDbDsLsa()
                                self.input_db_ds_lsa.parent = self
                                self._children_name_map["input_db_ds_lsa"] = "input-db-ds-lsa"
                            return self.input_db_ds_lsa

                        if (child_yang_name == "input-hello-packets"):
                            if (self.input_hello_packets is None):
                                self.input_hello_packets = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputHelloPackets()
                                self.input_hello_packets.parent = self
                                self._children_name_map["input_hello_packets"] = "input-hello-packets"
                            return self.input_hello_packets

                        if (child_yang_name == "input-ls-requests"):
                            if (self.input_ls_requests is None):
                                self.input_ls_requests = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequests()
                                self.input_ls_requests.parent = self
                                self._children_name_map["input_ls_requests"] = "input-ls-requests"
                            return self.input_ls_requests

                        if (child_yang_name == "input-ls-requests-lsa"):
                            if (self.input_ls_requests_lsa is None):
                                self.input_ls_requests_lsa = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsRequestsLsa()
                                self.input_ls_requests_lsa.parent = self
                                self._children_name_map["input_ls_requests_lsa"] = "input-ls-requests-lsa"
                            return self.input_ls_requests_lsa

                        if (child_yang_name == "input-lsa-acks"):
                            if (self.input_lsa_acks is None):
                                self.input_lsa_acks = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcks()
                                self.input_lsa_acks.parent = self
                                self._children_name_map["input_lsa_acks"] = "input-lsa-acks"
                            return self.input_lsa_acks

                        if (child_yang_name == "input-lsa-acks-lsa"):
                            if (self.input_lsa_acks_lsa is None):
                                self.input_lsa_acks_lsa = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaAcksLsa()
                                self.input_lsa_acks_lsa.parent = self
                                self._children_name_map["input_lsa_acks_lsa"] = "input-lsa-acks-lsa"
                            return self.input_lsa_acks_lsa

                        if (child_yang_name == "input-lsa-updates"):
                            if (self.input_lsa_updates is None):
                                self.input_lsa_updates = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdates()
                                self.input_lsa_updates.parent = self
                                self._children_name_map["input_lsa_updates"] = "input-lsa-updates"
                            return self.input_lsa_updates

                        if (child_yang_name == "input-lsa-updates-lsa"):
                            if (self.input_lsa_updates_lsa is None):
                                self.input_lsa_updates_lsa = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputLsaUpdatesLsa()
                                self.input_lsa_updates_lsa.parent = self
                                self._children_name_map["input_lsa_updates_lsa"] = "input-lsa-updates-lsa"
                            return self.input_lsa_updates_lsa

                        if (child_yang_name == "input-packets"):
                            if (self.input_packets is None):
                                self.input_packets = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.InputPackets()
                                self.input_packets.parent = self
                                self._children_name_map["input_packets"] = "input-packets"
                            return self.input_packets

                        if (child_yang_name == "output-db-ds"):
                            if (self.output_db_ds is None):
                                self.output_db_ds = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDs()
                                self.output_db_ds.parent = self
                                self._children_name_map["output_db_ds"] = "output-db-ds"
                            return self.output_db_ds

                        if (child_yang_name == "output-db-ds-lsa"):
                            if (self.output_db_ds_lsa is None):
                                self.output_db_ds_lsa = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputDbDsLsa()
                                self.output_db_ds_lsa.parent = self
                                self._children_name_map["output_db_ds_lsa"] = "output-db-ds-lsa"
                            return self.output_db_ds_lsa

                        if (child_yang_name == "output-hello-packets"):
                            if (self.output_hello_packets is None):
                                self.output_hello_packets = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputHelloPackets()
                                self.output_hello_packets.parent = self
                                self._children_name_map["output_hello_packets"] = "output-hello-packets"
                            return self.output_hello_packets

                        if (child_yang_name == "output-ls-requests"):
                            if (self.output_ls_requests is None):
                                self.output_ls_requests = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequests()
                                self.output_ls_requests.parent = self
                                self._children_name_map["output_ls_requests"] = "output-ls-requests"
                            return self.output_ls_requests

                        if (child_yang_name == "output-ls-requests-lsa"):
                            if (self.output_ls_requests_lsa is None):
                                self.output_ls_requests_lsa = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsRequestsLsa()
                                self.output_ls_requests_lsa.parent = self
                                self._children_name_map["output_ls_requests_lsa"] = "output-ls-requests-lsa"
                            return self.output_ls_requests_lsa

                        if (child_yang_name == "output-lsa-acks"):
                            if (self.output_lsa_acks is None):
                                self.output_lsa_acks = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcks()
                                self.output_lsa_acks.parent = self
                                self._children_name_map["output_lsa_acks"] = "output-lsa-acks"
                            return self.output_lsa_acks

                        if (child_yang_name == "output-lsa-acks-lsa"):
                            if (self.output_lsa_acks_lsa is None):
                                self.output_lsa_acks_lsa = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaAcksLsa()
                                self.output_lsa_acks_lsa.parent = self
                                self._children_name_map["output_lsa_acks_lsa"] = "output-lsa-acks-lsa"
                            return self.output_lsa_acks_lsa

                        if (child_yang_name == "output-lsa-updates"):
                            if (self.output_lsa_updates is None):
                                self.output_lsa_updates = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdates()
                                self.output_lsa_updates.parent = self
                                self._children_name_map["output_lsa_updates"] = "output-lsa-updates"
                            return self.output_lsa_updates

                        if (child_yang_name == "output-lsa-updates-lsa"):
                            if (self.output_lsa_updates_lsa is None):
                                self.output_lsa_updates_lsa = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputLsaUpdatesLsa()
                                self.output_lsa_updates_lsa.parent = self
                                self._children_name_map["output_lsa_updates_lsa"] = "output-lsa-updates-lsa"
                            return self.output_lsa_updates_lsa

                        if (child_yang_name == "output-packets"):
                            if (self.output_packets is None):
                                self.output_packets = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate.OutputPackets()
                                self.output_packets.parent = self
                                self._children_name_map["output_packets"] = "output-packets"
                            return self.output_packets

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "input-db-ds" or name == "input-db-ds-lsa" or name == "input-hello-packets" or name == "input-ls-requests" or name == "input-ls-requests-lsa" or name == "input-lsa-acks" or name == "input-lsa-acks-lsa" or name == "input-lsa-updates" or name == "input-lsa-updates-lsa" or name == "input-packets" or name == "output-db-ds" or name == "output-db-ds-lsa" or name == "output-hello-packets" or name == "output-ls-requests" or name == "output-ls-requests-lsa" or name == "output-lsa-acks" or name == "output-lsa-acks-lsa" or name == "output-lsa-updates" or name == "output-lsa-updates-lsa" or name == "output-packets" or name == "template-name" or name == "sample-interval"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "template-name"):
                            self.template_name = value
                            self.template_name.value_namespace = name_space
                            self.template_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "sample-interval"):
                            self.sample_interval = value
                            self.sample_interval.value_namespace = name_space
                            self.sample_interval.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.ospfv3_protocol_template:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.ospfv3_protocol_template:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "ospfv3-protocol-templates" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ospfv3-protocol/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "ospfv3-protocol-template"):
                        for c in self.ospfv3_protocol_template:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates.Ospfv3ProtocolTemplate()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.ospfv3_protocol_template.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "ospfv3-protocol-template"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.ospfv3_protocol_templates is not None and self.ospfv3_protocol_templates.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.ospfv3_protocol_templates is not None and self.ospfv3_protocol_templates.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "ospfv3-protocol" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "ospfv3-protocol-templates"):
                    if (self.ospfv3_protocol_templates is None):
                        self.ospfv3_protocol_templates = PerfMgmt.Threshold.Ospfv3Protocol.Ospfv3ProtocolTemplates()
                        self.ospfv3_protocol_templates.parent = self
                        self._children_name_map["ospfv3_protocol_templates"] = "ospfv3-protocol-templates"
                    return self.ospfv3_protocol_templates

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "ospfv3-protocol-templates"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (
                (self.basic_counter_interface is not None and self.basic_counter_interface.has_data()) or
                (self.bgp is not None and self.bgp.has_data()) or
                (self.cpu_node is not None and self.cpu_node.has_data()) or
                (self.data_rate_interface is not None and self.data_rate_interface.has_data()) or
                (self.generic_counter_interface is not None and self.generic_counter_interface.has_data()) or
                (self.ldp_mpls is not None and self.ldp_mpls.has_data()) or
                (self.memory_node is not None and self.memory_node.has_data()) or
                (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_data()) or
                (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_data()) or
                (self.process_node is not None and self.process_node.has_data()))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.basic_counter_interface is not None and self.basic_counter_interface.has_operation()) or
                (self.bgp is not None and self.bgp.has_operation()) or
                (self.cpu_node is not None and self.cpu_node.has_operation()) or
                (self.data_rate_interface is not None and self.data_rate_interface.has_operation()) or
                (self.generic_counter_interface is not None and self.generic_counter_interface.has_operation()) or
                (self.ldp_mpls is not None and self.ldp_mpls.has_operation()) or
                (self.memory_node is not None and self.memory_node.has_operation()) or
                (self.ospfv2_protocol is not None and self.ospfv2_protocol.has_operation()) or
                (self.ospfv3_protocol is not None and self.ospfv3_protocol.has_operation()) or
                (self.process_node is not None and self.process_node.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "threshold" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "basic-counter-interface"):
                if (self.basic_counter_interface is None):
                    self.basic_counter_interface = PerfMgmt.Threshold.BasicCounterInterface()
                    self.basic_counter_interface.parent = self
                    self._children_name_map["basic_counter_interface"] = "basic-counter-interface"
                return self.basic_counter_interface

            if (child_yang_name == "bgp"):
                if (self.bgp is None):
                    self.bgp = PerfMgmt.Threshold.Bgp()
                    self.bgp.parent = self
                    self._children_name_map["bgp"] = "bgp"
                return self.bgp

            if (child_yang_name == "cpu-node"):
                if (self.cpu_node is None):
                    self.cpu_node = PerfMgmt.Threshold.CpuNode()
                    self.cpu_node.parent = self
                    self._children_name_map["cpu_node"] = "cpu-node"
                return self.cpu_node

            if (child_yang_name == "data-rate-interface"):
                if (self.data_rate_interface is None):
                    self.data_rate_interface = PerfMgmt.Threshold.DataRateInterface()
                    self.data_rate_interface.parent = self
                    self._children_name_map["data_rate_interface"] = "data-rate-interface"
                return self.data_rate_interface

            if (child_yang_name == "generic-counter-interface"):
                if (self.generic_counter_interface is None):
                    self.generic_counter_interface = PerfMgmt.Threshold.GenericCounterInterface()
                    self.generic_counter_interface.parent = self
                    self._children_name_map["generic_counter_interface"] = "generic-counter-interface"
                return self.generic_counter_interface

            if (child_yang_name == "ldp-mpls"):
                if (self.ldp_mpls is None):
                    self.ldp_mpls = PerfMgmt.Threshold.LdpMpls()
                    self.ldp_mpls.parent = self
                    self._children_name_map["ldp_mpls"] = "ldp-mpls"
                return self.ldp_mpls

            if (child_yang_name == "memory-node"):
                if (self.memory_node is None):
                    self.memory_node = PerfMgmt.Threshold.MemoryNode()
                    self.memory_node.parent = self
                    self._children_name_map["memory_node"] = "memory-node"
                return self.memory_node

            if (child_yang_name == "ospfv2-protocol"):
                if (self.ospfv2_protocol is None):
                    self.ospfv2_protocol = PerfMgmt.Threshold.Ospfv2Protocol()
                    self.ospfv2_protocol.parent = self
                    self._children_name_map["ospfv2_protocol"] = "ospfv2-protocol"
                return self.ospfv2_protocol

            if (child_yang_name == "ospfv3-protocol"):
                if (self.ospfv3_protocol is None):
                    self.ospfv3_protocol = PerfMgmt.Threshold.Ospfv3Protocol()
                    self.ospfv3_protocol.parent = self
                    self._children_name_map["ospfv3_protocol"] = "ospfv3-protocol"
                return self.ospfv3_protocol

            if (child_yang_name == "process-node"):
                if (self.process_node is None):
                    self.process_node = PerfMgmt.Threshold.ProcessNode()
                    self.process_node.parent = self
                    self._children_name_map["process_node"] = "process-node"
                return self.process_node

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "basic-counter-interface" or name == "bgp" or name == "cpu-node" or name == "data-rate-interface" or name == "generic-counter-interface" or name == "ldp-mpls" or name == "memory-node" or name == "ospfv2-protocol" or name == "ospfv3-protocol" or name == "process-node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (
            (self.enable is not None and self.enable.has_data()) or
            (self.reg_exp_groups is not None and self.reg_exp_groups.has_data()) or
            (self.resources is not None and self.resources.has_data()) or
            (self.statistics is not None and self.statistics.has_data()) or
            (self.threshold is not None and self.threshold.has_data()))

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.enable is not None and self.enable.has_operation()) or
            (self.reg_exp_groups is not None and self.reg_exp_groups.has_operation()) or
            (self.resources is not None and self.resources.has_operation()) or
            (self.statistics is not None and self.statistics.has_operation()) or
            (self.threshold is not None and self.threshold.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "enable"):
            if (self.enable is None):
                self.enable = PerfMgmt.Enable()
                self.enable.parent = self
                self._children_name_map["enable"] = "enable"
            return self.enable

        if (child_yang_name == "reg-exp-groups"):
            if (self.reg_exp_groups is None):
                self.reg_exp_groups = PerfMgmt.RegExpGroups()
                self.reg_exp_groups.parent = self
                self._children_name_map["reg_exp_groups"] = "reg-exp-groups"
            return self.reg_exp_groups

        if (child_yang_name == "resources"):
            if (self.resources is None):
                self.resources = PerfMgmt.Resources()
                self.resources.parent = self
                self._children_name_map["resources"] = "resources"
            return self.resources

        if (child_yang_name == "statistics"):
            if (self.statistics is None):
                self.statistics = PerfMgmt.Statistics()
                self.statistics.parent = self
                self._children_name_map["statistics"] = "statistics"
            return self.statistics

        if (child_yang_name == "threshold"):
            if (self.threshold is None):
                self.threshold = PerfMgmt.Threshold()
                self.threshold.parent = self
                self._children_name_map["threshold"] = "threshold"
            return self.threshold

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "enable" or name == "reg-exp-groups" or name == "resources" or name == "statistics" or name == "threshold"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = PerfMgmt()
        return self._top_entity

