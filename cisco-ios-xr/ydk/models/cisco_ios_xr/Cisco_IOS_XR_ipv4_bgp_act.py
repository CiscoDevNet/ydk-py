""" Cisco_IOS_XR_ipv4_bgp_act 

This module contains a collection of YANG definitions
for Cisco IOS\-XR action package configuration.

Copyright (c) 2016 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError



class AfiEnum(Enum):
    """
    AfiEnum

    .. data:: all = 0

    	Both ipv4 and ipv6 address families

    .. data:: ipv4 = 1

    .. data:: ipv6 = 2

    .. data:: l2vpn = 3

    .. data:: link_state = 4

    .. data:: vpnv4 = 5

    .. data:: vpnv6 = 6

    """

    all = 0

    ipv4 = 1

    ipv6 = 2

    l2vpn = 3

    link_state = 4

    vpnv4 = 5

    vpnv6 = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['AfiEnum']


class AfiSafiTypeEnum(Enum):
    """
    AfiSafiTypeEnum

    .. data:: all_alll = 0

    	Both unicast and multicast address family modifiers

    	of ipv4 and ipv6 address family

    .. data:: all_evpn = 1

    .. data:: all_flowspec = 2

    .. data:: all_labeled_unicast = 3

    .. data:: all_mdt = 4

    .. data:: all_mspw = 5

    .. data:: all_multicast = 6

    .. data:: all_mvpn = 7

    .. data:: all_rt_filter = 8

    .. data:: all_sr_policy = 9

    .. data:: all_tunnel = 10

    .. data:: all_unicast = 11

    .. data:: all_vpls = 12

    .. data:: all_vpws = 13

    .. data:: ipv4_all = 14

    	Both unicast and multicast address family modifiers

    .. data:: ipv4_flowspec = 15

    .. data:: ipv4_labeled_unicast = 16

    .. data:: ipv4_mdt = 17

    .. data:: ipv4_multicast = 18

    .. data:: ipv4_mvpn = 19

    .. data:: ipv4_rt_filter = 20

    .. data:: ipv4_sr_policy = 21

    .. data:: ipv4_tunnel = 22

    .. data:: ipv4_unicast = 23

    .. data:: ipv6_all = 24

    	Both unicast and multicast address family modifiers

    .. data:: ipv6_flowspec = 25

    .. data:: ipv6_labeled_unicast = 26

    .. data:: ipv6_multicast = 27

    .. data:: ipv6_mvpn = 28

    .. data:: ipv6_sr_policy = 29

    .. data:: ipv6_unicast = 30

    .. data:: l2vpn_evpn = 31

    .. data:: l2vpn_mspw = 32

    .. data:: l2vpn_vpls = 33

    .. data:: l2vpn_vpws = 34

    .. data:: link_state = 35

    .. data:: vpnv4_flowspec = 36

    .. data:: vpnv4_multicast = 37

    .. data:: vpnv4_unicast = 38

    .. data:: vpnv6_flowspec = 39

    .. data:: vpnv6_multicast = 40

    .. data:: vpnv6_unicast = 41

    """

    all_alll = 0

    all_evpn = 1

    all_flowspec = 2

    all_labeled_unicast = 3

    all_mdt = 4

    all_mspw = 5

    all_multicast = 6

    all_mvpn = 7

    all_rt_filter = 8

    all_sr_policy = 9

    all_tunnel = 10

    all_unicast = 11

    all_vpls = 12

    all_vpws = 13

    ipv4_all = 14

    ipv4_flowspec = 15

    ipv4_labeled_unicast = 16

    ipv4_mdt = 17

    ipv4_multicast = 18

    ipv4_mvpn = 19

    ipv4_rt_filter = 20

    ipv4_sr_policy = 21

    ipv4_tunnel = 22

    ipv4_unicast = 23

    ipv6_all = 24

    ipv6_flowspec = 25

    ipv6_labeled_unicast = 26

    ipv6_multicast = 27

    ipv6_mvpn = 28

    ipv6_sr_policy = 29

    ipv6_unicast = 30

    l2vpn_evpn = 31

    l2vpn_mspw = 32

    l2vpn_vpls = 33

    l2vpn_vpws = 34

    link_state = 35

    vpnv4_flowspec = 36

    vpnv4_multicast = 37

    vpnv4_unicast = 38

    vpnv6_flowspec = 39

    vpnv6_multicast = 40

    vpnv6_unicast = 41


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['AfiSafiTypeEnum']


class InstanceNameEnum(Enum):
    """
    InstanceNameEnum

    .. data:: all = 0

    """

    all = 0


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['InstanceNameEnum']


class Ipv4SafiEnum(Enum):
    """
    Ipv4SafiEnum

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: mdt = 3

    .. data:: multicast = 4

    .. data:: mvpn = 5

    .. data:: rt_filter = 6

    .. data:: sr_policy = 7

    .. data:: tunnel = 8

    .. data:: unicast = 9

    """

    all = 0

    flowspec = 1

    labeled_unicast = 2

    mdt = 3

    multicast = 4

    mvpn = 5

    rt_filter = 6

    sr_policy = 7

    tunnel = 8

    unicast = 9


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Ipv4SafiEnum']


class Ipv4SafiEnum(Enum):
    """
    Ipv4SafiEnum

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: mdt = 3

    .. data:: multicast = 4

    .. data:: mvpn = 5

    .. data:: rt_filter = 6

    .. data:: sr_policy = 7

    .. data:: tunnel = 8

    .. data:: unicast = 9

    """

    all = 0

    flowspec = 1

    labeled_unicast = 2

    mdt = 3

    multicast = 4

    mvpn = 5

    rt_filter = 6

    sr_policy = 7

    tunnel = 8

    unicast = 9


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Ipv4SafiEnum']


class Ipv6SafiEnum(Enum):
    """
    Ipv6SafiEnum

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: multicast = 3

    .. data:: mvpn = 4

    .. data:: sr_policy = 5

    .. data:: unicast = 6

    """

    all = 0

    flowspec = 1

    labeled_unicast = 2

    multicast = 3

    mvpn = 4

    sr_policy = 5

    unicast = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Ipv6SafiEnum']


class Ipv6SafiEnum(Enum):
    """
    Ipv6SafiEnum

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: multicast = 3

    .. data:: mvpn = 4

    .. data:: sr_policy = 5

    .. data:: unicast = 6

    """

    all = 0

    flowspec = 1

    labeled_unicast = 2

    multicast = 3

    mvpn = 4

    sr_policy = 5

    unicast = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Ipv6SafiEnum']


class L2VpnSafiEnum(Enum):
    """
    L2VpnSafiEnum

    .. data:: evpn = 0

    .. data:: mspw = 1

    .. data:: vpls = 2

    .. data:: vpws = 3

    """

    evpn = 0

    mspw = 1

    vpls = 2

    vpws = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['L2VpnSafiEnum']


class L2VpnSafiEnum(Enum):
    """
    L2VpnSafiEnum

    .. data:: evpn = 0

    .. data:: mspw = 1

    .. data:: vpls = 2

    .. data:: vpws = 3

    """

    evpn = 0

    mspw = 1

    vpls = 2

    vpws = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['L2VpnSafiEnum']


class LinkStateSafiEnum(Enum):
    """
    LinkStateSafiEnum

    .. data:: link_state = 0

    """

    link_state = 0


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['LinkStateSafiEnum']


class LinkStateSafiEnum(Enum):
    """
    LinkStateSafiEnum

    .. data:: link_state = 0

    """

    link_state = 0


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['LinkStateSafiEnum']


class Vpnv4SafiEnum(Enum):
    """
    Vpnv4SafiEnum

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = 0

    multicast = 1

    unicast = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Vpnv4SafiEnum']


class Vpnv4SafiEnum(Enum):
    """
    Vpnv4SafiEnum

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = 0

    multicast = 1

    unicast = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Vpnv4SafiEnum']


class Vpnv6SafiEnum(Enum):
    """
    Vpnv6SafiEnum

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = 0

    multicast = 1

    unicast = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Vpnv6SafiEnum']


class Vpnv6SafiEnum(Enum):
    """
    Vpnv6SafiEnum

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = 0

    multicast = 1

    unicast = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Vpnv6SafiEnum']


class VrfNameEnum(Enum):
    """
    VrfNameEnum

    .. data:: all = 0

    """

    all = 0


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['VrfNameEnum']



class ClearBgpAllGracefulRpc(object):
    """
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAllGracefulRpc']['meta_info']


class ClearBgpAllRpc(object):
    """
    Clear all peers and all routes from the BGP table.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAllRpc']['meta_info']


class ClearBgpIpAddrGracefulRpc(object):
    """
    BGP neighbor address to clear.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpIpAddrGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpIpAddrGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpIpAddrGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpIpAddrGracefulRpc']['meta_info']


class ClearBgpIpAddrLongLivedStaleRpc(object):
    """
    BGP neighbor address to clear.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpIpAddrLongLivedStaleRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpIpAddrLongLivedStaleRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpIpAddrLongLivedStaleRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpIpAddrLongLivedStaleRpc']['meta_info']


class ClearBgpIpAddrRpc(object):
    """
    BGP neighbor address to clear.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpIpAddrRpc']['meta_info']


class ClearBgpAfiSafiAllSoftInPrefixFilterRpc(object):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiAllSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAllSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAllSoftInPrefixFilterRpc']['meta_info']


class ClearBgpAfiSafiAllSoftInRpc(object):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiAllSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAllSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAllSoftInRpc']['meta_info']


class ClearBgpAfiSafiAllSoftOutRpc(object):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiAllSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAllSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAllSoftOutRpc']['meta_info']


class ClearBgpAfiSafiAllSoftRpc(object):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiAllSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAllSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAllSoftRpc']['meta_info']


class ClearBgpAfiSafiIpAddrLongLivedStaleRpc(object):
    """
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrLongLivedStaleRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiIpAddrLongLivedStaleRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrLongLivedStaleRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrLongLivedStaleRpc']['meta_info']


class ClearBgpAfiSafiIpAddrSoftInPrefixFilterRpc(object):
    """
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiIpAddrSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrSoftInPrefixFilterRpc']['meta_info']


class ClearBgpAfiSafiIpAddrSoftInRpc(object):
    """
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiIpAddrSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrSoftInRpc']['meta_info']


class ClearBgpAfiSafiIpAddrSoftOutRpc(object):
    """
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiIpAddrSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrSoftOutRpc']['meta_info']


class ClearBgpAfiSafiIpAddrSoftRpc(object):
    """
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiIpAddrSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrSoftRpc']['meta_info']


class ClearBgpAfiSafiAsSoftInPrefixFilterRpc(object):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiAsSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAsSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAsSoftInPrefixFilterRpc']['meta_info']


class ClearBgpAfiSafiAsSoftInRpc(object):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiAsSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAsSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAsSoftInRpc']['meta_info']


class ClearBgpAfiSafiAsSoftOutRpc(object):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiAsSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAsSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAsSoftOutRpc']['meta_info']


class ClearBgpAfiSafiAsSoftRpc(object):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiAsSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAsSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAsSoftRpc']['meta_info']


class ClearBgpAfiSafiDampeningIpPrefixRpc(object):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiDampeningIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear dampening information
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiDampeningIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiDampeningIpPrefixRpc']['meta_info']


class ClearBgpAfiSafiDampeningRpc(object):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiDampeningRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiDampeningRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiDampeningRpc']['meta_info']


class ClearBgpAfiSafiExternalSoftInPrefixFilterRpc(object):
    """
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiExternalSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiExternalSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiExternalSoftInPrefixFilterRpc']['meta_info']


class ClearBgpAfiSafiExternalSoftInRpc(object):
    """
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiExternalSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiExternalSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiExternalSoftInRpc']['meta_info']


class ClearBgpAfiSafiExternalSoftOutRpc(object):
    """
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiExternalSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiExternalSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiExternalSoftOutRpc']['meta_info']


class ClearBgpAfiSafiExternalSoftRpc(object):
    """
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiExternalSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiExternalSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiExternalSoftRpc']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpAddrIpv4MaskRpc(object):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_mask
        
        	Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpAddrIpv4MaskRpc']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpAddrRpc(object):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiFlapStatisticsIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpAddrRpc']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpPrefixRpc(object):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiFlapStatisticsIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpPrefixRpc']['meta_info']


class ClearBgpAfiSafiFlapStatisticsRegexpRpc(object):
    """
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsRegexpRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiFlapStatisticsRegexpRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.regexp_pattern = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.regexp_pattern is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRegexpRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRegexpRpc']['meta_info']


class ClearBgpAfiSafiFlapStatisticsRoutePolicyRpc(object):
    """
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsRoutePolicyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiFlapStatisticsRoutePolicyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.route_policy_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.route_policy_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRoutePolicyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRoutePolicyRpc']['meta_info']


class ClearBgpAfiSafiFlapStatisticsRpc(object):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiFlapStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRpc']['meta_info']


class ClearBgpAfiSafiNexthopPerformanceStatisticsRpc(object):
    """
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiNexthopPerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiNexthopPerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiNexthopPerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiNexthopPerformanceStatisticsRpc']['meta_info']


class ClearBgpAfiSafiNexthopRegistrationIpAddrRpc(object):
    """
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiNexthopRegistrationIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiNexthopRegistrationIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiNexthopRegistrationIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiNexthopRegistrationIpAddrRpc']['meta_info']


class ClearBgpAfiSafiSelfOriginatedRpc(object):
    """
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiSelfOriginatedRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiSelfOriginatedRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiSelfOriginatedRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiSelfOriginatedRpc']['meta_info']


class ClearBgpAfiSafiShutdownRpc(object):
    """
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiShutdownRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiShutdownRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiShutdownRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiShutdownRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParentRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqAddressFamilyRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqAddressFamilyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqAddressFamilyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqAddressFamilyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqAddressFamilyRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqNeighborIpAddrRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.refresh_sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.refresh_sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParentRpc']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupRpc']['meta_info']


class ClearBgpAsGracefulRpc(object):
    """
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAsGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAsGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.as_number = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.as_number is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAsGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAsGracefulRpc']['meta_info']


class ClearBgpAsRpc(object):
    """
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.as_number = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.as_number is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAsRpc']['meta_info']


class ClearBgpBestpathIpAddrIpNetmaskRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpBestpathIpAddrRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathIpAddrRpc']['meta_info']


class ClearBgpBestpathIpPrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathIpPrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpAddrIpNetmaskRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpAddrRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpAddrRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpPrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpPrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpBestpathAfiSafiBridgeDomainIpAddrRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpAddrRpc']['meta_info']


class ClearBgpBestpathAfiSafiBridgeDomainIpPrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpPrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdIpAddrIpNetmaskRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdIpAddrRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpAddrRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdIpPrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpPrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpv4AddrIpv4MaskRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpv4AddrRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv4AddrRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpv4PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv4PrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv4AddrRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4AddrRpc']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv4AddrRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiVrfIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4AddrRpc']['meta_info']


class ClearBgpBestpathAfiSafiNetworkRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiNetworkRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdNetworkRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdNetworkRpc']['meta_info']


class ClearBgpBestpathAfiSafiVrfNetworkRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiVrfNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfNetworkRpc']['meta_info']


class ClearBgpBestpathAfiSafiRtConstraintNetworkRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRtConstraintNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRtConstraintNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.rt_constraint_network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.rt_constraint_network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRtConstraintNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRtConstraintNetworkRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpv4TunnelNetworkRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4TunnelNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpv4TunnelNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_tunnel_network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv4TunnelNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv4TunnelNetworkRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpv6AddrIpv6NetmaskRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpv6AddrRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv6AddrRpc']['meta_info']


class ClearBgpBestpathAfiSafiIpv6PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv6PrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdRpc']['meta_info']


class ClearBgpBestpathAfiSafiVrfRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiVrfRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfRpc']['meta_info']


class ClearBgpBestpathAfiSafiRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRpc']['meta_info']


class ClearBgpBestpathAfiSafiSrPolicyPrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiSrPolicyPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiSrPolicyPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.sr_policy_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.sr_policy_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiSrPolicyPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiSrPolicyPrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiBridgeDomainIpv4PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpv4PrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv4PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4PrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiMp2MpIpv4PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiMp2MpIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiMp2MpIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.mp2mp = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.mp2mp is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiMp2MpIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiMp2MpIpv4PrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv4PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiVrfIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4PrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv4AddrIpv4MaskRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv6AddrRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6AddrRpc']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv6PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiRdIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6PrefixRpc']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv6AddrRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiVrfIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6AddrRpc']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv6PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathAfiSafiVrfIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6PrefixRpc']['meta_info']


class ClearBgpBestpathVrfIpAddrIpNetmaskRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.ip_netmask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpBestpathVrfIpAddrRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfIpAddrRpc']['meta_info']


class ClearBgpBestpathVrfIpPrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfIpPrefixRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv4PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4PrefixRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv4AddrRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4AddrRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiNetworkRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiNetworkRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiRdNetworkRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiRdNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiRdNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.rd = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.rd is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiRdNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiRdNetworkRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiVrfNetworkRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiVrfNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiVrfNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.vrf_all = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_all is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiVrfNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiVrfNetworkRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv6AddrRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6AddrRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv6PrefixRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6PrefixRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiRdRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiRdRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiRdRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.rd = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.rd is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiRdRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiRdRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiVrfRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiVrfRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiVrfRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiVrfRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiVrfRpc']['meta_info']


class ClearBgpBestpathVrfAfiSafiRpc(object):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpBestpathVrfAfiSafiRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiRpc']['meta_info']


class ClearBgpExternalGracefulRpc(object):
    """
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpExternalGracefulRpc']['meta_info']


class ClearBgpExternalRpc(object):
    """
    Clear all external peers.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpExternalRpc']['meta_info']


class ClearBgpInstanceAllGracefulRpc(object):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAllGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAllGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAllGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAllGracefulRpc']['meta_info']


class ClearBgpInstanceAllRpc(object):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAllRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAllRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAllRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAllRpc']['meta_info']


class ClearBgpInstanceIpAddrGracefulRpc(object):
    """
    Choose a particular BGP instance.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceIpAddrGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceIpAddrGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceIpAddrGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceIpAddrGracefulRpc']['meta_info']


class ClearBgpInstanceIpAddrLongLivedStaleRpc(object):
    """
    Choose a particular BGP instance.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceIpAddrLongLivedStaleRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceIpAddrLongLivedStaleRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceIpAddrLongLivedStaleRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceIpAddrLongLivedStaleRpc']['meta_info']


class ClearBgpInstanceIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceIpAddrRpc']['meta_info']


class ClearBgpInstanceAfiSafiAllSoftInPrefixFilterRpc(object):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiAllSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftInPrefixFilterRpc']['meta_info']


class ClearBgpInstanceAfiSafiAllSoftInRpc(object):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiAllSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftInRpc']['meta_info']


class ClearBgpInstanceAfiSafiAllSoftOutRpc(object):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiAllSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftOutRpc']['meta_info']


class ClearBgpInstanceAfiSafiAllSoftRpc(object):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiAllSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftRpc']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrLongLivedStaleRpc(object):
    """
    Choose a particular BGP instance.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrLongLivedStaleRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiIpAddrLongLivedStaleRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrLongLivedStaleRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrLongLivedStaleRpc']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilterRpc(object):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilterRpc']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrSoftInRpc(object):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiIpAddrSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftInRpc']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrSoftOutRpc(object):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiIpAddrSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftOutRpc']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrSoftRpc(object):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiIpAddrSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftRpc']['meta_info']


class ClearBgpInstanceAfiSafiAsSoftInPrefixFilterRpc(object):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiAsSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftInPrefixFilterRpc']['meta_info']


class ClearBgpInstanceAfiSafiAsSoftInRpc(object):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiAsSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftInRpc']['meta_info']


class ClearBgpInstanceAfiSafiAsSoftOutRpc(object):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiAsSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftOutRpc']['meta_info']


class ClearBgpInstanceAfiSafiAsSoftRpc(object):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiAsSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftRpc']['meta_info']


class ClearBgpInstanceAfiSafiDampeningIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiDampeningIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear dampening information
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpPrefixRpc']['meta_info']


class ClearBgpInstanceAfiSafiDampeningRpc(object):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiDampeningRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiDampeningRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiDampeningRpc']['meta_info']


class ClearBgpInstanceAfiSafiExternalSoftInPrefixFilterRpc(object):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiExternalSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftInPrefixFilterRpc']['meta_info']


class ClearBgpInstanceAfiSafiExternalSoftInRpc(object):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiExternalSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftInRpc']['meta_info']


class ClearBgpInstanceAfiSafiExternalSoftOutRpc(object):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiExternalSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftOutRpc']['meta_info']


class ClearBgpInstanceAfiSafiExternalSoftRpc(object):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiExternalSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftRpc']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_mask
        
        	Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.ipv4_mask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpAddrRpc']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpPrefixRpc']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsRegexpRpc(object):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsRegexpRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiFlapStatisticsRegexpRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.regexp_pattern = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.regexp_pattern is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRegexpRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRegexpRpc']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicyRpc(object):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.route_policy_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.route_policy_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicyRpc']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsRpc(object):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiFlapStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRpc']['meta_info']


class ClearBgpInstanceAfiSafiNexthopPerformanceStatisticsRpc(object):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiNexthopPerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiNexthopPerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiNexthopPerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiNexthopPerformanceStatisticsRpc']['meta_info']


class ClearBgpInstanceAfiSafiNexthopRegistrationIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiNexthopRegistrationIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiNexthopRegistrationIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiNexthopRegistrationIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiNexthopRegistrationIpAddrRpc']['meta_info']


class ClearBgpInstanceAfiSafiSelfOriginatedRpc(object):
    """
    Choose a particular BGP instance.
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiSelfOriginatedRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiSelfOriginatedRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiSelfOriginatedRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiSelfOriginatedRpc']['meta_info']


class ClearBgpInstanceAfiSafiShutdownRpc(object):
    """
    Choose a particular BGP instance.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiShutdownRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiShutdownRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiShutdownRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiShutdownRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParentRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.refresh_sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.refresh_sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupRpc']['meta_info']


class ClearBgpInstanceAsGracefulRpc(object):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAsGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAsGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.as_number = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAsGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAsGracefulRpc']['meta_info']


class ClearBgpInstanceAsRpc(object):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.as_number = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAsRpc']['meta_info']


class ClearBgpInstanceBestpathIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceBestpathIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathIpAddrRpc']['meta_info']


class ClearBgpInstanceBestpathIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathIpPrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpAddrRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpPrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.instance_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpAddrRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpPrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv4AddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4AddrRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv4AddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4AddrRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiNetworkRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiNetworkRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdNetworkRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdNetworkRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfNetworkRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiVrfNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfNetworkRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRtConstraintNetworkRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRtConstraintNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRtConstraintNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.rt_constraint_network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.rt_constraint_network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRtConstraintNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRtConstraintNetworkRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetworkRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_tunnel_network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_tunnel_network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetworkRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6NetmaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv6AddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6AddrRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiVrfRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiSrPolicyPrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiSrPolicyPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiSrPolicyPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.sr_policy_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.sr_policy_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiSrPolicyPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiSrPolicyPrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.instance_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiMp2MpIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiMp2MpIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiMp2MpIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.mp2mp = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.mp2mp is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiMp2MpIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiMp2MpIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv6AddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6AddrRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrRpc']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathVrfIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceBestpathVrfIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfIpAddrRpc']['meta_info']


class ClearBgpInstanceBestpathVrfIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfIpPrefixRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiNetworkRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiNetworkRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiRdNetworkRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiRdNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiRdNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.rd = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.rd is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRdNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRdNetworkRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiVrfNetworkRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiVrfNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiVrfNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.vrf_all = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_all is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiVrfNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiVrfNetworkRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiRdRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiRdRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiRdRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.rd = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.rd is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRdRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRdRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiVrfRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiVrfRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiVrfRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiVrfRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiVrfRpc']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiRpc(object):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceBestpathVrfAfiSafiRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRpc']['meta_info']


class ClearBgpInstanceExternalGracefulRpc(object):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceExternalGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceExternalGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceExternalGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceExternalGracefulRpc']['meta_info']


class ClearBgpInstanceExternalRpc(object):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceExternalRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceExternalRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceExternalRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceExternalRpc']['meta_info']


class ClearBgpInstanceAfiSafiDampeningIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiDampeningIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceAfiSafiDampeningIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiDampeningIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceNexthopPerformanceStatisticsRpc(object):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceNexthopPerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceNexthopPerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceNexthopPerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceNexthopPerformanceStatisticsRpc']['meta_info']


class ClearBgpInstanceNexthopRegistrationIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceNexthopRegistrationIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceNexthopRegistrationIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceNexthopRegistrationIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceNexthopRegistrationIpAddrRpc']['meta_info']


class ClearBgpInstancePeerDropsAllRpc(object):
    """
    Choose a particular BGP instance.
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstancePeerDropsAllRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstancePeerDropsAllRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstancePeerDropsAllRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstancePeerDropsAllRpc']['meta_info']


class ClearBgpInstancePeerDropsIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstancePeerDropsIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstancePeerDropsIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstancePeerDropsIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstancePeerDropsIpAddrRpc']['meta_info']


class ClearBgpInstancePerformanceStatisticsRpc(object):
    """
    Choose a particular BGP instance.
    Clear performance statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstancePerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstancePerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstancePerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstancePerformanceStatisticsRpc']['meta_info']


class ClearBgpInstanceRpkiServerAllSerialQueryRpc(object):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    send serial\-queries to all cache\-servers (with latest serial numbers).
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiServerAllSerialQueryRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceRpkiServerAllSerialQueryRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiServerAllSerialQueryRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiServerAllSerialQueryRpc']['meta_info']


class ClearBgpInstanceRpkiServerAllRpc(object):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiServerAllRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceRpkiServerAllRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiServerAllRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiServerAllRpc']['meta_info']


class ClearBgpInstanceRpkiServerRpkiServerRpc(object):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI cache\-server.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiServerRpkiServerRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceRpkiServerRpkiServerRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rpki_server
        
        	clear a specific RPKI cache\-server (hostname or IP address)
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.rpki_server = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.rpki_server is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiServerRpkiServerRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiServerRpkiServerRpc']['meta_info']


class ClearBgpInstanceRpkiValidationIpv4Rpc(object):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv4 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiValidationIpv4Rpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceRpkiValidationIpv4Rpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiValidationIpv4Rpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiValidationIpv4Rpc']['meta_info']


class ClearBgpInstanceRpkiValidationIpv6Rpc(object):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv6 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiValidationIpv6Rpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceRpkiValidationIpv6Rpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiValidationIpv6Rpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiValidationIpv6Rpc']['meta_info']


class ClearBgpInstanceRpkiValidationRpc(object):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiValidationRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceRpkiValidationRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiValidationRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiValidationRpc']['meta_info']


class ClearBgpInstanceShutdownRpc(object):
    """
    Choose a particular BGP instance.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceShutdownRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceShutdownRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceShutdownRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceShutdownRpc']['meta_info']


class ClearBgpInstanceUpdateOutqAddressFamilyUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqAddressFamilyUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqAddressFamilyUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqAddressFamilyUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqAddressFamilyUpdateParentRpc']['meta_info']


class ClearBgpInstanceUpdateOutqAddressFamilyRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqAddressFamilyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqAddressFamilyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqAddressFamilyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqAddressFamilyRpc']['meta_info']


class ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParentRpc']['meta_info']


class ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshRpc']['meta_info']


class ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParentRpc']['meta_info']


class ClearBgpInstanceUpdateOutqNeighborIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRpc']['meta_info']


class ClearBgpInstanceUpdateOutqProcessRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Process.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqProcessRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqProcessRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqProcessRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqProcessRpc']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRpc']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.refresh_sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.refresh_sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqUpdateGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupRpc(object):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceUpdateOutqUpdateGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupRpc']['meta_info']


class ClearBgpInstanceVersionIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceVersionIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionIpAddrRpc']['meta_info']


class ClearBgpInstanceVersionIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionIpPrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpAddrRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpPrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.instance_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.instance_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpAddrRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpPrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv4AddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4AddrRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv4AddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4AddrRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv4AddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4AddrRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiNetworkRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiNetworkRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdNetworkRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdNetworkRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfNetworkRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiVrfNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfNetworkRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRtConstraintNetworkRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRtConstraintNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRtConstraintNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.rt_constraint_network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.rt_constraint_network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRtConstraintNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRtConstraintNetworkRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv4TunnelNetworkRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4TunnelNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpv4TunnelNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_tunnel_network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_tunnel_network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4TunnelNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4TunnelNetworkRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6NetmaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv6AddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6AddrRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiVrfRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiSrPolicyPrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiSrPolicyPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiSrPolicyPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.sr_policy_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.sr_policy_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiSrPolicyPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiSrPolicyPrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.instance_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiMp2MpIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiMp2MpIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiMp2MpIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.mp2mp = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.mp2mp is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiMp2MpIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiMp2MpIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv6AddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6AddrRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiRdIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv6AddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6AddrRpc']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceVersionVrfIpAddrIpNetmaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpInstanceVersionVrfIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfIpAddrRpc']['meta_info']


class ClearBgpInstanceVersionVrfIpPrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfIpPrefixRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv4AddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4AddrRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiNetworkRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiNetworkRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiRdNetworkRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiRdNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiRdNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.rd = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.rd is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRdNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRdNetworkRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiVrfNetworkRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiVrfNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiVrfNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.network = None
            self.vrf_all = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_all is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiVrfNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiVrfNetworkRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv6AddrRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6AddrRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiRdRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiRdRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiRdRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.rd = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.rd is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRdRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRdRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiVrfRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiVrfRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiVrfRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiVrfRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiVrfRpc']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiRpc(object):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVersionVrfAfiSafiRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRpc']['meta_info']


class ClearBgpInstanceVrfAllGracefulRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAllGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAllGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAllGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAllGracefulRpc']['meta_info']


class ClearBgpInstanceVrfAllRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAllRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAllRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAllRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAllRpc']['meta_info']


class ClearBgpInstanceVrfIpAddrGracefulRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfIpAddrGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfIpAddrGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfIpAddrGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfIpAddrGracefulRpc']['meta_info']


class ClearBgpInstanceVrfIpAddrLongLivedStaleRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfIpAddrLongLivedStaleRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfIpAddrLongLivedStaleRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfIpAddrLongLivedStaleRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfIpAddrLongLivedStaleRpc']['meta_info']


class ClearBgpInstanceVrfIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfIpAddrRpc']['meta_info']


class ClearBgpInstanceVrfAsGracefulRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAsGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAsGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.as_number = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAsGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAsGracefulRpc']['meta_info']


class ClearBgpInstanceVrfAsRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.as_number = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAsRpc']['meta_info']


class ClearBgpInstanceVrfExternalGracefulRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfExternalGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfExternalGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfExternalGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfExternalGracefulRpc']['meta_info']


class ClearBgpInstanceVrfExternalRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfExternalRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfExternalRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfExternalRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfExternalRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilterRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilterRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiAllSoftInRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiAllSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftInRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiAllSoftOutRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiAllSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftOutRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiAllSoftRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiAllSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStaleRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStaleRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStaleRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStaleRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStaleRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilterRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilterRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrSoftInRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftInRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrSoftOutRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftOutRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrSoftRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilterRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilterRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiAsSoftInRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiAsSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftInRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiAsSoftOutRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiAsSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftOutRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiAsSoftRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiAsSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiDampeningIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiDampeningIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiDampeningIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiDampeningRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiDampeningRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiDampeningRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilterRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilterRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiExternalSoftInRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftInRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiExternalSoftOutRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftOutRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiExternalSoftRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_mask
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4PrefixRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv4_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4PrefixRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexpRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexpRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexpRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.regexp_pattern = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.regexp_pattern is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexpRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexpRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicyRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.route_policy_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.route_policy_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicyRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatisticsRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatisticsRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddrRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiSelfOriginatedRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiSelfOriginatedRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiSelfOriginatedRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiSelfOriginatedRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiSelfOriginatedRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiShutdownRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiShutdownRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiShutdownRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiShutdownRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiShutdownRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.refresh_sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.refresh_sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiDampeningIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiDampeningIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiDampeningIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6PrefixRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.instance_name = None
            self.ipv6_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.instance_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6PrefixRpc']['meta_info']


class ClearBgpInstanceVrfNexthopPerformanceStatisticsRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfNexthopPerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfNexthopPerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfNexthopPerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfNexthopPerformanceStatisticsRpc']['meta_info']


class ClearBgpInstanceVrfNexthopRegistrationIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfNexthopRegistrationIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfNexthopRegistrationIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfNexthopRegistrationIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfNexthopRegistrationIpAddrRpc']['meta_info']


class ClearBgpInstanceVrfPeerDropsAllRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfPeerDropsAllRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfPeerDropsAllRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfPeerDropsAllRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfPeerDropsAllRpc']['meta_info']


class ClearBgpInstanceVrfPeerDropsIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfPeerDropsIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfPeerDropsIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfPeerDropsIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfPeerDropsIpAddrRpc']['meta_info']


class ClearBgpInstanceVrfPerformanceStatisticsRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear performance statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfPerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfPerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfPerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfPerformanceStatisticsRpc']['meta_info']


class ClearBgpInstanceVrfShutdownRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfShutdownRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfShutdownRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfShutdownRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfShutdownRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqAddressFamilyRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqAddressFamilyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqAddressFamilyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqAddressFamilyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqAddressFamilyRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.refresh_sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.refresh_sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParentRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParentRpc']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupRpc(object):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`InstanceNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupRpc']['meta_info']


class ClearBgpAfiSafiDampeningIpv4PrefixRpc(object):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiDampeningIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiDampeningIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiDampeningIpv4PrefixRpc']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpv4PrefixRpc(object):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiFlapStatisticsIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpv4PrefixRpc']['meta_info']


class ClearBgpAfiSafiDampeningIpv6PrefixRpc(object):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiDampeningIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiDampeningIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiDampeningIpv6PrefixRpc']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpv6PrefixRpc(object):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpAfiSafiFlapStatisticsIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpv6PrefixRpc']['meta_info']


class ClearBgpNexthopPerformanceStatisticsRpc(object):
    """
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpNexthopPerformanceStatisticsRpc']['meta_info']


class ClearBgpNexthopRegistrationIpAddrRpc(object):
    """
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpNexthopRegistrationIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpNexthopRegistrationIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpNexthopRegistrationIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpNexthopRegistrationIpAddrRpc']['meta_info']


class ClearBgpPeerDropsAllRpc(object):
    """
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpPeerDropsAllRpc']['meta_info']


class ClearBgpPeerDropsIpAddrRpc(object):
    """
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpPeerDropsIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpPeerDropsIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpPeerDropsIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpPeerDropsIpAddrRpc']['meta_info']


class ClearBgpPerformanceStatisticsRpc(object):
    """
    Clear performance statistics.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpPerformanceStatisticsRpc']['meta_info']


class ClearBgpRpkiServerAllSerialQueryRpc(object):
    """
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    send serial\-queries to all cache\-servers (with latest serial numbers).
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all-serial-query'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiServerAllSerialQueryRpc']['meta_info']


class ClearBgpRpkiServerAllRpc(object):
    """
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiServerAllRpc']['meta_info']


class ClearBgpRpkiServerRpkiServerRpc(object):
    """
    RPKI clear command.
    clear RPKI cache\-server.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpRpkiServerRpkiServerRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpRpkiServerRpkiServerRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: rpki_server
        
        	clear a specific RPKI cache\-server (hostname or IP address)
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.rpki_server = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.rpki_server is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpRpkiServerRpkiServerRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiServerRpkiServerRpc']['meta_info']


class ClearBgpRpkiValidationIpv4Rpc(object):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv4 table.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv4'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiValidationIpv4Rpc']['meta_info']


class ClearBgpRpkiValidationIpv6Rpc(object):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv6 table.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv6'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiValidationIpv6Rpc']['meta_info']


class ClearBgpRpkiValidationRpc(object):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiValidationRpc']['meta_info']


class ClearBgpShutdownRpc(object):
    """
    Clear all peers which were shut down due to low memory.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-shutdown'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpShutdownRpc']['meta_info']


class ClearBgpUpdateOutqAddressFamilyUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqAddressFamilyUpdateParentRpc']['meta_info']


class ClearBgpUpdateOutqAddressFamilyRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqAddressFamilyRpc']['meta_info']


class ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParentRpc']['meta_info']


class ClearBgpUpdateOutqNeighborIpAddrRefreshRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrRefreshRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqNeighborIpAddrRefreshRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRefreshRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRefreshRpc']['meta_info']


class ClearBgpUpdateOutqNeighborIpAddrUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqNeighborIpAddrUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrUpdateParentRpc']['meta_info']


class ClearBgpUpdateOutqNeighborIpAddrRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqNeighborIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRpc']['meta_info']


class ClearBgpUpdateOutqProcessRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Process.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):

        self.is_rpc = True

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-process'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqProcessRpc']['meta_info']


class ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParentRpc']['meta_info']


class ClearBgpUpdateOutqUpdateGroupSubGroupRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRpc']['meta_info']


class ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.refresh_sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc']['meta_info']


class ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.refresh_sub_group = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc']['meta_info']


class ClearBgpUpdateOutqUpdateGroupUpdateParentRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqUpdateGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupUpdateParentRpc']['meta_info']


class ClearBgpUpdateOutqUpdateGroupRpc(object):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpUpdateOutqUpdateGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.update_group = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.update_group is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupRpc']['meta_info']


class ClearBgpVersionIpAddrIpNetmaskRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpVersionIpAddrRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionIpAddrRpc']['meta_info']


class ClearBgpVersionIpPrefixRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionIpPrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiIpAddrIpNetmaskRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpVersionAfiSafiIpAddrRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpAddrRpc']['meta_info']


class ClearBgpVersionAfiSafiIpPrefixRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpPrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpVersionAfiSafiBridgeDomainIpAddrRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiBridgeDomainIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpAddrRpc']['meta_info']


class ClearBgpVersionAfiSafiBridgeDomainIpPrefixRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiBridgeDomainIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpPrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiRdIpAddrIpNetmaskRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpVersionAfiSafiRdIpAddrRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpAddrRpc']['meta_info']


class ClearBgpVersionAfiSafiRdIpPrefixRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpPrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiIpv4AddrIpv4MaskRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpVersionAfiSafiIpv4AddrRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv4AddrRpc']['meta_info']


class ClearBgpVersionAfiSafiIpv4PrefixRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv4PrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiRdIpv4AddrRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4AddrRpc']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv4AddrRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiVrfIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4AddrRpc']['meta_info']


class ClearBgpVersionAfiSafiNetworkRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiNetworkRpc']['meta_info']


class ClearBgpVersionAfiSafiRdNetworkRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdNetworkRpc']['meta_info']


class ClearBgpVersionAfiSafiVrfNetworkRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiVrfNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfNetworkRpc']['meta_info']


class ClearBgpVersionAfiSafiRtConstraintNetworkRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRtConstraintNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRtConstraintNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.rt_constraint_network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.rt_constraint_network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRtConstraintNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRtConstraintNetworkRpc']['meta_info']


class ClearBgpVersionAfiSafiIpv4TunnelNetworkRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4TunnelNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpv4TunnelNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_tunnel_network is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv4TunnelNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv4TunnelNetworkRpc']['meta_info']


class ClearBgpVersionAfiSafiIpv6AddrIpv6NetmaskRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpVersionAfiSafiIpv6AddrRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv6AddrRpc']['meta_info']


class ClearBgpVersionAfiSafiIpv6PrefixRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv6PrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiRdRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdRpc']['meta_info']


class ClearBgpVersionAfiSafiVrfRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiVrfRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfRpc']['meta_info']


class ClearBgpVersionAfiSafiRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRpc']['meta_info']


class ClearBgpVersionAfiSafiSrPolicyPrefixRpc(object):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiSrPolicyPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiSrPolicyPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.sr_policy_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.sr_policy_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiSrPolicyPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiSrPolicyPrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiBridgeDomainIpv4PrefixRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiBridgeDomainIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.bridge_domain_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpv4PrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiRdIpv4PrefixRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4PrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiMp2MpIpv4PrefixRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiMp2MpIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiMp2MpIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.mp2mp = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.mp2mp is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiMp2MpIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiMp2MpIpv4PrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv4PrefixRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiVrfIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4PrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiRdIpv4AddrIpv4MaskRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv4AddrIpv4MaskRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiVrfIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpVersionAfiSafiRdIpv6AddrRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6AddrRpc']['meta_info']


class ClearBgpVersionAfiSafiRdIpv6PrefixRpc(object):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiRdIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self.rd = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.rd is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6PrefixRpc']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv6AddrRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiVrfIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6AddrRpc']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv6PrefixRpc(object):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionAfiSafiVrfIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6PrefixRpc']['meta_info']


class ClearBgpVersionVrfIpAddrIpNetmaskRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfIpAddrIpNetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfIpAddrIpNetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.ip_netmask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.ip_netmask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfIpAddrIpNetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfIpAddrIpNetmaskRpc']['meta_info']


class ClearBgpVersionVrfIpAddrRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfIpAddrRpc']['meta_info']


class ClearBgpVersionVrfIpPrefixRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfIpPrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfIpPrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfIpPrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfIpPrefixRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv4PrefixRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4PrefixRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv4AddrIpv4MaskRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv4AddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiIpv4AddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4AddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4AddrIpv4MaskRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv4AddrRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv4AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiIpv4AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4AddrRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiNetworkRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiNetworkRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiRdNetworkRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiRdNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiRdNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.rd = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.rd is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiRdNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiRdNetworkRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiVrfNetworkRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiVrfNetworkRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiVrfNetworkRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.network = None
            self.vrf_all = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.network is not None:
                return True

            if self.vrf_all is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiVrfNetworkRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiVrfNetworkRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.ipv6_netmask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6AddrIpv6NetmaskRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv6AddrRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv6AddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiIpv6AddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6AddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6AddrRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv6PrefixRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6PrefixRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiRdRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiRdRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiRdRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.rd = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.rd is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiRdRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiRdRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiVrfRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiVrfRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiVrfRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None
            self.vrf_name = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            if self.vrf_name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiVrfRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiVrfRpc']['meta_info']


class ClearBgpVersionVrfAfiSafiRpc(object):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVersionVrfAfiSafiRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiRpc']['meta_info']


class ClearBgpVrfAllGracefulRpc(object):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAllGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAllGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAllGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAllGracefulRpc']['meta_info']


class ClearBgpVrfAllRpc(object):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAllRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAllRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAllRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAllRpc']['meta_info']


class ClearBgpVrfIpAddrGracefulRpc(object):
    """
    Specify a VRF.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfIpAddrGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfIpAddrGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfIpAddrGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfIpAddrGracefulRpc']['meta_info']


class ClearBgpVrfIpAddrLongLivedStaleRpc(object):
    """
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfIpAddrLongLivedStaleRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfIpAddrLongLivedStaleRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfIpAddrLongLivedStaleRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfIpAddrLongLivedStaleRpc']['meta_info']


class ClearBgpVrfIpAddrRpc(object):
    """
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfIpAddrRpc']['meta_info']


class ClearBgpVrfAsGracefulRpc(object):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAsGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAsGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.as_number = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.as_number is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAsGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAsGracefulRpc']['meta_info']


class ClearBgpVrfAsRpc(object):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.as_number = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.as_number is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAsRpc']['meta_info']


class ClearBgpVrfExternalGracefulRpc(object):
    """
    Specify a VRF.
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfExternalGracefulRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfExternalGracefulRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfExternalGracefulRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfExternalGracefulRpc']['meta_info']


class ClearBgpVrfExternalRpc(object):
    """
    Specify a VRF.
    Clear all external peers.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfExternalRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfExternalRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfExternalRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfExternalRpc']['meta_info']


class ClearBgpVrfAfiSafiAllSoftInPrefixFilterRpc(object):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiAllSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAllSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAllSoftInPrefixFilterRpc']['meta_info']


class ClearBgpVrfAfiSafiAllSoftInRpc(object):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiAllSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAllSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAllSoftInRpc']['meta_info']


class ClearBgpVrfAfiSafiAllSoftOutRpc(object):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiAllSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAllSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAllSoftOutRpc']['meta_info']


class ClearBgpVrfAfiSafiAllSoftRpc(object):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiAllSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAllSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAllSoftRpc']['meta_info']


class ClearBgpVrfAfiSafiIpAddrLongLivedStaleRpc(object):
    """
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrLongLivedStaleRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiIpAddrLongLivedStaleRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrLongLivedStaleRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrLongLivedStaleRpc']['meta_info']


class ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilterRpc(object):
    """
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilterRpc']['meta_info']


class ClearBgpVrfAfiSafiIpAddrSoftInRpc(object):
    """
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiIpAddrSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftInRpc']['meta_info']


class ClearBgpVrfAfiSafiIpAddrSoftOutRpc(object):
    """
    Specify a VRF.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiIpAddrSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftOutRpc']['meta_info']


class ClearBgpVrfAfiSafiIpAddrSoftRpc(object):
    """
    Specify a VRF.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiIpAddrSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftRpc']['meta_info']


class ClearBgpVrfAfiSafiAsSoftInPrefixFilterRpc(object):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiAsSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAsSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAsSoftInPrefixFilterRpc']['meta_info']


class ClearBgpVrfAfiSafiAsSoftInRpc(object):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiAsSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAsSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAsSoftInRpc']['meta_info']


class ClearBgpVrfAfiSafiAsSoftOutRpc(object):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiAsSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAsSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAsSoftOutRpc']['meta_info']


class ClearBgpVrfAfiSafiAsSoftRpc(object):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiAsSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 1..65535
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** (\\d+\\.\\d+)
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  int
        
        	**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        
        ----
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.as_number = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.as_number is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAsSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAsSoftRpc']['meta_info']


class ClearBgpVrfAfiSafiDampeningIpv4PrefixRpc(object):
    """
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiDampeningIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiDampeningIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiDampeningIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiDampeningIpv4PrefixRpc']['meta_info']


class ClearBgpVrfAfiSafiDampeningRpc(object):
    """
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiDampeningRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiDampeningRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiDampeningRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiDampeningRpc']['meta_info']


class ClearBgpVrfAfiSafiExternalSoftInPrefixFilterRpc(object):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftInPrefixFilterRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiExternalSoftInPrefixFilterRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftInPrefixFilterRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftInPrefixFilterRpc']['meta_info']


class ClearBgpVrfAfiSafiExternalSoftInRpc(object):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftInRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiExternalSoftInRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftInRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftInRpc']['meta_info']


class ClearBgpVrfAfiSafiExternalSoftOutRpc(object):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftOutRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiExternalSoftOutRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftOutRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftOutRpc']['meta_info']


class ClearBgpVrfAfiSafiExternalSoftRpc(object):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiExternalSoftRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftRpc']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc(object):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: ipv4_mask
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.ipv4_mask is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4MaskRpc']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsIpAddrRpc(object):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpAddrRpc']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsIpv4PrefixRpc(object):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpv4PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpv4PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv4_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpv4PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpv4PrefixRpc']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsRegexpRpc(object):
    """
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsRegexpRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiFlapStatisticsRegexpRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.regexp_pattern = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.regexp_pattern is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRegexpRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRegexpRpc']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsRoutePolicyRpc(object):
    """
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsRoutePolicyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiFlapStatisticsRoutePolicyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.route_policy_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.route_policy_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRoutePolicyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRoutePolicyRpc']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsRpc(object):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiFlapStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRpc']['meta_info']


class ClearBgpVrfAfiSafiNexthopPerformanceStatisticsRpc(object):
    """
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiNexthopPerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiNexthopPerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiNexthopPerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiNexthopPerformanceStatisticsRpc']['meta_info']


class ClearBgpVrfAfiSafiNexthopRegistrationIpAddrRpc(object):
    """
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiNexthopRegistrationIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiNexthopRegistrationIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiNexthopRegistrationIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiNexthopRegistrationIpAddrRpc']['meta_info']


class ClearBgpVrfAfiSafiSelfOriginatedRpc(object):
    """
    Specify a VRF.
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiSelfOriginatedRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiSelfOriginatedRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiSelfOriginatedRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiSelfOriginatedRpc']['meta_info']


class ClearBgpVrfAfiSafiShutdownRpc(object):
    """
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiShutdownRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiShutdownRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiShutdownRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiShutdownRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParentRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqAddressFamilyRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqAddressFamilyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqAddressFamilyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqAddressFamilyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqAddressFamilyRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParentRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParentRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParentRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.refresh_sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.refresh_sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParentRpc']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupRpc']['meta_info']


class ClearBgpVrfAfiSafiDampeningIpv6PrefixRpc(object):
    """
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiDampeningIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiDampeningIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiDampeningIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiDampeningIpv6PrefixRpc']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsIpv6PrefixRpc(object):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpv6PrefixRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpv6PrefixRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:   :py:class:`AfiSafiTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiTypeEnum>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.afi_safi_name is not None:
                return True

            if self.ipv6_prefix is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpv6PrefixRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpv6PrefixRpc']['meta_info']


class ClearBgpVrfNexthopPerformanceStatisticsRpc(object):
    """
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfNexthopPerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfNexthopPerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfNexthopPerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfNexthopPerformanceStatisticsRpc']['meta_info']


class ClearBgpVrfNexthopRegistrationIpAddrRpc(object):
    """
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfNexthopRegistrationIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfNexthopRegistrationIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfNexthopRegistrationIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfNexthopRegistrationIpAddrRpc']['meta_info']


class ClearBgpVrfPeerDropsAllRpc(object):
    """
    Specify a VRF.
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfPeerDropsAllRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfPeerDropsAllRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfPeerDropsAllRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfPeerDropsAllRpc']['meta_info']


class ClearBgpVrfPeerDropsIpAddrRpc(object):
    """
    Specify a VRF.
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfPeerDropsIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfPeerDropsIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfPeerDropsIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfPeerDropsIpAddrRpc']['meta_info']


class ClearBgpVrfPerformanceStatisticsRpc(object):
    """
    Specify a VRF.
    Clear performance statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfPerformanceStatisticsRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfPerformanceStatisticsRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfPerformanceStatisticsRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfPerformanceStatisticsRpc']['meta_info']


class ClearBgpVrfShutdownRpc(object):
    """
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfShutdownRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfShutdownRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfShutdownRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfShutdownRpc']['meta_info']


class ClearBgpVrfUpdateOutqAddressFamilyUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqAddressFamilyUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqAddressFamilyUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqAddressFamilyUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqAddressFamilyUpdateParentRpc']['meta_info']


class ClearBgpVrfUpdateOutqAddressFamilyRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqAddressFamilyRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqAddressFamilyRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqAddressFamilyRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqAddressFamilyRpc']['meta_info']


class ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParentRpc']['meta_info']


class ClearBgpVrfUpdateOutqNeighborIpAddrRefreshRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrRefreshRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrRefreshRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRefreshRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRefreshRpc']['meta_info']


class ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParentRpc']['meta_info']


class ClearBgpVrfUpdateOutqNeighborIpAddrRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: one of the below types:
        
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        
        ----
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.ip_addr = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.ip_addr is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRpc']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParentRpc']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupSubGroupRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRpc']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.refresh_sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParentRpc']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.refresh_sub_group = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.refresh_sub_group is not None:
                return True

            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupRpc']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupUpdateParentRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupUpdateParentRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqUpdateGroupUpdateParentRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupUpdateParentRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupUpdateParentRpc']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupRpc(object):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupRpc.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        self.input = ClearBgpVrfUpdateOutqUpdateGroupRpc.Input()
        self.input.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\:  str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: one of the below types:
        
        	**type**\:   :py:class:`VrfNameEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfNameEnum>`
        
        	**mandatory**\: True
        
        
        ----
        	**type**\:  str
        
        	**mandatory**\: True
        
        
        ----
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            self.parent = None
            self.update_group = None
            self.vrf_all = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group/Cisco-IOS-XR-ipv4-bgp-act:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.update_group is not None:
                return True

            if self.vrf_all is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupRpc.Input']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupRpc']['meta_info']


