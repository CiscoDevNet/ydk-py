""" Cisco_IOS_XR_asic_errors_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR asic\-errors package operational data.

This module contains definitions
for the following management objects\:
  asic\-errors\: Error summary of all asics

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError




class AsicErrors(object):
    """
    Error summary of all asics
    
    .. attribute:: nodes
    
    	Asic errors for each available nodes
    	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes>`
    
    

    """

    _prefix = 'asic-errors-oper'
    _revision = '2015-11-09'

    def __init__(self):
        self.nodes = AsicErrors.Nodes()
        self.nodes.parent = self


    class Nodes(object):
        """
        Asic errors for each available nodes
        
        .. attribute:: node
        
        	Asic error for a particular node
        	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node>`
        
        

        """

        _prefix = 'asic-errors-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.node = YList()
            self.node.parent = self
            self.node.name = 'node'


        class Node(object):
            """
            Asic error for a particular node
            
            .. attribute:: node_name  <key>
            
            	Node ID
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: asic_information
            
            	Asic on the node
            	**type**\: list of    :py:class:`AsicInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation>`
            
            

            """

            _prefix = 'asic-errors-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.node_name = None
                self.asic_information = YList()
                self.asic_information.parent = self
                self.asic_information.name = 'asic_information'


            class AsicInformation(object):
                """
                Asic on the node
                
                .. attribute:: asic  <key>
                
                	Asic string
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: all_instances
                
                	All asic instance on the node
                	**type**\:   :py:class:`AllInstances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.AllInstances>`
                
                .. attribute:: instances
                
                	All asic errors  on the node
                	**type**\:   :py:class:`Instances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances>`
                
                

                """

                _prefix = 'asic-errors-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.asic = None
                    self.all_instances = AsicErrors.Nodes.Node.AsicInformation.AllInstances()
                    self.all_instances.parent = self
                    self.instances = AsicErrors.Nodes.Node.AsicInformation.Instances()
                    self.instances.parent = self


                class AllInstances(object):
                    """
                    All asic instance on the node
                    
                    .. attribute:: all_error_path
                    
                    	Error path of all instances
                    	**type**\:   :py:class:`AllErrorPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath>`
                    
                    

                    """

                    _prefix = 'asic-errors-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.all_error_path = AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath()
                        self.all_error_path.parent = self


                    class AllErrorPath(object):
                        """
                        Error path of all instances
                        
                        .. attribute:: summary
                        
                        	Summary of all instances errors
                        	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary>`
                        
                        

                        """

                        _prefix = 'asic-errors-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.summary = AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary()
                            self.summary.parent = self


                        class Summary(object):
                            """
                            Summary of all instances errors
                            
                            .. attribute:: cih_client
                            
                            	cih client
                            	**type**\:  bool
                            
                            .. attribute:: legacy_client
                            
                            	legacy client
                            	**type**\:  bool
                            
                            .. attribute:: sum_data
                            
                            	sum data
                            	**type**\: list of    :py:class:`SumData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary.SumData>`
                            
                            

                            """

                            _prefix = 'asic-errors-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.cih_client = None
                                self.legacy_client = None
                                self.sum_data = YList()
                                self.sum_data.parent = self
                                self.sum_data.name = 'sum_data'


                            class SumData(object):
                                """
                                sum data
                                
                                .. attribute:: crc_err_count
                                
                                	crc err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: err_count
                                
                                	err count
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: gen_err_count
                                
                                	gen err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: mbe_err_count
                                
                                	mbe err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: node_key
                                
                                	node key
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: num_nodes
                                
                                	num nodes
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: par_err_count
                                
                                	par err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pcie_err_count
                                
                                	pcie err count
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: reset_err_count
                                
                                	reset err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sbe_err_count
                                
                                	sbe err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.crc_err_count = None
                                    self.err_count = YLeafList()
                                    self.err_count.parent = self
                                    self.err_count.name = 'err_count'
                                    self.gen_err_count = None
                                    self.mbe_err_count = None
                                    self.node_key = YLeafList()
                                    self.node_key.parent = self
                                    self.node_key.name = 'node_key'
                                    self.num_nodes = None
                                    self.par_err_count = None
                                    self.pcie_err_count = YLeafList()
                                    self.pcie_err_count.parent = self
                                    self.pcie_err_count.name = 'pcie_err_count'
                                    self.reset_err_count = None
                                    self.sbe_err_count = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:sum-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.crc_err_count is not None:
                                        return True

                                    if self.err_count is not None:
                                        for child in self.err_count:
                                            if child is not None:
                                                return True

                                    if self.gen_err_count is not None:
                                        return True

                                    if self.mbe_err_count is not None:
                                        return True

                                    if self.node_key is not None:
                                        for child in self.node_key:
                                            if child is not None:
                                                return True

                                    if self.num_nodes is not None:
                                        return True

                                    if self.par_err_count is not None:
                                        return True

                                    if self.pcie_err_count is not None:
                                        for child in self.pcie_err_count:
                                            if child is not None:
                                                return True

                                    if self.reset_err_count is not None:
                                        return True

                                    if self.sbe_err_count is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary.SumData']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:summary'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.cih_client is not None:
                                    return True

                                if self.legacy_client is not None:
                                    return True

                                if self.sum_data is not None:
                                    for child_ref in self.sum_data:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:all-error-path'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.summary is not None and self.summary._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:all-instances'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.all_error_path is not None and self.all_error_path._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.AllInstances']['meta_info']


                class Instances(object):
                    """
                    All asic errors  on the node
                    
                    .. attribute:: instance
                    
                    	Particular asic instance on the node
                    	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance>`
                    
                    

                    """

                    _prefix = 'asic-errors-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.instance = YList()
                        self.instance.parent = self
                        self.instance.name = 'instance'


                    class Instance(object):
                        """
                        Particular asic instance on the node
                        
                        .. attribute:: asic_instance  <key>
                        
                        	asic instance
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: error_path
                        
                        	Error path of the instances
                        	**type**\:   :py:class:`ErrorPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath>`
                        
                        

                        """

                        _prefix = 'asic-errors-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.asic_instance = None
                            self.error_path = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath()
                            self.error_path.parent = self


                        class ErrorPath(object):
                            """
                            Error path of the instances
                            
                            .. attribute:: asic_error_crc_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorCrcHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard>`
                            
                            .. attribute:: asic_error_crc_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorCrcSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft>`
                            
                            .. attribute:: asic_error_generic_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorGenericHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard>`
                            
                            .. attribute:: asic_error_generic_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorGenericSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft>`
                            
                            .. attribute:: asic_error_mbe_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorMbeHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard>`
                            
                            .. attribute:: asic_error_mbe_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorMbeSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft>`
                            
                            .. attribute:: asic_error_parity_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorParityHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard>`
                            
                            .. attribute:: asic_error_parity_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorParitySoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft>`
                            
                            .. attribute:: asic_error_reset_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorResetHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard>`
                            
                            .. attribute:: asic_error_reset_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorResetSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft>`
                            
                            .. attribute:: asic_error_sbe_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorSbeHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard>`
                            
                            .. attribute:: asic_error_sbe_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorSbeSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft>`
                            
                            .. attribute:: back_pressure_hard_errors
                            
                            	BP hard error information
                            	**type**\:   :py:class:`BackPressureHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors>`
                            
                            .. attribute:: back_pressure_soft_errors
                            
                            	BP soft error information
                            	**type**\:   :py:class:`BackPressureSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors>`
                            
                            .. attribute:: barrier_hard_errors
                            
                            	Barrier hard error information
                            	**type**\:   :py:class:`BarrierHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors>`
                            
                            .. attribute:: barrier_soft_errors
                            
                            	Barrier soft error information
                            	**type**\:   :py:class:`BarrierSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors>`
                            
                            .. attribute:: configuration_hard_errors
                            
                            	Configuration hard error information
                            	**type**\:   :py:class:`ConfigurationHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors>`
                            
                            .. attribute:: configuration_soft_errors
                            
                            	Configuration soft error information
                            	**type**\:   :py:class:`ConfigurationSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors>`
                            
                            .. attribute:: crc_hard_errors
                            
                            	CRC hard error information
                            	**type**\:   :py:class:`CrcHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors>`
                            
                            .. attribute:: crc_soft_errors
                            
                            	CRC soft error information
                            	**type**\:   :py:class:`CrcSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors>`
                            
                            .. attribute:: descriptor_hard_errors
                            
                            	Descriptor hard error information
                            	**type**\:   :py:class:`DescriptorHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors>`
                            
                            .. attribute:: descriptor_soft_errors
                            
                            	Descriptor soft error information
                            	**type**\:   :py:class:`DescriptorSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors>`
                            
                            .. attribute:: generic_hard_errors
                            
                            	Generic hard error information
                            	**type**\:   :py:class:`GenericHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors>`
                            
                            .. attribute:: generic_soft_errors
                            
                            	Generic soft error information
                            	**type**\:   :py:class:`GenericSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors>`
                            
                            .. attribute:: hardware_hard_errors
                            
                            	Hardware hard error information
                            	**type**\:   :py:class:`HardwareHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors>`
                            
                            .. attribute:: hardware_soft_errors
                            
                            	Hardware soft error information
                            	**type**\:   :py:class:`HardwareSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors>`
                            
                            .. attribute:: indirect_hard_errors
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`IndirectHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors>`
                            
                            .. attribute:: indirect_soft_errors
                            
                            	Indirect soft error information
                            	**type**\:   :py:class:`IndirectSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors>`
                            
                            .. attribute:: instance_summary
                            
                            	Summary for a specific instance
                            	**type**\:   :py:class:`InstanceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary>`
                            
                            .. attribute:: interface_hard_errors
                            
                            	Interface hard error information
                            	**type**\:   :py:class:`InterfaceHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors>`
                            
                            .. attribute:: interface_soft_errors
                            
                            	Interface soft error information
                            	**type**\:   :py:class:`InterfaceSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors>`
                            
                            .. attribute:: io_hard_errors
                            
                            	IO hard error information
                            	**type**\:   :py:class:`IoHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors>`
                            
                            .. attribute:: io_soft_errors
                            
                            	IO soft error information
                            	**type**\:   :py:class:`IoSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors>`
                            
                            .. attribute:: link_hard_errors
                            
                            	Link hard error information
                            	**type**\:   :py:class:`LinkHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors>`
                            
                            .. attribute:: link_soft_errors
                            
                            	Link soft error information
                            	**type**\:   :py:class:`LinkSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors>`
                            
                            .. attribute:: multiple_bit_hard_errors
                            
                            	Multiple bit hard error information
                            	**type**\:   :py:class:`MultipleBitHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors>`
                            
                            .. attribute:: multiple_bit_soft_errors
                            
                            	Multiple bit soft error information
                            	**type**\:   :py:class:`MultipleBitSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors>`
                            
                            .. attribute:: outof_resource_hard
                            
                            	OOR thresh information
                            	**type**\:   :py:class:`OutofResourceHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard>`
                            
                            .. attribute:: outof_resource_soft
                            
                            	OOR thresh information
                            	**type**\:   :py:class:`OutofResourceSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft>`
                            
                            .. attribute:: parity_hard_errors
                            
                            	Parity hard error information
                            	**type**\:   :py:class:`ParityHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors>`
                            
                            .. attribute:: parity_soft_errors
                            
                            	Parity soft error information
                            	**type**\:   :py:class:`ParitySoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors>`
                            
                            .. attribute:: reset_hard_errors
                            
                            	Reset hard error information
                            	**type**\:   :py:class:`ResetHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors>`
                            
                            .. attribute:: reset_soft_errors
                            
                            	Reset soft error information
                            	**type**\:   :py:class:`ResetSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors>`
                            
                            .. attribute:: single_bit_hard_errors
                            
                            	Single bit hard error information
                            	**type**\:   :py:class:`SingleBitHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors>`
                            
                            .. attribute:: single_bit_soft_errors
                            
                            	Single bit soft error information
                            	**type**\:   :py:class:`SingleBitSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors>`
                            
                            .. attribute:: time_out_hard_errors
                            
                            	Time out hard error information
                            	**type**\:   :py:class:`TimeOutHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors>`
                            
                            .. attribute:: time_out_soft_errors
                            
                            	Time out soft error information
                            	**type**\:   :py:class:`TimeOutSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors>`
                            
                            .. attribute:: ucode_hard_errors
                            
                            	UCode hard error information
                            	**type**\:   :py:class:`UcodeHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors>`
                            
                            .. attribute:: ucode_soft_errors
                            
                            	Ucode soft error information
                            	**type**\:   :py:class:`UcodeSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors>`
                            
                            .. attribute:: unexpected_hard_errors
                            
                            	Unexpected hard error information
                            	**type**\:   :py:class:`UnexpectedHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors>`
                            
                            .. attribute:: unexpected_soft_errors
                            
                            	Unexpected soft error information
                            	**type**\:   :py:class:`UnexpectedSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors>`
                            
                            

                            """

                            _prefix = 'asic-errors-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.asic_error_crc_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard()
                                self.asic_error_crc_hard.parent = self
                                self.asic_error_crc_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft()
                                self.asic_error_crc_soft.parent = self
                                self.asic_error_generic_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard()
                                self.asic_error_generic_hard.parent = self
                                self.asic_error_generic_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft()
                                self.asic_error_generic_soft.parent = self
                                self.asic_error_mbe_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard()
                                self.asic_error_mbe_hard.parent = self
                                self.asic_error_mbe_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft()
                                self.asic_error_mbe_soft.parent = self
                                self.asic_error_parity_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard()
                                self.asic_error_parity_hard.parent = self
                                self.asic_error_parity_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft()
                                self.asic_error_parity_soft.parent = self
                                self.asic_error_reset_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard()
                                self.asic_error_reset_hard.parent = self
                                self.asic_error_reset_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft()
                                self.asic_error_reset_soft.parent = self
                                self.asic_error_sbe_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard()
                                self.asic_error_sbe_hard.parent = self
                                self.asic_error_sbe_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft()
                                self.asic_error_sbe_soft.parent = self
                                self.back_pressure_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors()
                                self.back_pressure_hard_errors.parent = self
                                self.back_pressure_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors()
                                self.back_pressure_soft_errors.parent = self
                                self.barrier_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors()
                                self.barrier_hard_errors.parent = self
                                self.barrier_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors()
                                self.barrier_soft_errors.parent = self
                                self.configuration_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors()
                                self.configuration_hard_errors.parent = self
                                self.configuration_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors()
                                self.configuration_soft_errors.parent = self
                                self.crc_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors()
                                self.crc_hard_errors.parent = self
                                self.crc_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors()
                                self.crc_soft_errors.parent = self
                                self.descriptor_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors()
                                self.descriptor_hard_errors.parent = self
                                self.descriptor_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors()
                                self.descriptor_soft_errors.parent = self
                                self.generic_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors()
                                self.generic_hard_errors.parent = self
                                self.generic_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors()
                                self.generic_soft_errors.parent = self
                                self.hardware_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors()
                                self.hardware_hard_errors.parent = self
                                self.hardware_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors()
                                self.hardware_soft_errors.parent = self
                                self.indirect_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors()
                                self.indirect_hard_errors.parent = self
                                self.indirect_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors()
                                self.indirect_soft_errors.parent = self
                                self.instance_summary = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary()
                                self.instance_summary.parent = self
                                self.interface_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors()
                                self.interface_hard_errors.parent = self
                                self.interface_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors()
                                self.interface_soft_errors.parent = self
                                self.io_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors()
                                self.io_hard_errors.parent = self
                                self.io_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors()
                                self.io_soft_errors.parent = self
                                self.link_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors()
                                self.link_hard_errors.parent = self
                                self.link_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors()
                                self.link_soft_errors.parent = self
                                self.multiple_bit_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors()
                                self.multiple_bit_hard_errors.parent = self
                                self.multiple_bit_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors()
                                self.multiple_bit_soft_errors.parent = self
                                self.outof_resource_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard()
                                self.outof_resource_hard.parent = self
                                self.outof_resource_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft()
                                self.outof_resource_soft.parent = self
                                self.parity_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors()
                                self.parity_hard_errors.parent = self
                                self.parity_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors()
                                self.parity_soft_errors.parent = self
                                self.reset_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors()
                                self.reset_hard_errors.parent = self
                                self.reset_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors()
                                self.reset_soft_errors.parent = self
                                self.single_bit_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors()
                                self.single_bit_hard_errors.parent = self
                                self.single_bit_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors()
                                self.single_bit_soft_errors.parent = self
                                self.time_out_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors()
                                self.time_out_hard_errors.parent = self
                                self.time_out_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors()
                                self.time_out_soft_errors.parent = self
                                self.ucode_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors()
                                self.ucode_hard_errors.parent = self
                                self.ucode_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors()
                                self.ucode_soft_errors.parent = self
                                self.unexpected_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors()
                                self.unexpected_hard_errors.parent = self
                                self.unexpected_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors()
                                self.unexpected_soft_errors.parent = self


                            class MultipleBitSoftErrors(object):
                                """
                                Multiple bit soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:multiple-bit-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors']['meta_info']


                            class AsicErrorGenericSoft(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-generic-soft'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft']['meta_info']


                            class CrcHardErrors(object):
                                """
                                CRC hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:crc-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors']['meta_info']


                            class AsicErrorSbeSoft(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-sbe-soft'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft']['meta_info']


                            class HardwareSoftErrors(object):
                                """
                                Hardware soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:hardware-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors']['meta_info']


                            class AsicErrorCrcSoft(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-crc-soft'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft']['meta_info']


                            class AsicErrorParitySoft(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-parity-soft'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft']['meta_info']


                            class IoSoftErrors(object):
                                """
                                IO soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:io-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors']['meta_info']


                            class ResetSoftErrors(object):
                                """
                                Reset soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:reset-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors']['meta_info']


                            class BarrierHardErrors(object):
                                """
                                Barrier hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:barrier-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors']['meta_info']


                            class UcodeSoftErrors(object):
                                """
                                Ucode soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:ucode-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors']['meta_info']


                            class AsicErrorResetHard(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-reset-hard'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard']['meta_info']


                            class SingleBitHardErrors(object):
                                """
                                Single bit hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:single-bit-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors']['meta_info']


                            class IndirectHardErrors(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:indirect-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors']['meta_info']


                            class OutofResourceSoft(object):
                                """
                                OOR thresh information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:outof-resource-soft'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft']['meta_info']


                            class CrcSoftErrors(object):
                                """
                                CRC soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:crc-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors']['meta_info']


                            class TimeOutHardErrors(object):
                                """
                                Time out hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:time-out-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors']['meta_info']


                            class BarrierSoftErrors(object):
                                """
                                Barrier soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:barrier-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors']['meta_info']


                            class AsicErrorMbeSoft(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-mbe-soft'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft']['meta_info']


                            class BackPressureHardErrors(object):
                                """
                                BP hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:back-pressure-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors']['meta_info']


                            class SingleBitSoftErrors(object):
                                """
                                Single bit soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:single-bit-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors']['meta_info']


                            class IndirectSoftErrors(object):
                                """
                                Indirect soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:indirect-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors']['meta_info']


                            class GenericHardErrors(object):
                                """
                                Generic hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:generic-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors']['meta_info']


                            class LinkHardErrors(object):
                                """
                                Link hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:link-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors']['meta_info']


                            class ConfigurationHardErrors(object):
                                """
                                Configuration hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:configuration-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors']['meta_info']


                            class InstanceSummary(object):
                                """
                                Summary for a specific instance
                                
                                .. attribute:: cih_client
                                
                                	cih client
                                	**type**\:  bool
                                
                                .. attribute:: legacy_client
                                
                                	legacy client
                                	**type**\:  bool
                                
                                .. attribute:: sum_data
                                
                                	sum data
                                	**type**\: list of    :py:class:`SumData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary.SumData>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.cih_client = None
                                    self.legacy_client = None
                                    self.sum_data = YList()
                                    self.sum_data.parent = self
                                    self.sum_data.name = 'sum_data'


                                class SumData(object):
                                    """
                                    sum data
                                    
                                    .. attribute:: crc_err_count
                                    
                                    	crc err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: err_count
                                    
                                    	err count
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: gen_err_count
                                    
                                    	gen err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: mbe_err_count
                                    
                                    	mbe err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: node_key
                                    
                                    	node key
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: num_nodes
                                    
                                    	num nodes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: par_err_count
                                    
                                    	par err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: pcie_err_count
                                    
                                    	pcie err count
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reset_err_count
                                    
                                    	reset err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sbe_err_count
                                    
                                    	sbe err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.crc_err_count = None
                                        self.err_count = YLeafList()
                                        self.err_count.parent = self
                                        self.err_count.name = 'err_count'
                                        self.gen_err_count = None
                                        self.mbe_err_count = None
                                        self.node_key = YLeafList()
                                        self.node_key.parent = self
                                        self.node_key.name = 'node_key'
                                        self.num_nodes = None
                                        self.par_err_count = None
                                        self.pcie_err_count = YLeafList()
                                        self.pcie_err_count.parent = self
                                        self.pcie_err_count.name = 'pcie_err_count'
                                        self.reset_err_count = None
                                        self.sbe_err_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:sum-data'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.crc_err_count is not None:
                                            return True

                                        if self.err_count is not None:
                                            for child in self.err_count:
                                                if child is not None:
                                                    return True

                                        if self.gen_err_count is not None:
                                            return True

                                        if self.mbe_err_count is not None:
                                            return True

                                        if self.node_key is not None:
                                            for child in self.node_key:
                                                if child is not None:
                                                    return True

                                        if self.num_nodes is not None:
                                            return True

                                        if self.par_err_count is not None:
                                            return True

                                        if self.pcie_err_count is not None:
                                            for child in self.pcie_err_count:
                                                if child is not None:
                                                    return True

                                        if self.reset_err_count is not None:
                                            return True

                                        if self.sbe_err_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary.SumData']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:instance-summary'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.cih_client is not None:
                                        return True

                                    if self.legacy_client is not None:
                                        return True

                                    if self.sum_data is not None:
                                        for child_ref in self.sum_data:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary']['meta_info']


                            class UnexpectedHardErrors(object):
                                """
                                Unexpected hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:unexpected-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors']['meta_info']


                            class TimeOutSoftErrors(object):
                                """
                                Time out soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:time-out-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors']['meta_info']


                            class AsicErrorGenericHard(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-generic-hard'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard']['meta_info']


                            class ParityHardErrors(object):
                                """
                                Parity hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:parity-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors']['meta_info']


                            class DescriptorHardErrors(object):
                                """
                                Descriptor hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:descriptor-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors']['meta_info']


                            class InterfaceHardErrors(object):
                                """
                                Interface hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:interface-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors']['meta_info']


                            class AsicErrorSbeHard(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-sbe-hard'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard']['meta_info']


                            class AsicErrorCrcHard(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-crc-hard'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard']['meta_info']


                            class AsicErrorParityHard(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-parity-hard'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard']['meta_info']


                            class AsicErrorResetSoft(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-reset-soft'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft']['meta_info']


                            class BackPressureSoftErrors(object):
                                """
                                BP soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:back-pressure-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors']['meta_info']


                            class GenericSoftErrors(object):
                                """
                                Generic soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:generic-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors']['meta_info']


                            class LinkSoftErrors(object):
                                """
                                Link soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:link-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors']['meta_info']


                            class ConfigurationSoftErrors(object):
                                """
                                Configuration soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:configuration-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors']['meta_info']


                            class MultipleBitHardErrors(object):
                                """
                                Multiple bit hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:multiple-bit-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors']['meta_info']


                            class UnexpectedSoftErrors(object):
                                """
                                Unexpected soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:unexpected-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors']['meta_info']


                            class OutofResourceHard(object):
                                """
                                OOR thresh information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:outof-resource-hard'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard']['meta_info']


                            class HardwareHardErrors(object):
                                """
                                Hardware hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:hardware-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors']['meta_info']


                            class ParitySoftErrors(object):
                                """
                                Parity soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:parity-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors']['meta_info']


                            class DescriptorSoftErrors(object):
                                """
                                Descriptor soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:descriptor-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors']['meta_info']


                            class InterfaceSoftErrors(object):
                                """
                                Interface soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:interface-soft-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors']['meta_info']


                            class IoHardErrors(object):
                                """
                                IO hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:io-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors']['meta_info']


                            class ResetHardErrors(object):
                                """
                                Reset hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:reset-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors']['meta_info']


                            class UcodeHardErrors(object):
                                """
                                UCode hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:ucode-hard-errors'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors']['meta_info']


                            class AsicErrorMbeHard(object):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.error = YList()
                                    self.error.parent = self
                                    self.error.name = 'error'


                                class Error(object):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.alarm_on = None
                                        self.asic_info = None
                                        self.count = None
                                        self.csrs_info = YList()
                                        self.csrs_info.parent = self
                                        self.csrs_info.name = 'csrs_info'
                                        self.intr_type = None
                                        self.last_cleared = None
                                        self.last_err = YList()
                                        self.last_err.parent = self
                                        self.last_err.name = 'last_err'
                                        self.leaf_id = None
                                        self.name = None
                                        self.node_key = None
                                        self.period_hi = None
                                        self.period_lo = None
                                        self.thresh_hi = None
                                        self.thresh_lo = None


                                    class CsrsInfo(object):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None
                                            self.name = None
                                            self.width = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:csrs-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            if self.name is not None:
                                                return True

                                            if self.width is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.CsrsInfo']['meta_info']


                                    class LastErr(object):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.at_time = None
                                            self.at_time_nsec = None
                                            self.counter_val = None
                                            self.error_desc = None
                                            self.error_regval = YLeafList()
                                            self.error_regval.parent = self
                                            self.error_regval.name = 'error_regval'

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:last-err'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.at_time is not None:
                                                return True

                                            if self.at_time_nsec is not None:
                                                return True

                                            if self.counter_val is not None:
                                                return True

                                            if self.error_desc is not None:
                                                return True

                                            if self.error_regval is not None:
                                                for child in self.error_regval:
                                                    if child is not None:
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.LastErr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.alarm_on is not None:
                                            return True

                                        if self.asic_info is not None:
                                            return True

                                        if self.count is not None:
                                            return True

                                        if self.csrs_info is not None:
                                            for child_ref in self.csrs_info:
                                                if child_ref._has_data():
                                                    return True

                                        if self.intr_type is not None:
                                            return True

                                        if self.last_cleared is not None:
                                            return True

                                        if self.last_err is not None:
                                            for child_ref in self.last_err:
                                                if child_ref._has_data():
                                                    return True

                                        if self.leaf_id is not None:
                                            return True

                                        if self.name is not None:
                                            return True

                                        if self.node_key is not None:
                                            return True

                                        if self.period_hi is not None:
                                            return True

                                        if self.period_lo is not None:
                                            return True

                                        if self.thresh_hi is not None:
                                            return True

                                        if self.thresh_lo is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-error-mbe-hard'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.error is not None:
                                        for child_ref in self.error:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:error-path'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.asic_error_crc_hard is not None and self.asic_error_crc_hard._has_data():
                                    return True

                                if self.asic_error_crc_soft is not None and self.asic_error_crc_soft._has_data():
                                    return True

                                if self.asic_error_generic_hard is not None and self.asic_error_generic_hard._has_data():
                                    return True

                                if self.asic_error_generic_soft is not None and self.asic_error_generic_soft._has_data():
                                    return True

                                if self.asic_error_mbe_hard is not None and self.asic_error_mbe_hard._has_data():
                                    return True

                                if self.asic_error_mbe_soft is not None and self.asic_error_mbe_soft._has_data():
                                    return True

                                if self.asic_error_parity_hard is not None and self.asic_error_parity_hard._has_data():
                                    return True

                                if self.asic_error_parity_soft is not None and self.asic_error_parity_soft._has_data():
                                    return True

                                if self.asic_error_reset_hard is not None and self.asic_error_reset_hard._has_data():
                                    return True

                                if self.asic_error_reset_soft is not None and self.asic_error_reset_soft._has_data():
                                    return True

                                if self.asic_error_sbe_hard is not None and self.asic_error_sbe_hard._has_data():
                                    return True

                                if self.asic_error_sbe_soft is not None and self.asic_error_sbe_soft._has_data():
                                    return True

                                if self.back_pressure_hard_errors is not None and self.back_pressure_hard_errors._has_data():
                                    return True

                                if self.back_pressure_soft_errors is not None and self.back_pressure_soft_errors._has_data():
                                    return True

                                if self.barrier_hard_errors is not None and self.barrier_hard_errors._has_data():
                                    return True

                                if self.barrier_soft_errors is not None and self.barrier_soft_errors._has_data():
                                    return True

                                if self.configuration_hard_errors is not None and self.configuration_hard_errors._has_data():
                                    return True

                                if self.configuration_soft_errors is not None and self.configuration_soft_errors._has_data():
                                    return True

                                if self.crc_hard_errors is not None and self.crc_hard_errors._has_data():
                                    return True

                                if self.crc_soft_errors is not None and self.crc_soft_errors._has_data():
                                    return True

                                if self.descriptor_hard_errors is not None and self.descriptor_hard_errors._has_data():
                                    return True

                                if self.descriptor_soft_errors is not None and self.descriptor_soft_errors._has_data():
                                    return True

                                if self.generic_hard_errors is not None and self.generic_hard_errors._has_data():
                                    return True

                                if self.generic_soft_errors is not None and self.generic_soft_errors._has_data():
                                    return True

                                if self.hardware_hard_errors is not None and self.hardware_hard_errors._has_data():
                                    return True

                                if self.hardware_soft_errors is not None and self.hardware_soft_errors._has_data():
                                    return True

                                if self.indirect_hard_errors is not None and self.indirect_hard_errors._has_data():
                                    return True

                                if self.indirect_soft_errors is not None and self.indirect_soft_errors._has_data():
                                    return True

                                if self.instance_summary is not None and self.instance_summary._has_data():
                                    return True

                                if self.interface_hard_errors is not None and self.interface_hard_errors._has_data():
                                    return True

                                if self.interface_soft_errors is not None and self.interface_soft_errors._has_data():
                                    return True

                                if self.io_hard_errors is not None and self.io_hard_errors._has_data():
                                    return True

                                if self.io_soft_errors is not None and self.io_soft_errors._has_data():
                                    return True

                                if self.link_hard_errors is not None and self.link_hard_errors._has_data():
                                    return True

                                if self.link_soft_errors is not None and self.link_soft_errors._has_data():
                                    return True

                                if self.multiple_bit_hard_errors is not None and self.multiple_bit_hard_errors._has_data():
                                    return True

                                if self.multiple_bit_soft_errors is not None and self.multiple_bit_soft_errors._has_data():
                                    return True

                                if self.outof_resource_hard is not None and self.outof_resource_hard._has_data():
                                    return True

                                if self.outof_resource_soft is not None and self.outof_resource_soft._has_data():
                                    return True

                                if self.parity_hard_errors is not None and self.parity_hard_errors._has_data():
                                    return True

                                if self.parity_soft_errors is not None and self.parity_soft_errors._has_data():
                                    return True

                                if self.reset_hard_errors is not None and self.reset_hard_errors._has_data():
                                    return True

                                if self.reset_soft_errors is not None and self.reset_soft_errors._has_data():
                                    return True

                                if self.single_bit_hard_errors is not None and self.single_bit_hard_errors._has_data():
                                    return True

                                if self.single_bit_soft_errors is not None and self.single_bit_soft_errors._has_data():
                                    return True

                                if self.time_out_hard_errors is not None and self.time_out_hard_errors._has_data():
                                    return True

                                if self.time_out_soft_errors is not None and self.time_out_soft_errors._has_data():
                                    return True

                                if self.ucode_hard_errors is not None and self.ucode_hard_errors._has_data():
                                    return True

                                if self.ucode_soft_errors is not None and self.ucode_soft_errors._has_data():
                                    return True

                                if self.unexpected_hard_errors is not None and self.unexpected_hard_errors._has_data():
                                    return True

                                if self.unexpected_soft_errors is not None and self.unexpected_soft_errors._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                                return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.asic_instance is None:
                                raise YPYModelError('Key property asic_instance is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:instance[Cisco-IOS-XR-asic-errors-oper:asic-instance = ' + str(self.asic_instance) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.asic_instance is not None:
                                return True

                            if self.error_path is not None and self.error_path._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                            return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances.Instance']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:instances'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.instance is not None:
                            for child_ref in self.instance:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                        return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation.Instances']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.asic is None:
                        raise YPYModelError('Key property asic is None')

                    return self.parent._common_path +'/Cisco-IOS-XR-asic-errors-oper:asic-information[Cisco-IOS-XR-asic-errors-oper:asic = ' + str(self.asic) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.asic is not None:
                        return True

                    if self.all_instances is not None and self.all_instances._has_data():
                        return True

                    if self.instances is not None and self.instances._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                    return meta._meta_table['AsicErrors.Nodes.Node.AsicInformation']['meta_info']

            @property
            def _common_path(self):
                if self.node_name is None:
                    raise YPYModelError('Key property node_name is None')

                return '/Cisco-IOS-XR-asic-errors-oper:asic-errors/Cisco-IOS-XR-asic-errors-oper:nodes/Cisco-IOS-XR-asic-errors-oper:node[Cisco-IOS-XR-asic-errors-oper:node-name = ' + str(self.node_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.node_name is not None:
                    return True

                if self.asic_information is not None:
                    for child_ref in self.asic_information:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
                return meta._meta_table['AsicErrors.Nodes.Node']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-asic-errors-oper:asic-errors/Cisco-IOS-XR-asic-errors-oper:nodes'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.node is not None:
                for child_ref in self.node:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
            return meta._meta_table['AsicErrors.Nodes']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-asic-errors-oper:asic-errors'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return False

    def _has_data(self):
        if not self.is_config():
            return False
        if self.nodes is not None and self.nodes._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_asic_errors_oper as meta
        return meta._meta_table['AsicErrors']['meta_info']


