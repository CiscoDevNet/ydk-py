""" Cisco_IOS_XR_asic_errors_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR asic\-errors package operational data.

This module contains definitions
for the following management objects\:
  asic\-errors\: Error summary of all asics

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class AsicErrors(Entity):
    """
    Error summary of all asics
    
    .. attribute:: nodes
    
    	Asic errors for each available nodes
    	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes>`
    
    

    """

    _prefix = 'asic-errors-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(AsicErrors, self).__init__()
        self._top_entity = None

        self.yang_name = "asic-errors"
        self.yang_parent_name = "Cisco-IOS-XR-asic-errors-oper"

        self.nodes = AsicErrors.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")


    class Nodes(Entity):
        """
        Asic errors for each available nodes
        
        .. attribute:: node
        
        	Asic error for a particular node
        	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node>`
        
        

        """

        _prefix = 'asic-errors-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(AsicErrors.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "asic-errors"

            self.node = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(AsicErrors.Nodes, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(AsicErrors.Nodes, self).__setattr__(name, value)


        class Node(Entity):
            """
            Asic error for a particular node
            
            .. attribute:: node_name  <key>
            
            	Node ID
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: asic_information
            
            	Asic on the node
            	**type**\: list of    :py:class:`AsicInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation>`
            
            

            """

            _prefix = 'asic-errors-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(AsicErrors.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"

                self.node_name = YLeaf(YType.str, "node-name")

                self.asic_information = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("node_name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(AsicErrors.Nodes.Node, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(AsicErrors.Nodes.Node, self).__setattr__(name, value)


            class AsicInformation(Entity):
                """
                Asic on the node
                
                .. attribute:: asic  <key>
                
                	Asic string
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: all_instances
                
                	All asic instance on the node
                	**type**\:   :py:class:`AllInstances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.AllInstances>`
                
                .. attribute:: instances
                
                	All asic errors  on the node
                	**type**\:   :py:class:`Instances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances>`
                
                

                """

                _prefix = 'asic-errors-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(AsicErrors.Nodes.Node.AsicInformation, self).__init__()

                    self.yang_name = "asic-information"
                    self.yang_parent_name = "node"

                    self.asic = YLeaf(YType.str, "asic")

                    self.all_instances = AsicErrors.Nodes.Node.AsicInformation.AllInstances()
                    self.all_instances.parent = self
                    self._children_name_map["all_instances"] = "all-instances"
                    self._children_yang_names.add("all-instances")

                    self.instances = AsicErrors.Nodes.Node.AsicInformation.Instances()
                    self.instances.parent = self
                    self._children_name_map["instances"] = "instances"
                    self._children_yang_names.add("instances")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("asic") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(AsicErrors.Nodes.Node.AsicInformation, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(AsicErrors.Nodes.Node.AsicInformation, self).__setattr__(name, value)


                class AllInstances(Entity):
                    """
                    All asic instance on the node
                    
                    .. attribute:: all_error_path
                    
                    	Error path of all instances
                    	**type**\:   :py:class:`AllErrorPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath>`
                    
                    

                    """

                    _prefix = 'asic-errors-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(AsicErrors.Nodes.Node.AsicInformation.AllInstances, self).__init__()

                        self.yang_name = "all-instances"
                        self.yang_parent_name = "asic-information"

                        self.all_error_path = AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath()
                        self.all_error_path.parent = self
                        self._children_name_map["all_error_path"] = "all-error-path"
                        self._children_yang_names.add("all-error-path")


                    class AllErrorPath(Entity):
                        """
                        Error path of all instances
                        
                        .. attribute:: summary
                        
                        	Summary of all instances errors
                        	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary>`
                        
                        

                        """

                        _prefix = 'asic-errors-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath, self).__init__()

                            self.yang_name = "all-error-path"
                            self.yang_parent_name = "all-instances"

                            self.summary = AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary()
                            self.summary.parent = self
                            self._children_name_map["summary"] = "summary"
                            self._children_yang_names.add("summary")


                        class Summary(Entity):
                            """
                            Summary of all instances errors
                            
                            .. attribute:: cih_client
                            
                            	cih client
                            	**type**\:  bool
                            
                            .. attribute:: legacy_client
                            
                            	legacy client
                            	**type**\:  bool
                            
                            .. attribute:: sum_data
                            
                            	sum data
                            	**type**\: list of    :py:class:`SumData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary.SumData>`
                            
                            

                            """

                            _prefix = 'asic-errors-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary, self).__init__()

                                self.yang_name = "summary"
                                self.yang_parent_name = "all-error-path"

                                self.cih_client = YLeaf(YType.boolean, "cih-client")

                                self.legacy_client = YLeaf(YType.boolean, "legacy-client")

                                self.sum_data = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("cih_client",
                                                "legacy_client") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary, self).__setattr__(name, value)


                            class SumData(Entity):
                                """
                                sum data
                                
                                .. attribute:: crc_err_count
                                
                                	crc err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: err_count
                                
                                	err count
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: gen_err_count
                                
                                	gen err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: mbe_err_count
                                
                                	mbe err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: node_key
                                
                                	node key
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: num_nodes
                                
                                	num nodes
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: par_err_count
                                
                                	par err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pcie_err_count
                                
                                	pcie err count
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: reset_err_count
                                
                                	reset err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sbe_err_count
                                
                                	sbe err count
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary.SumData, self).__init__()

                                    self.yang_name = "sum-data"
                                    self.yang_parent_name = "summary"

                                    self.crc_err_count = YLeaf(YType.uint32, "crc-err-count")

                                    self.err_count = YLeafList(YType.uint32, "err-count")

                                    self.gen_err_count = YLeaf(YType.uint32, "gen-err-count")

                                    self.mbe_err_count = YLeaf(YType.uint32, "mbe-err-count")

                                    self.node_key = YLeafList(YType.uint32, "node-key")

                                    self.num_nodes = YLeaf(YType.uint32, "num-nodes")

                                    self.par_err_count = YLeaf(YType.uint32, "par-err-count")

                                    self.pcie_err_count = YLeafList(YType.uint32, "pcie-err-count")

                                    self.reset_err_count = YLeaf(YType.uint32, "reset-err-count")

                                    self.sbe_err_count = YLeaf(YType.uint32, "sbe-err-count")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("crc_err_count",
                                                    "err_count",
                                                    "gen_err_count",
                                                    "mbe_err_count",
                                                    "node_key",
                                                    "num_nodes",
                                                    "par_err_count",
                                                    "pcie_err_count",
                                                    "reset_err_count",
                                                    "sbe_err_count") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary.SumData, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary.SumData, self).__setattr__(name, value)

                                def has_data(self):
                                    for leaf in self.err_count.getYLeafs():
                                        if (leaf.yfilter != YFilter.not_set):
                                            return True
                                    for leaf in self.node_key.getYLeafs():
                                        if (leaf.yfilter != YFilter.not_set):
                                            return True
                                    for leaf in self.pcie_err_count.getYLeafs():
                                        if (leaf.yfilter != YFilter.not_set):
                                            return True
                                    return (
                                        self.crc_err_count.is_set or
                                        self.gen_err_count.is_set or
                                        self.mbe_err_count.is_set or
                                        self.num_nodes.is_set or
                                        self.par_err_count.is_set or
                                        self.reset_err_count.is_set or
                                        self.sbe_err_count.is_set)

                                def has_operation(self):
                                    for leaf in self.err_count.getYLeafs():
                                        if (leaf.is_set):
                                            return True
                                    for leaf in self.node_key.getYLeafs():
                                        if (leaf.is_set):
                                            return True
                                    for leaf in self.pcie_err_count.getYLeafs():
                                        if (leaf.is_set):
                                            return True
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.crc_err_count.yfilter != YFilter.not_set or
                                        self.err_count.yfilter != YFilter.not_set or
                                        self.gen_err_count.yfilter != YFilter.not_set or
                                        self.mbe_err_count.yfilter != YFilter.not_set or
                                        self.node_key.yfilter != YFilter.not_set or
                                        self.num_nodes.yfilter != YFilter.not_set or
                                        self.par_err_count.yfilter != YFilter.not_set or
                                        self.pcie_err_count.yfilter != YFilter.not_set or
                                        self.reset_err_count.yfilter != YFilter.not_set or
                                        self.sbe_err_count.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "sum-data" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.crc_err_count.is_set or self.crc_err_count.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.crc_err_count.get_name_leafdata())
                                    if (self.gen_err_count.is_set or self.gen_err_count.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.gen_err_count.get_name_leafdata())
                                    if (self.mbe_err_count.is_set or self.mbe_err_count.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.mbe_err_count.get_name_leafdata())
                                    if (self.num_nodes.is_set or self.num_nodes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.num_nodes.get_name_leafdata())
                                    if (self.par_err_count.is_set or self.par_err_count.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.par_err_count.get_name_leafdata())
                                    if (self.reset_err_count.is_set or self.reset_err_count.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.reset_err_count.get_name_leafdata())
                                    if (self.sbe_err_count.is_set or self.sbe_err_count.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.sbe_err_count.get_name_leafdata())

                                    leaf_name_data.extend(self.err_count.get_name_leafdata())

                                    leaf_name_data.extend(self.node_key.get_name_leafdata())

                                    leaf_name_data.extend(self.pcie_err_count.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "crc-err-count" or name == "err-count" or name == "gen-err-count" or name == "mbe-err-count" or name == "node-key" or name == "num-nodes" or name == "par-err-count" or name == "pcie-err-count" or name == "reset-err-count" or name == "sbe-err-count"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "crc-err-count"):
                                        self.crc_err_count = value
                                        self.crc_err_count.value_namespace = name_space
                                        self.crc_err_count.value_namespace_prefix = name_space_prefix
                                    if(value_path == "err-count"):
                                        self.err_count.append(value)
                                    if(value_path == "gen-err-count"):
                                        self.gen_err_count = value
                                        self.gen_err_count.value_namespace = name_space
                                        self.gen_err_count.value_namespace_prefix = name_space_prefix
                                    if(value_path == "mbe-err-count"):
                                        self.mbe_err_count = value
                                        self.mbe_err_count.value_namespace = name_space
                                        self.mbe_err_count.value_namespace_prefix = name_space_prefix
                                    if(value_path == "node-key"):
                                        self.node_key.append(value)
                                    if(value_path == "num-nodes"):
                                        self.num_nodes = value
                                        self.num_nodes.value_namespace = name_space
                                        self.num_nodes.value_namespace_prefix = name_space_prefix
                                    if(value_path == "par-err-count"):
                                        self.par_err_count = value
                                        self.par_err_count.value_namespace = name_space
                                        self.par_err_count.value_namespace_prefix = name_space_prefix
                                    if(value_path == "pcie-err-count"):
                                        self.pcie_err_count.append(value)
                                    if(value_path == "reset-err-count"):
                                        self.reset_err_count = value
                                        self.reset_err_count.value_namespace = name_space
                                        self.reset_err_count.value_namespace_prefix = name_space_prefix
                                    if(value_path == "sbe-err-count"):
                                        self.sbe_err_count = value
                                        self.sbe_err_count.value_namespace = name_space
                                        self.sbe_err_count.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.sum_data:
                                    if (c.has_data()):
                                        return True
                                return (
                                    self.cih_client.is_set or
                                    self.legacy_client.is_set)

                            def has_operation(self):
                                for c in self.sum_data:
                                    if (c.has_operation()):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.cih_client.yfilter != YFilter.not_set or
                                    self.legacy_client.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "summary" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.cih_client.is_set or self.cih_client.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.cih_client.get_name_leafdata())
                                if (self.legacy_client.is_set or self.legacy_client.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.legacy_client.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "sum-data"):
                                    for c in self.sum_data:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary.SumData()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.sum_data.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "sum-data" or name == "cih-client" or name == "legacy-client"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "cih-client"):
                                    self.cih_client = value
                                    self.cih_client.value_namespace = name_space
                                    self.cih_client.value_namespace_prefix = name_space_prefix
                                if(value_path == "legacy-client"):
                                    self.legacy_client = value
                                    self.legacy_client.value_namespace = name_space
                                    self.legacy_client.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (self.summary is not None and self.summary.has_data())

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.summary is not None and self.summary.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "all-error-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "summary"):
                                if (self.summary is None):
                                    self.summary = AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath.Summary()
                                    self.summary.parent = self
                                    self._children_name_map["summary"] = "summary"
                                return self.summary

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "summary"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (self.all_error_path is not None and self.all_error_path.has_data())

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.all_error_path is not None and self.all_error_path.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "all-instances" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "all-error-path"):
                            if (self.all_error_path is None):
                                self.all_error_path = AsicErrors.Nodes.Node.AsicInformation.AllInstances.AllErrorPath()
                                self.all_error_path.parent = self
                                self._children_name_map["all_error_path"] = "all-error-path"
                            return self.all_error_path

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "all-error-path"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Instances(Entity):
                    """
                    All asic errors  on the node
                    
                    .. attribute:: instance
                    
                    	Particular asic instance on the node
                    	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance>`
                    
                    

                    """

                    _prefix = 'asic-errors-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(AsicErrors.Nodes.Node.AsicInformation.Instances, self).__init__()

                        self.yang_name = "instances"
                        self.yang_parent_name = "asic-information"

                        self.instance = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(AsicErrors.Nodes.Node.AsicInformation.Instances, self).__setattr__(name, value)


                    class Instance(Entity):
                        """
                        Particular asic instance on the node
                        
                        .. attribute:: asic_instance  <key>
                        
                        	asic instance
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: error_path
                        
                        	Error path of the instances
                        	**type**\:   :py:class:`ErrorPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath>`
                        
                        

                        """

                        _prefix = 'asic-errors-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance, self).__init__()

                            self.yang_name = "instance"
                            self.yang_parent_name = "instances"

                            self.asic_instance = YLeaf(YType.int32, "asic-instance")

                            self.error_path = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath()
                            self.error_path.parent = self
                            self._children_name_map["error_path"] = "error-path"
                            self._children_yang_names.add("error-path")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("asic_instance") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance, self).__setattr__(name, value)


                        class ErrorPath(Entity):
                            """
                            Error path of the instances
                            
                            .. attribute:: asic_error_crc_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorCrcHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard>`
                            
                            .. attribute:: asic_error_crc_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorCrcSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft>`
                            
                            .. attribute:: asic_error_generic_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorGenericHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard>`
                            
                            .. attribute:: asic_error_generic_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorGenericSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft>`
                            
                            .. attribute:: asic_error_mbe_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorMbeHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard>`
                            
                            .. attribute:: asic_error_mbe_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorMbeSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft>`
                            
                            .. attribute:: asic_error_parity_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorParityHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard>`
                            
                            .. attribute:: asic_error_parity_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorParitySoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft>`
                            
                            .. attribute:: asic_error_reset_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorResetHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard>`
                            
                            .. attribute:: asic_error_reset_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorResetSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft>`
                            
                            .. attribute:: asic_error_sbe_hard
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorSbeHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard>`
                            
                            .. attribute:: asic_error_sbe_soft
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`AsicErrorSbeSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft>`
                            
                            .. attribute:: back_pressure_hard_errors
                            
                            	BP hard error information
                            	**type**\:   :py:class:`BackPressureHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors>`
                            
                            .. attribute:: back_pressure_soft_errors
                            
                            	BP soft error information
                            	**type**\:   :py:class:`BackPressureSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors>`
                            
                            .. attribute:: barrier_hard_errors
                            
                            	Barrier hard error information
                            	**type**\:   :py:class:`BarrierHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors>`
                            
                            .. attribute:: barrier_soft_errors
                            
                            	Barrier soft error information
                            	**type**\:   :py:class:`BarrierSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors>`
                            
                            .. attribute:: configuration_hard_errors
                            
                            	Configuration hard error information
                            	**type**\:   :py:class:`ConfigurationHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors>`
                            
                            .. attribute:: configuration_soft_errors
                            
                            	Configuration soft error information
                            	**type**\:   :py:class:`ConfigurationSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors>`
                            
                            .. attribute:: crc_hard_errors
                            
                            	CRC hard error information
                            	**type**\:   :py:class:`CrcHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors>`
                            
                            .. attribute:: crc_soft_errors
                            
                            	CRC soft error information
                            	**type**\:   :py:class:`CrcSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors>`
                            
                            .. attribute:: descriptor_hard_errors
                            
                            	Descriptor hard error information
                            	**type**\:   :py:class:`DescriptorHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors>`
                            
                            .. attribute:: descriptor_soft_errors
                            
                            	Descriptor soft error information
                            	**type**\:   :py:class:`DescriptorSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors>`
                            
                            .. attribute:: generic_hard_errors
                            
                            	Generic hard error information
                            	**type**\:   :py:class:`GenericHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors>`
                            
                            .. attribute:: generic_soft_errors
                            
                            	Generic soft error information
                            	**type**\:   :py:class:`GenericSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors>`
                            
                            .. attribute:: hardware_hard_errors
                            
                            	Hardware hard error information
                            	**type**\:   :py:class:`HardwareHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors>`
                            
                            .. attribute:: hardware_soft_errors
                            
                            	Hardware soft error information
                            	**type**\:   :py:class:`HardwareSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors>`
                            
                            .. attribute:: indirect_hard_errors
                            
                            	Indirect hard error information
                            	**type**\:   :py:class:`IndirectHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors>`
                            
                            .. attribute:: indirect_soft_errors
                            
                            	Indirect soft error information
                            	**type**\:   :py:class:`IndirectSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors>`
                            
                            .. attribute:: instance_summary
                            
                            	Summary for a specific instance
                            	**type**\:   :py:class:`InstanceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary>`
                            
                            .. attribute:: interface_hard_errors
                            
                            	Interface hard error information
                            	**type**\:   :py:class:`InterfaceHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors>`
                            
                            .. attribute:: interface_soft_errors
                            
                            	Interface soft error information
                            	**type**\:   :py:class:`InterfaceSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors>`
                            
                            .. attribute:: io_hard_errors
                            
                            	IO hard error information
                            	**type**\:   :py:class:`IoHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors>`
                            
                            .. attribute:: io_soft_errors
                            
                            	IO soft error information
                            	**type**\:   :py:class:`IoSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors>`
                            
                            .. attribute:: link_hard_errors
                            
                            	Link hard error information
                            	**type**\:   :py:class:`LinkHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors>`
                            
                            .. attribute:: link_soft_errors
                            
                            	Link soft error information
                            	**type**\:   :py:class:`LinkSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors>`
                            
                            .. attribute:: multiple_bit_hard_errors
                            
                            	Multiple bit hard error information
                            	**type**\:   :py:class:`MultipleBitHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors>`
                            
                            .. attribute:: multiple_bit_soft_errors
                            
                            	Multiple bit soft error information
                            	**type**\:   :py:class:`MultipleBitSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors>`
                            
                            .. attribute:: outof_resource_hard
                            
                            	OOR thresh information
                            	**type**\:   :py:class:`OutofResourceHard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard>`
                            
                            .. attribute:: outof_resource_soft
                            
                            	OOR thresh information
                            	**type**\:   :py:class:`OutofResourceSoft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft>`
                            
                            .. attribute:: parity_hard_errors
                            
                            	Parity hard error information
                            	**type**\:   :py:class:`ParityHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors>`
                            
                            .. attribute:: parity_soft_errors
                            
                            	Parity soft error information
                            	**type**\:   :py:class:`ParitySoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors>`
                            
                            .. attribute:: reset_hard_errors
                            
                            	Reset hard error information
                            	**type**\:   :py:class:`ResetHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors>`
                            
                            .. attribute:: reset_soft_errors
                            
                            	Reset soft error information
                            	**type**\:   :py:class:`ResetSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors>`
                            
                            .. attribute:: single_bit_hard_errors
                            
                            	Single bit hard error information
                            	**type**\:   :py:class:`SingleBitHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors>`
                            
                            .. attribute:: single_bit_soft_errors
                            
                            	Single bit soft error information
                            	**type**\:   :py:class:`SingleBitSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors>`
                            
                            .. attribute:: time_out_hard_errors
                            
                            	Time out hard error information
                            	**type**\:   :py:class:`TimeOutHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors>`
                            
                            .. attribute:: time_out_soft_errors
                            
                            	Time out soft error information
                            	**type**\:   :py:class:`TimeOutSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors>`
                            
                            .. attribute:: ucode_hard_errors
                            
                            	UCode hard error information
                            	**type**\:   :py:class:`UcodeHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors>`
                            
                            .. attribute:: ucode_soft_errors
                            
                            	Ucode soft error information
                            	**type**\:   :py:class:`UcodeSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors>`
                            
                            .. attribute:: unexpected_hard_errors
                            
                            	Unexpected hard error information
                            	**type**\:   :py:class:`UnexpectedHardErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors>`
                            
                            .. attribute:: unexpected_soft_errors
                            
                            	Unexpected soft error information
                            	**type**\:   :py:class:`UnexpectedSoftErrors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors>`
                            
                            

                            """

                            _prefix = 'asic-errors-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath, self).__init__()

                                self.yang_name = "error-path"
                                self.yang_parent_name = "instance"

                                self.asic_error_crc_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard()
                                self.asic_error_crc_hard.parent = self
                                self._children_name_map["asic_error_crc_hard"] = "asic-error-crc-hard"
                                self._children_yang_names.add("asic-error-crc-hard")

                                self.asic_error_crc_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft()
                                self.asic_error_crc_soft.parent = self
                                self._children_name_map["asic_error_crc_soft"] = "asic-error-crc-soft"
                                self._children_yang_names.add("asic-error-crc-soft")

                                self.asic_error_generic_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard()
                                self.asic_error_generic_hard.parent = self
                                self._children_name_map["asic_error_generic_hard"] = "asic-error-generic-hard"
                                self._children_yang_names.add("asic-error-generic-hard")

                                self.asic_error_generic_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft()
                                self.asic_error_generic_soft.parent = self
                                self._children_name_map["asic_error_generic_soft"] = "asic-error-generic-soft"
                                self._children_yang_names.add("asic-error-generic-soft")

                                self.asic_error_mbe_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard()
                                self.asic_error_mbe_hard.parent = self
                                self._children_name_map["asic_error_mbe_hard"] = "asic-error-mbe-hard"
                                self._children_yang_names.add("asic-error-mbe-hard")

                                self.asic_error_mbe_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft()
                                self.asic_error_mbe_soft.parent = self
                                self._children_name_map["asic_error_mbe_soft"] = "asic-error-mbe-soft"
                                self._children_yang_names.add("asic-error-mbe-soft")

                                self.asic_error_parity_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard()
                                self.asic_error_parity_hard.parent = self
                                self._children_name_map["asic_error_parity_hard"] = "asic-error-parity-hard"
                                self._children_yang_names.add("asic-error-parity-hard")

                                self.asic_error_parity_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft()
                                self.asic_error_parity_soft.parent = self
                                self._children_name_map["asic_error_parity_soft"] = "asic-error-parity-soft"
                                self._children_yang_names.add("asic-error-parity-soft")

                                self.asic_error_reset_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard()
                                self.asic_error_reset_hard.parent = self
                                self._children_name_map["asic_error_reset_hard"] = "asic-error-reset-hard"
                                self._children_yang_names.add("asic-error-reset-hard")

                                self.asic_error_reset_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft()
                                self.asic_error_reset_soft.parent = self
                                self._children_name_map["asic_error_reset_soft"] = "asic-error-reset-soft"
                                self._children_yang_names.add("asic-error-reset-soft")

                                self.asic_error_sbe_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard()
                                self.asic_error_sbe_hard.parent = self
                                self._children_name_map["asic_error_sbe_hard"] = "asic-error-sbe-hard"
                                self._children_yang_names.add("asic-error-sbe-hard")

                                self.asic_error_sbe_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft()
                                self.asic_error_sbe_soft.parent = self
                                self._children_name_map["asic_error_sbe_soft"] = "asic-error-sbe-soft"
                                self._children_yang_names.add("asic-error-sbe-soft")

                                self.back_pressure_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors()
                                self.back_pressure_hard_errors.parent = self
                                self._children_name_map["back_pressure_hard_errors"] = "back-pressure-hard-errors"
                                self._children_yang_names.add("back-pressure-hard-errors")

                                self.back_pressure_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors()
                                self.back_pressure_soft_errors.parent = self
                                self._children_name_map["back_pressure_soft_errors"] = "back-pressure-soft-errors"
                                self._children_yang_names.add("back-pressure-soft-errors")

                                self.barrier_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors()
                                self.barrier_hard_errors.parent = self
                                self._children_name_map["barrier_hard_errors"] = "barrier-hard-errors"
                                self._children_yang_names.add("barrier-hard-errors")

                                self.barrier_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors()
                                self.barrier_soft_errors.parent = self
                                self._children_name_map["barrier_soft_errors"] = "barrier-soft-errors"
                                self._children_yang_names.add("barrier-soft-errors")

                                self.configuration_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors()
                                self.configuration_hard_errors.parent = self
                                self._children_name_map["configuration_hard_errors"] = "configuration-hard-errors"
                                self._children_yang_names.add("configuration-hard-errors")

                                self.configuration_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors()
                                self.configuration_soft_errors.parent = self
                                self._children_name_map["configuration_soft_errors"] = "configuration-soft-errors"
                                self._children_yang_names.add("configuration-soft-errors")

                                self.crc_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors()
                                self.crc_hard_errors.parent = self
                                self._children_name_map["crc_hard_errors"] = "crc-hard-errors"
                                self._children_yang_names.add("crc-hard-errors")

                                self.crc_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors()
                                self.crc_soft_errors.parent = self
                                self._children_name_map["crc_soft_errors"] = "crc-soft-errors"
                                self._children_yang_names.add("crc-soft-errors")

                                self.descriptor_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors()
                                self.descriptor_hard_errors.parent = self
                                self._children_name_map["descriptor_hard_errors"] = "descriptor-hard-errors"
                                self._children_yang_names.add("descriptor-hard-errors")

                                self.descriptor_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors()
                                self.descriptor_soft_errors.parent = self
                                self._children_name_map["descriptor_soft_errors"] = "descriptor-soft-errors"
                                self._children_yang_names.add("descriptor-soft-errors")

                                self.generic_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors()
                                self.generic_hard_errors.parent = self
                                self._children_name_map["generic_hard_errors"] = "generic-hard-errors"
                                self._children_yang_names.add("generic-hard-errors")

                                self.generic_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors()
                                self.generic_soft_errors.parent = self
                                self._children_name_map["generic_soft_errors"] = "generic-soft-errors"
                                self._children_yang_names.add("generic-soft-errors")

                                self.hardware_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors()
                                self.hardware_hard_errors.parent = self
                                self._children_name_map["hardware_hard_errors"] = "hardware-hard-errors"
                                self._children_yang_names.add("hardware-hard-errors")

                                self.hardware_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors()
                                self.hardware_soft_errors.parent = self
                                self._children_name_map["hardware_soft_errors"] = "hardware-soft-errors"
                                self._children_yang_names.add("hardware-soft-errors")

                                self.indirect_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors()
                                self.indirect_hard_errors.parent = self
                                self._children_name_map["indirect_hard_errors"] = "indirect-hard-errors"
                                self._children_yang_names.add("indirect-hard-errors")

                                self.indirect_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors()
                                self.indirect_soft_errors.parent = self
                                self._children_name_map["indirect_soft_errors"] = "indirect-soft-errors"
                                self._children_yang_names.add("indirect-soft-errors")

                                self.instance_summary = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary()
                                self.instance_summary.parent = self
                                self._children_name_map["instance_summary"] = "instance-summary"
                                self._children_yang_names.add("instance-summary")

                                self.interface_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors()
                                self.interface_hard_errors.parent = self
                                self._children_name_map["interface_hard_errors"] = "interface-hard-errors"
                                self._children_yang_names.add("interface-hard-errors")

                                self.interface_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors()
                                self.interface_soft_errors.parent = self
                                self._children_name_map["interface_soft_errors"] = "interface-soft-errors"
                                self._children_yang_names.add("interface-soft-errors")

                                self.io_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors()
                                self.io_hard_errors.parent = self
                                self._children_name_map["io_hard_errors"] = "io-hard-errors"
                                self._children_yang_names.add("io-hard-errors")

                                self.io_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors()
                                self.io_soft_errors.parent = self
                                self._children_name_map["io_soft_errors"] = "io-soft-errors"
                                self._children_yang_names.add("io-soft-errors")

                                self.link_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors()
                                self.link_hard_errors.parent = self
                                self._children_name_map["link_hard_errors"] = "link-hard-errors"
                                self._children_yang_names.add("link-hard-errors")

                                self.link_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors()
                                self.link_soft_errors.parent = self
                                self._children_name_map["link_soft_errors"] = "link-soft-errors"
                                self._children_yang_names.add("link-soft-errors")

                                self.multiple_bit_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors()
                                self.multiple_bit_hard_errors.parent = self
                                self._children_name_map["multiple_bit_hard_errors"] = "multiple-bit-hard-errors"
                                self._children_yang_names.add("multiple-bit-hard-errors")

                                self.multiple_bit_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors()
                                self.multiple_bit_soft_errors.parent = self
                                self._children_name_map["multiple_bit_soft_errors"] = "multiple-bit-soft-errors"
                                self._children_yang_names.add("multiple-bit-soft-errors")

                                self.outof_resource_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard()
                                self.outof_resource_hard.parent = self
                                self._children_name_map["outof_resource_hard"] = "outof-resource-hard"
                                self._children_yang_names.add("outof-resource-hard")

                                self.outof_resource_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft()
                                self.outof_resource_soft.parent = self
                                self._children_name_map["outof_resource_soft"] = "outof-resource-soft"
                                self._children_yang_names.add("outof-resource-soft")

                                self.parity_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors()
                                self.parity_hard_errors.parent = self
                                self._children_name_map["parity_hard_errors"] = "parity-hard-errors"
                                self._children_yang_names.add("parity-hard-errors")

                                self.parity_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors()
                                self.parity_soft_errors.parent = self
                                self._children_name_map["parity_soft_errors"] = "parity-soft-errors"
                                self._children_yang_names.add("parity-soft-errors")

                                self.reset_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors()
                                self.reset_hard_errors.parent = self
                                self._children_name_map["reset_hard_errors"] = "reset-hard-errors"
                                self._children_yang_names.add("reset-hard-errors")

                                self.reset_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors()
                                self.reset_soft_errors.parent = self
                                self._children_name_map["reset_soft_errors"] = "reset-soft-errors"
                                self._children_yang_names.add("reset-soft-errors")

                                self.single_bit_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors()
                                self.single_bit_hard_errors.parent = self
                                self._children_name_map["single_bit_hard_errors"] = "single-bit-hard-errors"
                                self._children_yang_names.add("single-bit-hard-errors")

                                self.single_bit_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors()
                                self.single_bit_soft_errors.parent = self
                                self._children_name_map["single_bit_soft_errors"] = "single-bit-soft-errors"
                                self._children_yang_names.add("single-bit-soft-errors")

                                self.time_out_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors()
                                self.time_out_hard_errors.parent = self
                                self._children_name_map["time_out_hard_errors"] = "time-out-hard-errors"
                                self._children_yang_names.add("time-out-hard-errors")

                                self.time_out_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors()
                                self.time_out_soft_errors.parent = self
                                self._children_name_map["time_out_soft_errors"] = "time-out-soft-errors"
                                self._children_yang_names.add("time-out-soft-errors")

                                self.ucode_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors()
                                self.ucode_hard_errors.parent = self
                                self._children_name_map["ucode_hard_errors"] = "ucode-hard-errors"
                                self._children_yang_names.add("ucode-hard-errors")

                                self.ucode_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors()
                                self.ucode_soft_errors.parent = self
                                self._children_name_map["ucode_soft_errors"] = "ucode-soft-errors"
                                self._children_yang_names.add("ucode-soft-errors")

                                self.unexpected_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors()
                                self.unexpected_hard_errors.parent = self
                                self._children_name_map["unexpected_hard_errors"] = "unexpected-hard-errors"
                                self._children_yang_names.add("unexpected-hard-errors")

                                self.unexpected_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors()
                                self.unexpected_soft_errors.parent = self
                                self._children_name_map["unexpected_soft_errors"] = "unexpected-soft-errors"
                                self._children_yang_names.add("unexpected-soft-errors")


                            class MultipleBitSoftErrors(Entity):
                                """
                                Multiple bit soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors, self).__init__()

                                    self.yang_name = "multiple-bit-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "multiple-bit-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "multiple-bit-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorGenericSoft(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft, self).__init__()

                                    self.yang_name = "asic-error-generic-soft"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-generic-soft"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-generic-soft" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class CrcHardErrors(Entity):
                                """
                                CRC hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors, self).__init__()

                                    self.yang_name = "crc-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "crc-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "crc-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorSbeSoft(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft, self).__init__()

                                    self.yang_name = "asic-error-sbe-soft"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-sbe-soft"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-sbe-soft" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class HardwareSoftErrors(Entity):
                                """
                                Hardware soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors, self).__init__()

                                    self.yang_name = "hardware-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "hardware-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "hardware-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorCrcSoft(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft, self).__init__()

                                    self.yang_name = "asic-error-crc-soft"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-crc-soft"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-crc-soft" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorParitySoft(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft, self).__init__()

                                    self.yang_name = "asic-error-parity-soft"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-parity-soft"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-parity-soft" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class IoSoftErrors(Entity):
                                """
                                IO soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors, self).__init__()

                                    self.yang_name = "io-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "io-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "io-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class ResetSoftErrors(Entity):
                                """
                                Reset soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors, self).__init__()

                                    self.yang_name = "reset-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "reset-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "reset-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class BarrierHardErrors(Entity):
                                """
                                Barrier hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors, self).__init__()

                                    self.yang_name = "barrier-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "barrier-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "barrier-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class UcodeSoftErrors(Entity):
                                """
                                Ucode soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors, self).__init__()

                                    self.yang_name = "ucode-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "ucode-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ucode-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorResetHard(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard, self).__init__()

                                    self.yang_name = "asic-error-reset-hard"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-reset-hard"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-reset-hard" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class SingleBitHardErrors(Entity):
                                """
                                Single bit hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors, self).__init__()

                                    self.yang_name = "single-bit-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "single-bit-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "single-bit-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class IndirectHardErrors(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors, self).__init__()

                                    self.yang_name = "indirect-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "indirect-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "indirect-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class OutofResourceSoft(Entity):
                                """
                                OOR thresh information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft, self).__init__()

                                    self.yang_name = "outof-resource-soft"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "outof-resource-soft"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "outof-resource-soft" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class CrcSoftErrors(Entity):
                                """
                                CRC soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors, self).__init__()

                                    self.yang_name = "crc-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "crc-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "crc-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class TimeOutHardErrors(Entity):
                                """
                                Time out hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors, self).__init__()

                                    self.yang_name = "time-out-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "time-out-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "time-out-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class BarrierSoftErrors(Entity):
                                """
                                Barrier soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors, self).__init__()

                                    self.yang_name = "barrier-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "barrier-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "barrier-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorMbeSoft(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft, self).__init__()

                                    self.yang_name = "asic-error-mbe-soft"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-mbe-soft"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-mbe-soft" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class BackPressureHardErrors(Entity):
                                """
                                BP hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors, self).__init__()

                                    self.yang_name = "back-pressure-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "back-pressure-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "back-pressure-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class SingleBitSoftErrors(Entity):
                                """
                                Single bit soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors, self).__init__()

                                    self.yang_name = "single-bit-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "single-bit-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "single-bit-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class IndirectSoftErrors(Entity):
                                """
                                Indirect soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors, self).__init__()

                                    self.yang_name = "indirect-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "indirect-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "indirect-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class GenericHardErrors(Entity):
                                """
                                Generic hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors, self).__init__()

                                    self.yang_name = "generic-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "generic-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "generic-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class LinkHardErrors(Entity):
                                """
                                Link hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors, self).__init__()

                                    self.yang_name = "link-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "link-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "link-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class ConfigurationHardErrors(Entity):
                                """
                                Configuration hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors, self).__init__()

                                    self.yang_name = "configuration-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "configuration-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "configuration-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class InstanceSummary(Entity):
                                """
                                Summary for a specific instance
                                
                                .. attribute:: cih_client
                                
                                	cih client
                                	**type**\:  bool
                                
                                .. attribute:: legacy_client
                                
                                	legacy client
                                	**type**\:  bool
                                
                                .. attribute:: sum_data
                                
                                	sum data
                                	**type**\: list of    :py:class:`SumData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary.SumData>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary, self).__init__()

                                    self.yang_name = "instance-summary"
                                    self.yang_parent_name = "error-path"

                                    self.cih_client = YLeaf(YType.boolean, "cih-client")

                                    self.legacy_client = YLeaf(YType.boolean, "legacy-client")

                                    self.sum_data = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("cih_client",
                                                    "legacy_client") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary, self).__setattr__(name, value)


                                class SumData(Entity):
                                    """
                                    sum data
                                    
                                    .. attribute:: crc_err_count
                                    
                                    	crc err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: err_count
                                    
                                    	err count
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: gen_err_count
                                    
                                    	gen err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: mbe_err_count
                                    
                                    	mbe err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: node_key
                                    
                                    	node key
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: num_nodes
                                    
                                    	num nodes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: par_err_count
                                    
                                    	par err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: pcie_err_count
                                    
                                    	pcie err count
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reset_err_count
                                    
                                    	reset err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sbe_err_count
                                    
                                    	sbe err count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary.SumData, self).__init__()

                                        self.yang_name = "sum-data"
                                        self.yang_parent_name = "instance-summary"

                                        self.crc_err_count = YLeaf(YType.uint32, "crc-err-count")

                                        self.err_count = YLeafList(YType.uint32, "err-count")

                                        self.gen_err_count = YLeaf(YType.uint32, "gen-err-count")

                                        self.mbe_err_count = YLeaf(YType.uint32, "mbe-err-count")

                                        self.node_key = YLeafList(YType.uint32, "node-key")

                                        self.num_nodes = YLeaf(YType.uint32, "num-nodes")

                                        self.par_err_count = YLeaf(YType.uint32, "par-err-count")

                                        self.pcie_err_count = YLeafList(YType.uint32, "pcie-err-count")

                                        self.reset_err_count = YLeaf(YType.uint32, "reset-err-count")

                                        self.sbe_err_count = YLeaf(YType.uint32, "sbe-err-count")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("crc_err_count",
                                                        "err_count",
                                                        "gen_err_count",
                                                        "mbe_err_count",
                                                        "node_key",
                                                        "num_nodes",
                                                        "par_err_count",
                                                        "pcie_err_count",
                                                        "reset_err_count",
                                                        "sbe_err_count") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary.SumData, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary.SumData, self).__setattr__(name, value)

                                    def has_data(self):
                                        for leaf in self.err_count.getYLeafs():
                                            if (leaf.yfilter != YFilter.not_set):
                                                return True
                                        for leaf in self.node_key.getYLeafs():
                                            if (leaf.yfilter != YFilter.not_set):
                                                return True
                                        for leaf in self.pcie_err_count.getYLeafs():
                                            if (leaf.yfilter != YFilter.not_set):
                                                return True
                                        return (
                                            self.crc_err_count.is_set or
                                            self.gen_err_count.is_set or
                                            self.mbe_err_count.is_set or
                                            self.num_nodes.is_set or
                                            self.par_err_count.is_set or
                                            self.reset_err_count.is_set or
                                            self.sbe_err_count.is_set)

                                    def has_operation(self):
                                        for leaf in self.err_count.getYLeafs():
                                            if (leaf.is_set):
                                                return True
                                        for leaf in self.node_key.getYLeafs():
                                            if (leaf.is_set):
                                                return True
                                        for leaf in self.pcie_err_count.getYLeafs():
                                            if (leaf.is_set):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.crc_err_count.yfilter != YFilter.not_set or
                                            self.err_count.yfilter != YFilter.not_set or
                                            self.gen_err_count.yfilter != YFilter.not_set or
                                            self.mbe_err_count.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.num_nodes.yfilter != YFilter.not_set or
                                            self.par_err_count.yfilter != YFilter.not_set or
                                            self.pcie_err_count.yfilter != YFilter.not_set or
                                            self.reset_err_count.yfilter != YFilter.not_set or
                                            self.sbe_err_count.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "sum-data" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.crc_err_count.is_set or self.crc_err_count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.crc_err_count.get_name_leafdata())
                                        if (self.gen_err_count.is_set or self.gen_err_count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.gen_err_count.get_name_leafdata())
                                        if (self.mbe_err_count.is_set or self.mbe_err_count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.mbe_err_count.get_name_leafdata())
                                        if (self.num_nodes.is_set or self.num_nodes.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.num_nodes.get_name_leafdata())
                                        if (self.par_err_count.is_set or self.par_err_count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.par_err_count.get_name_leafdata())
                                        if (self.reset_err_count.is_set or self.reset_err_count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.reset_err_count.get_name_leafdata())
                                        if (self.sbe_err_count.is_set or self.sbe_err_count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sbe_err_count.get_name_leafdata())

                                        leaf_name_data.extend(self.err_count.get_name_leafdata())

                                        leaf_name_data.extend(self.node_key.get_name_leafdata())

                                        leaf_name_data.extend(self.pcie_err_count.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "crc-err-count" or name == "err-count" or name == "gen-err-count" or name == "mbe-err-count" or name == "node-key" or name == "num-nodes" or name == "par-err-count" or name == "pcie-err-count" or name == "reset-err-count" or name == "sbe-err-count"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "crc-err-count"):
                                            self.crc_err_count = value
                                            self.crc_err_count.value_namespace = name_space
                                            self.crc_err_count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "err-count"):
                                            self.err_count.append(value)
                                        if(value_path == "gen-err-count"):
                                            self.gen_err_count = value
                                            self.gen_err_count.value_namespace = name_space
                                            self.gen_err_count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "mbe-err-count"):
                                            self.mbe_err_count = value
                                            self.mbe_err_count.value_namespace = name_space
                                            self.mbe_err_count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key.append(value)
                                        if(value_path == "num-nodes"):
                                            self.num_nodes = value
                                            self.num_nodes.value_namespace = name_space
                                            self.num_nodes.value_namespace_prefix = name_space_prefix
                                        if(value_path == "par-err-count"):
                                            self.par_err_count = value
                                            self.par_err_count.value_namespace = name_space
                                            self.par_err_count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pcie-err-count"):
                                            self.pcie_err_count.append(value)
                                        if(value_path == "reset-err-count"):
                                            self.reset_err_count = value
                                            self.reset_err_count.value_namespace = name_space
                                            self.reset_err_count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sbe-err-count"):
                                            self.sbe_err_count = value
                                            self.sbe_err_count.value_namespace = name_space
                                            self.sbe_err_count.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.sum_data:
                                        if (c.has_data()):
                                            return True
                                    return (
                                        self.cih_client.is_set or
                                        self.legacy_client.is_set)

                                def has_operation(self):
                                    for c in self.sum_data:
                                        if (c.has_operation()):
                                            return True
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.cih_client.yfilter != YFilter.not_set or
                                        self.legacy_client.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "instance-summary" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.cih_client.is_set or self.cih_client.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.cih_client.get_name_leafdata())
                                    if (self.legacy_client.is_set or self.legacy_client.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.legacy_client.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "sum-data"):
                                        for c in self.sum_data:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary.SumData()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.sum_data.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "sum-data" or name == "cih-client" or name == "legacy-client"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "cih-client"):
                                        self.cih_client = value
                                        self.cih_client.value_namespace = name_space
                                        self.cih_client.value_namespace_prefix = name_space_prefix
                                    if(value_path == "legacy-client"):
                                        self.legacy_client = value
                                        self.legacy_client.value_namespace = name_space
                                        self.legacy_client.value_namespace_prefix = name_space_prefix


                            class UnexpectedHardErrors(Entity):
                                """
                                Unexpected hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors, self).__init__()

                                    self.yang_name = "unexpected-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "unexpected-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "unexpected-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class TimeOutSoftErrors(Entity):
                                """
                                Time out soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors, self).__init__()

                                    self.yang_name = "time-out-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "time-out-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "time-out-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorGenericHard(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard, self).__init__()

                                    self.yang_name = "asic-error-generic-hard"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-generic-hard"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-generic-hard" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class ParityHardErrors(Entity):
                                """
                                Parity hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors, self).__init__()

                                    self.yang_name = "parity-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "parity-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "parity-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class DescriptorHardErrors(Entity):
                                """
                                Descriptor hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors, self).__init__()

                                    self.yang_name = "descriptor-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "descriptor-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "descriptor-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class InterfaceHardErrors(Entity):
                                """
                                Interface hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors, self).__init__()

                                    self.yang_name = "interface-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "interface-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorSbeHard(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard, self).__init__()

                                    self.yang_name = "asic-error-sbe-hard"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-sbe-hard"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-sbe-hard" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorCrcHard(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard, self).__init__()

                                    self.yang_name = "asic-error-crc-hard"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-crc-hard"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-crc-hard" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorParityHard(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard, self).__init__()

                                    self.yang_name = "asic-error-parity-hard"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-parity-hard"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-parity-hard" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorResetSoft(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft, self).__init__()

                                    self.yang_name = "asic-error-reset-soft"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-reset-soft"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-reset-soft" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class BackPressureSoftErrors(Entity):
                                """
                                BP soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors, self).__init__()

                                    self.yang_name = "back-pressure-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "back-pressure-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "back-pressure-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class GenericSoftErrors(Entity):
                                """
                                Generic soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors, self).__init__()

                                    self.yang_name = "generic-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "generic-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "generic-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class LinkSoftErrors(Entity):
                                """
                                Link soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors, self).__init__()

                                    self.yang_name = "link-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "link-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "link-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class ConfigurationSoftErrors(Entity):
                                """
                                Configuration soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors, self).__init__()

                                    self.yang_name = "configuration-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "configuration-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "configuration-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class MultipleBitHardErrors(Entity):
                                """
                                Multiple bit hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors, self).__init__()

                                    self.yang_name = "multiple-bit-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "multiple-bit-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "multiple-bit-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class UnexpectedSoftErrors(Entity):
                                """
                                Unexpected soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors, self).__init__()

                                    self.yang_name = "unexpected-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "unexpected-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "unexpected-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class OutofResourceHard(Entity):
                                """
                                OOR thresh information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard, self).__init__()

                                    self.yang_name = "outof-resource-hard"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "outof-resource-hard"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "outof-resource-hard" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class HardwareHardErrors(Entity):
                                """
                                Hardware hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors, self).__init__()

                                    self.yang_name = "hardware-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "hardware-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "hardware-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class ParitySoftErrors(Entity):
                                """
                                Parity soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors, self).__init__()

                                    self.yang_name = "parity-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "parity-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "parity-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class DescriptorSoftErrors(Entity):
                                """
                                Descriptor soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors, self).__init__()

                                    self.yang_name = "descriptor-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "descriptor-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "descriptor-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class InterfaceSoftErrors(Entity):
                                """
                                Interface soft error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors, self).__init__()

                                    self.yang_name = "interface-soft-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "interface-soft-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-soft-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class IoHardErrors(Entity):
                                """
                                IO hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors, self).__init__()

                                    self.yang_name = "io-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "io-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "io-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class ResetHardErrors(Entity):
                                """
                                Reset hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors, self).__init__()

                                    self.yang_name = "reset-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "reset-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "reset-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class UcodeHardErrors(Entity):
                                """
                                UCode hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors, self).__init__()

                                    self.yang_name = "ucode-hard-errors"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "ucode-hard-errors"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ucode-hard-errors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class AsicErrorMbeHard(Entity):
                                """
                                Indirect hard error information
                                
                                .. attribute:: error
                                
                                	Collection of errors
                                	**type**\: list of    :py:class:`Error <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error>`
                                
                                

                                """

                                _prefix = 'asic-errors-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard, self).__init__()

                                    self.yang_name = "asic-error-mbe-hard"
                                    self.yang_parent_name = "error-path"

                                    self.error = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard, self).__setattr__(name, value)


                                class Error(Entity):
                                    """
                                    Collection of errors
                                    
                                    .. attribute:: alarm_on
                                    
                                    	High threshold crossed
                                    	**type**\:  bool
                                    
                                    .. attribute:: asic_info
                                    
                                    	Name of rack/board/asic
                                    	**type**\:  str
                                    
                                    .. attribute:: count
                                    
                                    	Accumulated count
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: csrs_info
                                    
                                    	List of csrs\_info
                                    	**type**\: list of    :py:class:`CsrsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.CsrsInfo>`
                                    
                                    .. attribute:: intr_type
                                    
                                    	Type of error
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_cleared
                                    
                                    	Time  cleared
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: last_err
                                    
                                    	Last Printable error information
                                    	**type**\: list of    :py:class:`LastErr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asic_errors_oper.AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.LastErr>`
                                    
                                    .. attribute:: leaf_id
                                    
                                    	Leaf ID defined in user data
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: name
                                    
                                    	Name assigned to mem
                                    	**type**\:  str
                                    
                                    .. attribute:: node_key
                                    
                                    	32 bit key
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_hi
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: period_lo
                                    
                                    	High period value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_hi
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: thresh_lo
                                    
                                    	High threshold value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'asic-errors-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error, self).__init__()

                                        self.yang_name = "error"
                                        self.yang_parent_name = "asic-error-mbe-hard"

                                        self.alarm_on = YLeaf(YType.boolean, "alarm-on")

                                        self.asic_info = YLeaf(YType.str, "asic-info")

                                        self.count = YLeaf(YType.uint32, "count")

                                        self.intr_type = YLeaf(YType.uint32, "intr-type")

                                        self.last_cleared = YLeaf(YType.uint64, "last-cleared")

                                        self.leaf_id = YLeaf(YType.uint32, "leaf-id")

                                        self.name = YLeaf(YType.str, "name")

                                        self.node_key = YLeaf(YType.uint32, "node-key")

                                        self.period_hi = YLeaf(YType.uint32, "period-hi")

                                        self.period_lo = YLeaf(YType.uint32, "period-lo")

                                        self.thresh_hi = YLeaf(YType.uint32, "thresh-hi")

                                        self.thresh_lo = YLeaf(YType.uint32, "thresh-lo")

                                        self.csrs_info = YList(self)
                                        self.last_err = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alarm_on",
                                                        "asic_info",
                                                        "count",
                                                        "intr_type",
                                                        "last_cleared",
                                                        "leaf_id",
                                                        "name",
                                                        "node_key",
                                                        "period_hi",
                                                        "period_lo",
                                                        "thresh_hi",
                                                        "thresh_lo") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error, self).__setattr__(name, value)


                                    class CsrsInfo(Entity):
                                        """
                                        List of csrs\_info
                                        
                                        .. attribute:: address
                                        
                                        	address
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: name
                                        
                                        	name
                                        	**type**\:  str
                                        
                                        .. attribute:: width
                                        
                                        	width
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.CsrsInfo, self).__init__()

                                            self.yang_name = "csrs-info"
                                            self.yang_parent_name = "error"

                                            self.address = YLeaf(YType.uint64, "address")

                                            self.name = YLeaf(YType.str, "name")

                                            self.width = YLeaf(YType.uint32, "width")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("address",
                                                            "name",
                                                            "width") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.CsrsInfo, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.CsrsInfo, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.address.is_set or
                                                self.name.is_set or
                                                self.width.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.address.yfilter != YFilter.not_set or
                                                self.name.yfilter != YFilter.not_set or
                                                self.width.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "csrs-info" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.address.get_name_leafdata())
                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.name.get_name_leafdata())
                                            if (self.width.is_set or self.width.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.width.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "address" or name == "name" or name == "width"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "address"):
                                                self.address = value
                                                self.address.value_namespace = name_space
                                                self.address.value_namespace_prefix = name_space_prefix
                                            if(value_path == "name"):
                                                self.name = value
                                                self.name.value_namespace = name_space
                                                self.name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "width"):
                                                self.width = value
                                                self.width.value_namespace = name_space
                                                self.width.value_namespace_prefix = name_space_prefix


                                    class LastErr(Entity):
                                        """
                                        Last Printable error information
                                        
                                        .. attribute:: at_time
                                        
                                        	at time
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: at_time_nsec
                                        
                                        	at time nsec
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: counter_val
                                        
                                        	counter val
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: error_desc
                                        
                                        	error desc
                                        	**type**\:  str
                                        
                                        .. attribute:: error_regval
                                        
                                        	error regval
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'asic-errors-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.LastErr, self).__init__()

                                            self.yang_name = "last-err"
                                            self.yang_parent_name = "error"

                                            self.at_time = YLeaf(YType.uint64, "at-time")

                                            self.at_time_nsec = YLeaf(YType.uint64, "at-time-nsec")

                                            self.counter_val = YLeaf(YType.uint32, "counter-val")

                                            self.error_desc = YLeaf(YType.str, "error-desc")

                                            self.error_regval = YLeafList(YType.uint8, "error-regval")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("at_time",
                                                            "at_time_nsec",
                                                            "counter_val",
                                                            "error_desc",
                                                            "error_regval") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.LastErr, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.LastErr, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.at_time.is_set or
                                                self.at_time_nsec.is_set or
                                                self.counter_val.is_set or
                                                self.error_desc.is_set)

                                        def has_operation(self):
                                            for leaf in self.error_regval.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.at_time.yfilter != YFilter.not_set or
                                                self.at_time_nsec.yfilter != YFilter.not_set or
                                                self.counter_val.yfilter != YFilter.not_set or
                                                self.error_desc.yfilter != YFilter.not_set or
                                                self.error_regval.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-err" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.at_time.is_set or self.at_time.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time.get_name_leafdata())
                                            if (self.at_time_nsec.is_set or self.at_time_nsec.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.at_time_nsec.get_name_leafdata())
                                            if (self.counter_val.is_set or self.counter_val.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.counter_val.get_name_leafdata())
                                            if (self.error_desc.is_set or self.error_desc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.error_desc.get_name_leafdata())

                                            leaf_name_data.extend(self.error_regval.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "at-time" or name == "at-time-nsec" or name == "counter-val" or name == "error-desc" or name == "error-regval"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "at-time"):
                                                self.at_time = value
                                                self.at_time.value_namespace = name_space
                                                self.at_time.value_namespace_prefix = name_space_prefix
                                            if(value_path == "at-time-nsec"):
                                                self.at_time_nsec = value
                                                self.at_time_nsec.value_namespace = name_space
                                                self.at_time_nsec.value_namespace_prefix = name_space_prefix
                                            if(value_path == "counter-val"):
                                                self.counter_val = value
                                                self.counter_val.value_namespace = name_space
                                                self.counter_val.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-desc"):
                                                self.error_desc = value
                                                self.error_desc.value_namespace = name_space
                                                self.error_desc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "error-regval"):
                                                self.error_regval.append(value)

                                    def has_data(self):
                                        for c in self.csrs_info:
                                            if (c.has_data()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.alarm_on.is_set or
                                            self.asic_info.is_set or
                                            self.count.is_set or
                                            self.intr_type.is_set or
                                            self.last_cleared.is_set or
                                            self.leaf_id.is_set or
                                            self.name.is_set or
                                            self.node_key.is_set or
                                            self.period_hi.is_set or
                                            self.period_lo.is_set or
                                            self.thresh_hi.is_set or
                                            self.thresh_lo.is_set)

                                    def has_operation(self):
                                        for c in self.csrs_info:
                                            if (c.has_operation()):
                                                return True
                                        for c in self.last_err:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alarm_on.yfilter != YFilter.not_set or
                                            self.asic_info.yfilter != YFilter.not_set or
                                            self.count.yfilter != YFilter.not_set or
                                            self.intr_type.yfilter != YFilter.not_set or
                                            self.last_cleared.yfilter != YFilter.not_set or
                                            self.leaf_id.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.node_key.yfilter != YFilter.not_set or
                                            self.period_hi.yfilter != YFilter.not_set or
                                            self.period_lo.yfilter != YFilter.not_set or
                                            self.thresh_hi.yfilter != YFilter.not_set or
                                            self.thresh_lo.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "error" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alarm_on.is_set or self.alarm_on.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alarm_on.get_name_leafdata())
                                        if (self.asic_info.is_set or self.asic_info.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asic_info.get_name_leafdata())
                                        if (self.count.is_set or self.count.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.count.get_name_leafdata())
                                        if (self.intr_type.is_set or self.intr_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.intr_type.get_name_leafdata())
                                        if (self.last_cleared.is_set or self.last_cleared.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.last_cleared.get_name_leafdata())
                                        if (self.leaf_id.is_set or self.leaf_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.leaf_id.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.node_key.is_set or self.node_key.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_key.get_name_leafdata())
                                        if (self.period_hi.is_set or self.period_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_hi.get_name_leafdata())
                                        if (self.period_lo.is_set or self.period_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.period_lo.get_name_leafdata())
                                        if (self.thresh_hi.is_set or self.thresh_hi.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_hi.get_name_leafdata())
                                        if (self.thresh_lo.is_set or self.thresh_lo.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.thresh_lo.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "csrs-info"):
                                            for c in self.csrs_info:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.CsrsInfo()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.csrs_info.append(c)
                                            return c

                                        if (child_yang_name == "last-err"):
                                            for c in self.last_err:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error.LastErr()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.last_err.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "csrs-info" or name == "last-err" or name == "alarm-on" or name == "asic-info" or name == "count" or name == "intr-type" or name == "last-cleared" or name == "leaf-id" or name == "name" or name == "node-key" or name == "period-hi" or name == "period-lo" or name == "thresh-hi" or name == "thresh-lo"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alarm-on"):
                                            self.alarm_on = value
                                            self.alarm_on.value_namespace = name_space
                                            self.alarm_on.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asic-info"):
                                            self.asic_info = value
                                            self.asic_info.value_namespace = name_space
                                            self.asic_info.value_namespace_prefix = name_space_prefix
                                        if(value_path == "count"):
                                            self.count = value
                                            self.count.value_namespace = name_space
                                            self.count.value_namespace_prefix = name_space_prefix
                                        if(value_path == "intr-type"):
                                            self.intr_type = value
                                            self.intr_type.value_namespace = name_space
                                            self.intr_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "last-cleared"):
                                            self.last_cleared = value
                                            self.last_cleared.value_namespace = name_space
                                            self.last_cleared.value_namespace_prefix = name_space_prefix
                                        if(value_path == "leaf-id"):
                                            self.leaf_id = value
                                            self.leaf_id.value_namespace = name_space
                                            self.leaf_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-key"):
                                            self.node_key = value
                                            self.node_key.value_namespace = name_space
                                            self.node_key.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-hi"):
                                            self.period_hi = value
                                            self.period_hi.value_namespace = name_space
                                            self.period_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "period-lo"):
                                            self.period_lo = value
                                            self.period_lo.value_namespace = name_space
                                            self.period_lo.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-hi"):
                                            self.thresh_hi = value
                                            self.thresh_hi.value_namespace = name_space
                                            self.thresh_hi.value_namespace_prefix = name_space_prefix
                                        if(value_path == "thresh-lo"):
                                            self.thresh_lo = value
                                            self.thresh_lo.value_namespace = name_space
                                            self.thresh_lo.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.error:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.error:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "asic-error-mbe-hard" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "error"):
                                        for c in self.error:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard.Error()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.error.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "error"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    (self.asic_error_crc_hard is not None and self.asic_error_crc_hard.has_data()) or
                                    (self.asic_error_crc_soft is not None and self.asic_error_crc_soft.has_data()) or
                                    (self.asic_error_generic_hard is not None and self.asic_error_generic_hard.has_data()) or
                                    (self.asic_error_generic_soft is not None and self.asic_error_generic_soft.has_data()) or
                                    (self.asic_error_mbe_hard is not None and self.asic_error_mbe_hard.has_data()) or
                                    (self.asic_error_mbe_soft is not None and self.asic_error_mbe_soft.has_data()) or
                                    (self.asic_error_parity_hard is not None and self.asic_error_parity_hard.has_data()) or
                                    (self.asic_error_parity_soft is not None and self.asic_error_parity_soft.has_data()) or
                                    (self.asic_error_reset_hard is not None and self.asic_error_reset_hard.has_data()) or
                                    (self.asic_error_reset_soft is not None and self.asic_error_reset_soft.has_data()) or
                                    (self.asic_error_sbe_hard is not None and self.asic_error_sbe_hard.has_data()) or
                                    (self.asic_error_sbe_soft is not None and self.asic_error_sbe_soft.has_data()) or
                                    (self.back_pressure_hard_errors is not None and self.back_pressure_hard_errors.has_data()) or
                                    (self.back_pressure_soft_errors is not None and self.back_pressure_soft_errors.has_data()) or
                                    (self.barrier_hard_errors is not None and self.barrier_hard_errors.has_data()) or
                                    (self.barrier_soft_errors is not None and self.barrier_soft_errors.has_data()) or
                                    (self.configuration_hard_errors is not None and self.configuration_hard_errors.has_data()) or
                                    (self.configuration_soft_errors is not None and self.configuration_soft_errors.has_data()) or
                                    (self.crc_hard_errors is not None and self.crc_hard_errors.has_data()) or
                                    (self.crc_soft_errors is not None and self.crc_soft_errors.has_data()) or
                                    (self.descriptor_hard_errors is not None and self.descriptor_hard_errors.has_data()) or
                                    (self.descriptor_soft_errors is not None and self.descriptor_soft_errors.has_data()) or
                                    (self.generic_hard_errors is not None and self.generic_hard_errors.has_data()) or
                                    (self.generic_soft_errors is not None and self.generic_soft_errors.has_data()) or
                                    (self.hardware_hard_errors is not None and self.hardware_hard_errors.has_data()) or
                                    (self.hardware_soft_errors is not None and self.hardware_soft_errors.has_data()) or
                                    (self.indirect_hard_errors is not None and self.indirect_hard_errors.has_data()) or
                                    (self.indirect_soft_errors is not None and self.indirect_soft_errors.has_data()) or
                                    (self.instance_summary is not None and self.instance_summary.has_data()) or
                                    (self.interface_hard_errors is not None and self.interface_hard_errors.has_data()) or
                                    (self.interface_soft_errors is not None and self.interface_soft_errors.has_data()) or
                                    (self.io_hard_errors is not None and self.io_hard_errors.has_data()) or
                                    (self.io_soft_errors is not None and self.io_soft_errors.has_data()) or
                                    (self.link_hard_errors is not None and self.link_hard_errors.has_data()) or
                                    (self.link_soft_errors is not None and self.link_soft_errors.has_data()) or
                                    (self.multiple_bit_hard_errors is not None and self.multiple_bit_hard_errors.has_data()) or
                                    (self.multiple_bit_soft_errors is not None and self.multiple_bit_soft_errors.has_data()) or
                                    (self.outof_resource_hard is not None and self.outof_resource_hard.has_data()) or
                                    (self.outof_resource_soft is not None and self.outof_resource_soft.has_data()) or
                                    (self.parity_hard_errors is not None and self.parity_hard_errors.has_data()) or
                                    (self.parity_soft_errors is not None and self.parity_soft_errors.has_data()) or
                                    (self.reset_hard_errors is not None and self.reset_hard_errors.has_data()) or
                                    (self.reset_soft_errors is not None and self.reset_soft_errors.has_data()) or
                                    (self.single_bit_hard_errors is not None and self.single_bit_hard_errors.has_data()) or
                                    (self.single_bit_soft_errors is not None and self.single_bit_soft_errors.has_data()) or
                                    (self.time_out_hard_errors is not None and self.time_out_hard_errors.has_data()) or
                                    (self.time_out_soft_errors is not None and self.time_out_soft_errors.has_data()) or
                                    (self.ucode_hard_errors is not None and self.ucode_hard_errors.has_data()) or
                                    (self.ucode_soft_errors is not None and self.ucode_soft_errors.has_data()) or
                                    (self.unexpected_hard_errors is not None and self.unexpected_hard_errors.has_data()) or
                                    (self.unexpected_soft_errors is not None and self.unexpected_soft_errors.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.asic_error_crc_hard is not None and self.asic_error_crc_hard.has_operation()) or
                                    (self.asic_error_crc_soft is not None and self.asic_error_crc_soft.has_operation()) or
                                    (self.asic_error_generic_hard is not None and self.asic_error_generic_hard.has_operation()) or
                                    (self.asic_error_generic_soft is not None and self.asic_error_generic_soft.has_operation()) or
                                    (self.asic_error_mbe_hard is not None and self.asic_error_mbe_hard.has_operation()) or
                                    (self.asic_error_mbe_soft is not None and self.asic_error_mbe_soft.has_operation()) or
                                    (self.asic_error_parity_hard is not None and self.asic_error_parity_hard.has_operation()) or
                                    (self.asic_error_parity_soft is not None and self.asic_error_parity_soft.has_operation()) or
                                    (self.asic_error_reset_hard is not None and self.asic_error_reset_hard.has_operation()) or
                                    (self.asic_error_reset_soft is not None and self.asic_error_reset_soft.has_operation()) or
                                    (self.asic_error_sbe_hard is not None and self.asic_error_sbe_hard.has_operation()) or
                                    (self.asic_error_sbe_soft is not None and self.asic_error_sbe_soft.has_operation()) or
                                    (self.back_pressure_hard_errors is not None and self.back_pressure_hard_errors.has_operation()) or
                                    (self.back_pressure_soft_errors is not None and self.back_pressure_soft_errors.has_operation()) or
                                    (self.barrier_hard_errors is not None and self.barrier_hard_errors.has_operation()) or
                                    (self.barrier_soft_errors is not None and self.barrier_soft_errors.has_operation()) or
                                    (self.configuration_hard_errors is not None and self.configuration_hard_errors.has_operation()) or
                                    (self.configuration_soft_errors is not None and self.configuration_soft_errors.has_operation()) or
                                    (self.crc_hard_errors is not None and self.crc_hard_errors.has_operation()) or
                                    (self.crc_soft_errors is not None and self.crc_soft_errors.has_operation()) or
                                    (self.descriptor_hard_errors is not None and self.descriptor_hard_errors.has_operation()) or
                                    (self.descriptor_soft_errors is not None and self.descriptor_soft_errors.has_operation()) or
                                    (self.generic_hard_errors is not None and self.generic_hard_errors.has_operation()) or
                                    (self.generic_soft_errors is not None and self.generic_soft_errors.has_operation()) or
                                    (self.hardware_hard_errors is not None and self.hardware_hard_errors.has_operation()) or
                                    (self.hardware_soft_errors is not None and self.hardware_soft_errors.has_operation()) or
                                    (self.indirect_hard_errors is not None and self.indirect_hard_errors.has_operation()) or
                                    (self.indirect_soft_errors is not None and self.indirect_soft_errors.has_operation()) or
                                    (self.instance_summary is not None and self.instance_summary.has_operation()) or
                                    (self.interface_hard_errors is not None and self.interface_hard_errors.has_operation()) or
                                    (self.interface_soft_errors is not None and self.interface_soft_errors.has_operation()) or
                                    (self.io_hard_errors is not None and self.io_hard_errors.has_operation()) or
                                    (self.io_soft_errors is not None and self.io_soft_errors.has_operation()) or
                                    (self.link_hard_errors is not None and self.link_hard_errors.has_operation()) or
                                    (self.link_soft_errors is not None and self.link_soft_errors.has_operation()) or
                                    (self.multiple_bit_hard_errors is not None and self.multiple_bit_hard_errors.has_operation()) or
                                    (self.multiple_bit_soft_errors is not None and self.multiple_bit_soft_errors.has_operation()) or
                                    (self.outof_resource_hard is not None and self.outof_resource_hard.has_operation()) or
                                    (self.outof_resource_soft is not None and self.outof_resource_soft.has_operation()) or
                                    (self.parity_hard_errors is not None and self.parity_hard_errors.has_operation()) or
                                    (self.parity_soft_errors is not None and self.parity_soft_errors.has_operation()) or
                                    (self.reset_hard_errors is not None and self.reset_hard_errors.has_operation()) or
                                    (self.reset_soft_errors is not None and self.reset_soft_errors.has_operation()) or
                                    (self.single_bit_hard_errors is not None and self.single_bit_hard_errors.has_operation()) or
                                    (self.single_bit_soft_errors is not None and self.single_bit_soft_errors.has_operation()) or
                                    (self.time_out_hard_errors is not None and self.time_out_hard_errors.has_operation()) or
                                    (self.time_out_soft_errors is not None and self.time_out_soft_errors.has_operation()) or
                                    (self.ucode_hard_errors is not None and self.ucode_hard_errors.has_operation()) or
                                    (self.ucode_soft_errors is not None and self.ucode_soft_errors.has_operation()) or
                                    (self.unexpected_hard_errors is not None and self.unexpected_hard_errors.has_operation()) or
                                    (self.unexpected_soft_errors is not None and self.unexpected_soft_errors.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "error-path" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "asic-error-crc-hard"):
                                    if (self.asic_error_crc_hard is None):
                                        self.asic_error_crc_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcHard()
                                        self.asic_error_crc_hard.parent = self
                                        self._children_name_map["asic_error_crc_hard"] = "asic-error-crc-hard"
                                    return self.asic_error_crc_hard

                                if (child_yang_name == "asic-error-crc-soft"):
                                    if (self.asic_error_crc_soft is None):
                                        self.asic_error_crc_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorCrcSoft()
                                        self.asic_error_crc_soft.parent = self
                                        self._children_name_map["asic_error_crc_soft"] = "asic-error-crc-soft"
                                    return self.asic_error_crc_soft

                                if (child_yang_name == "asic-error-generic-hard"):
                                    if (self.asic_error_generic_hard is None):
                                        self.asic_error_generic_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericHard()
                                        self.asic_error_generic_hard.parent = self
                                        self._children_name_map["asic_error_generic_hard"] = "asic-error-generic-hard"
                                    return self.asic_error_generic_hard

                                if (child_yang_name == "asic-error-generic-soft"):
                                    if (self.asic_error_generic_soft is None):
                                        self.asic_error_generic_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorGenericSoft()
                                        self.asic_error_generic_soft.parent = self
                                        self._children_name_map["asic_error_generic_soft"] = "asic-error-generic-soft"
                                    return self.asic_error_generic_soft

                                if (child_yang_name == "asic-error-mbe-hard"):
                                    if (self.asic_error_mbe_hard is None):
                                        self.asic_error_mbe_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeHard()
                                        self.asic_error_mbe_hard.parent = self
                                        self._children_name_map["asic_error_mbe_hard"] = "asic-error-mbe-hard"
                                    return self.asic_error_mbe_hard

                                if (child_yang_name == "asic-error-mbe-soft"):
                                    if (self.asic_error_mbe_soft is None):
                                        self.asic_error_mbe_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorMbeSoft()
                                        self.asic_error_mbe_soft.parent = self
                                        self._children_name_map["asic_error_mbe_soft"] = "asic-error-mbe-soft"
                                    return self.asic_error_mbe_soft

                                if (child_yang_name == "asic-error-parity-hard"):
                                    if (self.asic_error_parity_hard is None):
                                        self.asic_error_parity_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParityHard()
                                        self.asic_error_parity_hard.parent = self
                                        self._children_name_map["asic_error_parity_hard"] = "asic-error-parity-hard"
                                    return self.asic_error_parity_hard

                                if (child_yang_name == "asic-error-parity-soft"):
                                    if (self.asic_error_parity_soft is None):
                                        self.asic_error_parity_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorParitySoft()
                                        self.asic_error_parity_soft.parent = self
                                        self._children_name_map["asic_error_parity_soft"] = "asic-error-parity-soft"
                                    return self.asic_error_parity_soft

                                if (child_yang_name == "asic-error-reset-hard"):
                                    if (self.asic_error_reset_hard is None):
                                        self.asic_error_reset_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetHard()
                                        self.asic_error_reset_hard.parent = self
                                        self._children_name_map["asic_error_reset_hard"] = "asic-error-reset-hard"
                                    return self.asic_error_reset_hard

                                if (child_yang_name == "asic-error-reset-soft"):
                                    if (self.asic_error_reset_soft is None):
                                        self.asic_error_reset_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorResetSoft()
                                        self.asic_error_reset_soft.parent = self
                                        self._children_name_map["asic_error_reset_soft"] = "asic-error-reset-soft"
                                    return self.asic_error_reset_soft

                                if (child_yang_name == "asic-error-sbe-hard"):
                                    if (self.asic_error_sbe_hard is None):
                                        self.asic_error_sbe_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeHard()
                                        self.asic_error_sbe_hard.parent = self
                                        self._children_name_map["asic_error_sbe_hard"] = "asic-error-sbe-hard"
                                    return self.asic_error_sbe_hard

                                if (child_yang_name == "asic-error-sbe-soft"):
                                    if (self.asic_error_sbe_soft is None):
                                        self.asic_error_sbe_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.AsicErrorSbeSoft()
                                        self.asic_error_sbe_soft.parent = self
                                        self._children_name_map["asic_error_sbe_soft"] = "asic-error-sbe-soft"
                                    return self.asic_error_sbe_soft

                                if (child_yang_name == "back-pressure-hard-errors"):
                                    if (self.back_pressure_hard_errors is None):
                                        self.back_pressure_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureHardErrors()
                                        self.back_pressure_hard_errors.parent = self
                                        self._children_name_map["back_pressure_hard_errors"] = "back-pressure-hard-errors"
                                    return self.back_pressure_hard_errors

                                if (child_yang_name == "back-pressure-soft-errors"):
                                    if (self.back_pressure_soft_errors is None):
                                        self.back_pressure_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BackPressureSoftErrors()
                                        self.back_pressure_soft_errors.parent = self
                                        self._children_name_map["back_pressure_soft_errors"] = "back-pressure-soft-errors"
                                    return self.back_pressure_soft_errors

                                if (child_yang_name == "barrier-hard-errors"):
                                    if (self.barrier_hard_errors is None):
                                        self.barrier_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierHardErrors()
                                        self.barrier_hard_errors.parent = self
                                        self._children_name_map["barrier_hard_errors"] = "barrier-hard-errors"
                                    return self.barrier_hard_errors

                                if (child_yang_name == "barrier-soft-errors"):
                                    if (self.barrier_soft_errors is None):
                                        self.barrier_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.BarrierSoftErrors()
                                        self.barrier_soft_errors.parent = self
                                        self._children_name_map["barrier_soft_errors"] = "barrier-soft-errors"
                                    return self.barrier_soft_errors

                                if (child_yang_name == "configuration-hard-errors"):
                                    if (self.configuration_hard_errors is None):
                                        self.configuration_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationHardErrors()
                                        self.configuration_hard_errors.parent = self
                                        self._children_name_map["configuration_hard_errors"] = "configuration-hard-errors"
                                    return self.configuration_hard_errors

                                if (child_yang_name == "configuration-soft-errors"):
                                    if (self.configuration_soft_errors is None):
                                        self.configuration_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ConfigurationSoftErrors()
                                        self.configuration_soft_errors.parent = self
                                        self._children_name_map["configuration_soft_errors"] = "configuration-soft-errors"
                                    return self.configuration_soft_errors

                                if (child_yang_name == "crc-hard-errors"):
                                    if (self.crc_hard_errors is None):
                                        self.crc_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcHardErrors()
                                        self.crc_hard_errors.parent = self
                                        self._children_name_map["crc_hard_errors"] = "crc-hard-errors"
                                    return self.crc_hard_errors

                                if (child_yang_name == "crc-soft-errors"):
                                    if (self.crc_soft_errors is None):
                                        self.crc_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.CrcSoftErrors()
                                        self.crc_soft_errors.parent = self
                                        self._children_name_map["crc_soft_errors"] = "crc-soft-errors"
                                    return self.crc_soft_errors

                                if (child_yang_name == "descriptor-hard-errors"):
                                    if (self.descriptor_hard_errors is None):
                                        self.descriptor_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorHardErrors()
                                        self.descriptor_hard_errors.parent = self
                                        self._children_name_map["descriptor_hard_errors"] = "descriptor-hard-errors"
                                    return self.descriptor_hard_errors

                                if (child_yang_name == "descriptor-soft-errors"):
                                    if (self.descriptor_soft_errors is None):
                                        self.descriptor_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.DescriptorSoftErrors()
                                        self.descriptor_soft_errors.parent = self
                                        self._children_name_map["descriptor_soft_errors"] = "descriptor-soft-errors"
                                    return self.descriptor_soft_errors

                                if (child_yang_name == "generic-hard-errors"):
                                    if (self.generic_hard_errors is None):
                                        self.generic_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericHardErrors()
                                        self.generic_hard_errors.parent = self
                                        self._children_name_map["generic_hard_errors"] = "generic-hard-errors"
                                    return self.generic_hard_errors

                                if (child_yang_name == "generic-soft-errors"):
                                    if (self.generic_soft_errors is None):
                                        self.generic_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.GenericSoftErrors()
                                        self.generic_soft_errors.parent = self
                                        self._children_name_map["generic_soft_errors"] = "generic-soft-errors"
                                    return self.generic_soft_errors

                                if (child_yang_name == "hardware-hard-errors"):
                                    if (self.hardware_hard_errors is None):
                                        self.hardware_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareHardErrors()
                                        self.hardware_hard_errors.parent = self
                                        self._children_name_map["hardware_hard_errors"] = "hardware-hard-errors"
                                    return self.hardware_hard_errors

                                if (child_yang_name == "hardware-soft-errors"):
                                    if (self.hardware_soft_errors is None):
                                        self.hardware_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.HardwareSoftErrors()
                                        self.hardware_soft_errors.parent = self
                                        self._children_name_map["hardware_soft_errors"] = "hardware-soft-errors"
                                    return self.hardware_soft_errors

                                if (child_yang_name == "indirect-hard-errors"):
                                    if (self.indirect_hard_errors is None):
                                        self.indirect_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectHardErrors()
                                        self.indirect_hard_errors.parent = self
                                        self._children_name_map["indirect_hard_errors"] = "indirect-hard-errors"
                                    return self.indirect_hard_errors

                                if (child_yang_name == "indirect-soft-errors"):
                                    if (self.indirect_soft_errors is None):
                                        self.indirect_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IndirectSoftErrors()
                                        self.indirect_soft_errors.parent = self
                                        self._children_name_map["indirect_soft_errors"] = "indirect-soft-errors"
                                    return self.indirect_soft_errors

                                if (child_yang_name == "instance-summary"):
                                    if (self.instance_summary is None):
                                        self.instance_summary = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InstanceSummary()
                                        self.instance_summary.parent = self
                                        self._children_name_map["instance_summary"] = "instance-summary"
                                    return self.instance_summary

                                if (child_yang_name == "interface-hard-errors"):
                                    if (self.interface_hard_errors is None):
                                        self.interface_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceHardErrors()
                                        self.interface_hard_errors.parent = self
                                        self._children_name_map["interface_hard_errors"] = "interface-hard-errors"
                                    return self.interface_hard_errors

                                if (child_yang_name == "interface-soft-errors"):
                                    if (self.interface_soft_errors is None):
                                        self.interface_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.InterfaceSoftErrors()
                                        self.interface_soft_errors.parent = self
                                        self._children_name_map["interface_soft_errors"] = "interface-soft-errors"
                                    return self.interface_soft_errors

                                if (child_yang_name == "io-hard-errors"):
                                    if (self.io_hard_errors is None):
                                        self.io_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoHardErrors()
                                        self.io_hard_errors.parent = self
                                        self._children_name_map["io_hard_errors"] = "io-hard-errors"
                                    return self.io_hard_errors

                                if (child_yang_name == "io-soft-errors"):
                                    if (self.io_soft_errors is None):
                                        self.io_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.IoSoftErrors()
                                        self.io_soft_errors.parent = self
                                        self._children_name_map["io_soft_errors"] = "io-soft-errors"
                                    return self.io_soft_errors

                                if (child_yang_name == "link-hard-errors"):
                                    if (self.link_hard_errors is None):
                                        self.link_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkHardErrors()
                                        self.link_hard_errors.parent = self
                                        self._children_name_map["link_hard_errors"] = "link-hard-errors"
                                    return self.link_hard_errors

                                if (child_yang_name == "link-soft-errors"):
                                    if (self.link_soft_errors is None):
                                        self.link_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.LinkSoftErrors()
                                        self.link_soft_errors.parent = self
                                        self._children_name_map["link_soft_errors"] = "link-soft-errors"
                                    return self.link_soft_errors

                                if (child_yang_name == "multiple-bit-hard-errors"):
                                    if (self.multiple_bit_hard_errors is None):
                                        self.multiple_bit_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitHardErrors()
                                        self.multiple_bit_hard_errors.parent = self
                                        self._children_name_map["multiple_bit_hard_errors"] = "multiple-bit-hard-errors"
                                    return self.multiple_bit_hard_errors

                                if (child_yang_name == "multiple-bit-soft-errors"):
                                    if (self.multiple_bit_soft_errors is None):
                                        self.multiple_bit_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.MultipleBitSoftErrors()
                                        self.multiple_bit_soft_errors.parent = self
                                        self._children_name_map["multiple_bit_soft_errors"] = "multiple-bit-soft-errors"
                                    return self.multiple_bit_soft_errors

                                if (child_yang_name == "outof-resource-hard"):
                                    if (self.outof_resource_hard is None):
                                        self.outof_resource_hard = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceHard()
                                        self.outof_resource_hard.parent = self
                                        self._children_name_map["outof_resource_hard"] = "outof-resource-hard"
                                    return self.outof_resource_hard

                                if (child_yang_name == "outof-resource-soft"):
                                    if (self.outof_resource_soft is None):
                                        self.outof_resource_soft = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.OutofResourceSoft()
                                        self.outof_resource_soft.parent = self
                                        self._children_name_map["outof_resource_soft"] = "outof-resource-soft"
                                    return self.outof_resource_soft

                                if (child_yang_name == "parity-hard-errors"):
                                    if (self.parity_hard_errors is None):
                                        self.parity_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParityHardErrors()
                                        self.parity_hard_errors.parent = self
                                        self._children_name_map["parity_hard_errors"] = "parity-hard-errors"
                                    return self.parity_hard_errors

                                if (child_yang_name == "parity-soft-errors"):
                                    if (self.parity_soft_errors is None):
                                        self.parity_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ParitySoftErrors()
                                        self.parity_soft_errors.parent = self
                                        self._children_name_map["parity_soft_errors"] = "parity-soft-errors"
                                    return self.parity_soft_errors

                                if (child_yang_name == "reset-hard-errors"):
                                    if (self.reset_hard_errors is None):
                                        self.reset_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetHardErrors()
                                        self.reset_hard_errors.parent = self
                                        self._children_name_map["reset_hard_errors"] = "reset-hard-errors"
                                    return self.reset_hard_errors

                                if (child_yang_name == "reset-soft-errors"):
                                    if (self.reset_soft_errors is None):
                                        self.reset_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.ResetSoftErrors()
                                        self.reset_soft_errors.parent = self
                                        self._children_name_map["reset_soft_errors"] = "reset-soft-errors"
                                    return self.reset_soft_errors

                                if (child_yang_name == "single-bit-hard-errors"):
                                    if (self.single_bit_hard_errors is None):
                                        self.single_bit_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitHardErrors()
                                        self.single_bit_hard_errors.parent = self
                                        self._children_name_map["single_bit_hard_errors"] = "single-bit-hard-errors"
                                    return self.single_bit_hard_errors

                                if (child_yang_name == "single-bit-soft-errors"):
                                    if (self.single_bit_soft_errors is None):
                                        self.single_bit_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.SingleBitSoftErrors()
                                        self.single_bit_soft_errors.parent = self
                                        self._children_name_map["single_bit_soft_errors"] = "single-bit-soft-errors"
                                    return self.single_bit_soft_errors

                                if (child_yang_name == "time-out-hard-errors"):
                                    if (self.time_out_hard_errors is None):
                                        self.time_out_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutHardErrors()
                                        self.time_out_hard_errors.parent = self
                                        self._children_name_map["time_out_hard_errors"] = "time-out-hard-errors"
                                    return self.time_out_hard_errors

                                if (child_yang_name == "time-out-soft-errors"):
                                    if (self.time_out_soft_errors is None):
                                        self.time_out_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.TimeOutSoftErrors()
                                        self.time_out_soft_errors.parent = self
                                        self._children_name_map["time_out_soft_errors"] = "time-out-soft-errors"
                                    return self.time_out_soft_errors

                                if (child_yang_name == "ucode-hard-errors"):
                                    if (self.ucode_hard_errors is None):
                                        self.ucode_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeHardErrors()
                                        self.ucode_hard_errors.parent = self
                                        self._children_name_map["ucode_hard_errors"] = "ucode-hard-errors"
                                    return self.ucode_hard_errors

                                if (child_yang_name == "ucode-soft-errors"):
                                    if (self.ucode_soft_errors is None):
                                        self.ucode_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UcodeSoftErrors()
                                        self.ucode_soft_errors.parent = self
                                        self._children_name_map["ucode_soft_errors"] = "ucode-soft-errors"
                                    return self.ucode_soft_errors

                                if (child_yang_name == "unexpected-hard-errors"):
                                    if (self.unexpected_hard_errors is None):
                                        self.unexpected_hard_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedHardErrors()
                                        self.unexpected_hard_errors.parent = self
                                        self._children_name_map["unexpected_hard_errors"] = "unexpected-hard-errors"
                                    return self.unexpected_hard_errors

                                if (child_yang_name == "unexpected-soft-errors"):
                                    if (self.unexpected_soft_errors is None):
                                        self.unexpected_soft_errors = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath.UnexpectedSoftErrors()
                                        self.unexpected_soft_errors.parent = self
                                        self._children_name_map["unexpected_soft_errors"] = "unexpected-soft-errors"
                                    return self.unexpected_soft_errors

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "asic-error-crc-hard" or name == "asic-error-crc-soft" or name == "asic-error-generic-hard" or name == "asic-error-generic-soft" or name == "asic-error-mbe-hard" or name == "asic-error-mbe-soft" or name == "asic-error-parity-hard" or name == "asic-error-parity-soft" or name == "asic-error-reset-hard" or name == "asic-error-reset-soft" or name == "asic-error-sbe-hard" or name == "asic-error-sbe-soft" or name == "back-pressure-hard-errors" or name == "back-pressure-soft-errors" or name == "barrier-hard-errors" or name == "barrier-soft-errors" or name == "configuration-hard-errors" or name == "configuration-soft-errors" or name == "crc-hard-errors" or name == "crc-soft-errors" or name == "descriptor-hard-errors" or name == "descriptor-soft-errors" or name == "generic-hard-errors" or name == "generic-soft-errors" or name == "hardware-hard-errors" or name == "hardware-soft-errors" or name == "indirect-hard-errors" or name == "indirect-soft-errors" or name == "instance-summary" or name == "interface-hard-errors" or name == "interface-soft-errors" or name == "io-hard-errors" or name == "io-soft-errors" or name == "link-hard-errors" or name == "link-soft-errors" or name == "multiple-bit-hard-errors" or name == "multiple-bit-soft-errors" or name == "outof-resource-hard" or name == "outof-resource-soft" or name == "parity-hard-errors" or name == "parity-soft-errors" or name == "reset-hard-errors" or name == "reset-soft-errors" or name == "single-bit-hard-errors" or name == "single-bit-soft-errors" or name == "time-out-hard-errors" or name == "time-out-soft-errors" or name == "ucode-hard-errors" or name == "ucode-soft-errors" or name == "unexpected-hard-errors" or name == "unexpected-soft-errors"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.asic_instance.is_set or
                                (self.error_path is not None and self.error_path.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.asic_instance.yfilter != YFilter.not_set or
                                (self.error_path is not None and self.error_path.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "instance" + "[asic-instance='" + self.asic_instance.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.asic_instance.is_set or self.asic_instance.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.asic_instance.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "error-path"):
                                if (self.error_path is None):
                                    self.error_path = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance.ErrorPath()
                                    self.error_path.parent = self
                                    self._children_name_map["error_path"] = "error-path"
                                return self.error_path

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "error-path" or name == "asic-instance"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "asic-instance"):
                                self.asic_instance = value
                                self.asic_instance.value_namespace = name_space
                                self.asic_instance.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.instance:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.instance:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "instances" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "instance"):
                            for c in self.instance:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = AsicErrors.Nodes.Node.AsicInformation.Instances.Instance()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.instance.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "instance"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        self.asic.is_set or
                        (self.all_instances is not None and self.all_instances.has_data()) or
                        (self.instances is not None and self.instances.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.asic.yfilter != YFilter.not_set or
                        (self.all_instances is not None and self.all_instances.has_operation()) or
                        (self.instances is not None and self.instances.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "asic-information" + "[asic='" + self.asic.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.asic.is_set or self.asic.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.asic.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "all-instances"):
                        if (self.all_instances is None):
                            self.all_instances = AsicErrors.Nodes.Node.AsicInformation.AllInstances()
                            self.all_instances.parent = self
                            self._children_name_map["all_instances"] = "all-instances"
                        return self.all_instances

                    if (child_yang_name == "instances"):
                        if (self.instances is None):
                            self.instances = AsicErrors.Nodes.Node.AsicInformation.Instances()
                            self.instances.parent = self
                            self._children_name_map["instances"] = "instances"
                        return self.instances

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "all-instances" or name == "instances" or name == "asic"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "asic"):
                        self.asic = value
                        self.asic.value_namespace = name_space
                        self.asic.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.asic_information:
                    if (c.has_data()):
                        return True
                return self.node_name.is_set

            def has_operation(self):
                for c in self.asic_information:
                    if (c.has_operation()):
                        return True
                return (
                    self.yfilter != YFilter.not_set or
                    self.node_name.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "node" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-asic-errors-oper:asic-errors/nodes/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.node_name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "asic-information"):
                    for c in self.asic_information:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = AsicErrors.Nodes.Node.AsicInformation()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.asic_information.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "asic-information" or name == "node-name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "node-name"):
                    self.node_name = value
                    self.node_name.value_namespace = name_space
                    self.node_name.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.node:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.node:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "nodes" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-asic-errors-oper:asic-errors/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "node"):
                for c in self.node:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = AsicErrors.Nodes.Node()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.node.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.nodes is not None and self.nodes.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.nodes is not None and self.nodes.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-asic-errors-oper:asic-errors" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "nodes"):
            if (self.nodes is None):
                self.nodes = AsicErrors.Nodes()
                self.nodes.parent = self
                self._children_name_map["nodes"] = "nodes"
            return self.nodes

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "nodes"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = AsicErrors()
        return self._top_entity

